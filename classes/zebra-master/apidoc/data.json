{
    "project": {},
    "files": {
        "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js": {
            "name": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "modules": {
                "zebra": 1,
                "util": 1,
                "data": 1,
                "io": 1,
                "layout": 1,
                "ui": 1,
                "ui.designer": 1,
                "ui.tree": 1,
                "ui.grid": 1
            },
            "classes": {
                "zebra.Dummy": 1,
                "zebra.URL": 1,
                "zebra.util.rgb": 1,
                "zebra.util.Listeners": 1,
                "zebra.util.Position": 1,
                "zebra.util.Position.Metric": 1,
                "zebra.util.Bag": 1,
                "zebra.data.TextModel": 1,
                "zebra.data.Text": 1,
                "zebra.data.SingleLineTxt": 1,
                "zebra.data.ListModel": 1,
                "zebra.data.Item": 1,
                "zebra.data.TreeModel": 1,
                "zebra.data.Matrix": 1,
                "zebra.io.QS": 1,
                "zebra.io.HTTP": 1,
                "zebra.io.Service": 1,
                "zebra.io.JRPC": 1,
                "zebra.io.XRPC": 1,
                "zebra.layout.Layout": 1,
                "zebra.layout.Layoutable": 1,
                "zebra.layout.StackLayout": 1,
                "zebra.layout.BorderLayout": 1,
                "zebra.layout.RasterLayout": 1,
                "zebra.layout.FlowLayout": 1,
                "zebra.layout.ListLayout": 1,
                "zebra.layout.PercentLayout": 1,
                "zebra.layout.Constraints": 1,
                "zebra.layout.GridLayout": 1,
                "zebra.ui.View": 1,
                "zebra.ui.Render": 1,
                "zebra.ui.Raised": 1,
                "zebra.ui.Sunken": 1,
                "zebra.ui.Etched": 1,
                "zebra.ui.Dotted": 1,
                "zebra.ui.Border": 1,
                "zebra.ui.RoundBorder": 1,
                "zebra.ui.Gradient": 1,
                "zebra.ui.Radial": 1,
                "zebra.ui.Picture": 1,
                "zebra.ui.Pattern": 1,
                "zebra.ui.CompositeView": 1,
                "zebra.ui.ViewSet": 1,
                "zebra.ui.Font": 1,
                "zebra.ui.MouseListener": 1,
                "zebra.ui.FocusListener": 1,
                "zebra.ui.KeyListener": 1,
                "zebra.ui.Cursorable": 1,
                "zebra.ui.Composite": 1,
                "zebra.ui.ChildrenListener": 1,
                "zebra.ui.CopyCutPaste": 1,
                "zebra.ui.ComponentListener": 1,
                "zebra.ui.InputEvent": 1,
                "zebra.ui.KeyEvent": 1,
                "zebra.ui.MouseEvent": 1,
                "zebra.ui.Panel": 1,
                "zebra.ui.BaseLayer": 1,
                "zebra.ui.RootLayer": 1,
                "zebra.ui.ViewPan": 1,
                "zebra.ui.ImagePan": 1,
                "zebra.ui.Manager": 1,
                "zebra.ui.PaintManager": 1,
                "zebra.ui.PaintManImpl": 1,
                "zebra.ui.FocusManager": 1,
                "zebra.ui.CommandManager": 1,
                "zebra.ui.CursorManager": 1,
                "zebra.ui.EventManager": 1,
                "zebra.ui.zCanvas": 1,
                "zebra.ui.MouseWheelSupport": 1,
                "zebra.ui.CompRender": 1,
                "zebra.ui.Line": 1,
                "zebra.ui.TextRender": 1,
                "zebra.ui.PasswordText": 1,
                "zebra.ui.Label": 1,
                "zebra.ui.MLabel": 1,
                "zebra.ui.BoldLabel": 1,
                "zebra.ui.ImageLabel": 1,
                "zebra.ui.StatePan": 1,
                "zebra.ui.Button": 1,
                "zebra.ui.BorderPan": 1,
                "zebra.ui.SwitchManager": 1,
                "zebra.ui.Group": 1,
                "zebra.ui.Checkbox": 1,
                "zebra.ui.Checkbox.Box": 1,
                "zebra.ui.Radiobox": 1,
                "zebra.ui.SplitPan": 1,
                "zebra.ui.Progress": 1,
                "zebra.ui.Link": 1,
                "zebra.ui.Extender": 1,
                "zebra.ui.ScrollManager": 1,
                "zebra.ui.Scroll": 1,
                "zebra.ui.ScrollPan": 1,
                "zebra.ui.Tabs": 1,
                "zebra.ui.Slider": 1,
                "zebra.ui.Toolbar": 1,
                "zebra.ui.RadioView": 1,
                "zebra.ui.TextField": 1,
                "zebra.ui.TextArea": 1,
                "zebra.ui.BaseList": 1,
                "zebra.ui.List": 1,
                "zebra.ui.List.ViewProvider": 1,
                "zebra.ui.CompList": 1,
                "zebra.ui.Combo": 1,
                "zebra.ui.Combo.ContentPan": 1,
                "zebra.ui.Combo.ReadonlyContentPan": 1,
                "zebra.ui.Combo.EditableContentPan": 1,
                "zebra.ui.ComboArrowView": 1,
                "zebra.ui.TooltipInfo": 1,
                "zebra.ui.PopupInfo": 1,
                "zebra.ui.WinListener": 1,
                "zebra.ui.WinLayer": 1,
                "zebra.ui.Window": 1,
                "zebra.ui.TooltipManager": 1,
                "zebra.ui.Menu": 1,
                "zebra.ui.Menunbar": 1,
                "zebra.ui.PopupLayer": 1,
                "zebra.ui.PopupManager": 1,
                "zebra.ui.designer.ShaperPan": 1,
                "zebra.ui.HtmlElement": 1,
                "zebra.ui.HtmlTextInput": 1,
                "zebra.ui.HtmlTextField": 1,
                "zebra.ui.HtmlTextArea": 1,
                "zebra.ui.tree.DefEditors": 1,
                "zebra.ui.tree.DefViews": 1,
                "zebra.ui.tree.Tree": 1,
                "zebra.ui.grid.Metrics": 1,
                "zebra.ui.grid.DefEditors": 1,
                "zebra.ui.grid.GridCaption": 1,
                "zebra.ui.grid.Grid": 1,
                "zebra.ui.grid.GridStretchPan": 1
            },
            "fors": {
                "zebra.Interface()": 1,
                "zebra.Class()": 1,
                "zebra.forName()": 1,
                "zebra.instanceOf()": 1,
                "zebra.ready()": 1,
                "": 1,
                "zebra.util.newInstance()": 1,
                "zebra.util.findInTree()": 1,
                "zebra.util.Position": 1,
                "zebra.io.ID()": 1,
                "zebra.io.b64encode()": 1,
                "zebra.io.b64decode()": 1,
                "zebra.io.GET()": 1,
                "zebra.io.POST()": 1,
                "zebra.io.XRPC.invoke()": 1,
                "zebra.io.JRPC.invoke()": 1,
                "zebra.layout.getDirectChild()": 1,
                "zebra.layout.getDirectAt()": 1,
                "zebra.layout.getTopParent()": 1,
                "zebra.layout.getAbsLocation()": 1,
                "zebra.ui.Font": 1,
                "zebra.ui.findCanvas()": 1,
                "zebra.ui.loadImage()": 1,
                "zebra.ui.Checkbox": 1,
                "zebra.ui.List": 1,
                "zebra.ui.Combo": 1,
                "zebra.ui.showWindow()": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "zebra": {
            "name": "zebra",
            "submodules": {},
            "classes": {
                "zebra.Interface()": 1,
                "zebra.Class()": 1,
                "zebra.forName()": 1,
                "zebra.instanceOf()": 1,
                "zebra.ready()": 1,
                "zebra.Dummy": 1,
                "zebra.URL": 1
            },
            "fors": {
                "zebra.Interface()": 1,
                "zebra.Class()": 1,
                "zebra.forName()": 1,
                "zebra.instanceOf()": 1,
                "zebra.ready()": 1,
                "": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 887,
            "description": "This is the core module that provides powerful easy OOP concept, packaging and number of utility methods.\nThe module has no any dependency from others zebra modules and can be used independently."
        },
        "util": {
            "name": "util",
            "submodules": {},
            "classes": {
                "zebra.util.newInstance()": 1,
                "zebra.util.findInTree()": 1,
                "zebra.util.rgb": 1,
                "zebra.util.Listeners": 1,
                "zebra.util.Position": 1,
                "zebra.util.Position.Metric": 1,
                "zebra.util.Bag": 1
            },
            "fors": {
                "zebra.util.newInstance()": 1,
                "zebra.util.findInTree()": 1,
                "zebra.util.Position": 1,
                "": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1854,
            "description": "Number of different utilities methods and classes",
            "requires": [
                "zebra"
            ]
        },
        "data": {
            "name": "data",
            "submodules": {},
            "classes": {
                "zebra.data.TextModel": 1,
                "zebra.data.Text": 1,
                "zebra.data.SingleLineTxt": 1,
                "zebra.data.ListModel": 1,
                "zebra.data.Item": 1,
                "zebra.data.TreeModel": 1,
                "zebra.data.Matrix": 1
            },
            "fors": {
                "": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2815,
            "description": "Collection of variouse data models.",
            "itemtype": "main",
            "requires": [
                "zebra",
                "util"
            ]
        },
        "io": {
            "name": "io",
            "submodules": {},
            "classes": {
                "zebra.io.ID()": 1,
                "zebra.io.b64encode()": 1,
                "zebra.io.b64decode()": 1,
                "zebra.io.QS": 1,
                "zebra.io.HTTP": 1,
                "zebra.io.GET()": 1,
                "zebra.io.POST()": 1,
                "zebra.io.Service": 1,
                "zebra.io.JRPC": 1,
                "zebra.io.XRPC": 1,
                "zebra.io.XRPC.invoke()": 1,
                "zebra.io.JRPC.invoke()": 1
            },
            "fors": {
                "zebra.io.ID()": 1,
                "zebra.io.b64encode()": 1,
                "zebra.io.b64decode()": 1,
                "zebra.io.GET()": 1,
                "zebra.io.POST()": 1,
                "zebra.io.XRPC.invoke()": 1,
                "zebra.io.JRPC.invoke()": 1,
                "": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3822,
            "description": "The module provides number of classes to help to communicate \nwith remote services and servers by HTTP, JSON-RPC, XML-RPC\nprotocols",
            "requires": [
                "zebra",
                "util"
            ]
        },
        "layout": {
            "name": "layout",
            "submodules": {},
            "classes": {
                "zebra.layout.Layout": 1,
                "zebra.layout.getDirectChild()": 1,
                "zebra.layout.getDirectAt()": 1,
                "zebra.layout.getTopParent()": 1,
                "zebra.layout.getAbsLocation()": 1,
                "zebra.layout.Layoutable": 1,
                "zebra.layout.StackLayout": 1,
                "zebra.layout.BorderLayout": 1,
                "zebra.layout.RasterLayout": 1,
                "zebra.layout.FlowLayout": 1,
                "zebra.layout.ListLayout": 1,
                "zebra.layout.PercentLayout": 1,
                "zebra.layout.Constraints": 1,
                "zebra.layout.GridLayout": 1
            },
            "fors": {
                "zebra.layout.getDirectChild()": 1,
                "zebra.layout.getDirectAt()": 1,
                "zebra.layout.getTopParent()": 1,
                "zebra.layout.getAbsLocation()": 1,
                "": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5394,
            "description": "Layout package provides number of classes, interfaces, methods and \nvariables that allows developer easily implement rules based layouting \nof hierarchy of rectangular elements. The package has no relation \nto any concrete UI, but it can be applied to a required UI framework\n\nThe package declares the following constrains constants:\n    \n   - **NONE** no constraints \n   - **LEFT** left alignment constraint\n   - **TOP** top alignment constraint\n   - **RIGHT** right alignment constraint\n   - **BOTTOM** bottom alignment constraint\n   - **CENTER** center alignment constraint\n   - **HORIZONTAL** horizontal elements alignment constraint\n   - **VERTICAL** vertical elements alignment constraint\n   - **TLEFT** top left alignment constraint\n   - **TRIGHT** top right alignment constraint\n   - **BLEFT** bottom left alignment constraint\n   - **BRIGHT** bottom right alignment constraint\n   - **STRETCH** stretch element\n   - **USE_PS_SIZE** use preferred size for an element",
            "itemtype": "main"
        },
        "ui": {
            "name": "ui",
            "submodules": {},
            "classes": {
                "zebra.ui.View": 1,
                "zebra.ui.Render": 1,
                "zebra.ui.Raised": 1,
                "zebra.ui.Sunken": 1,
                "zebra.ui.Etched": 1,
                "zebra.ui.Dotted": 1,
                "zebra.ui.Border": 1,
                "zebra.ui.RoundBorder": 1,
                "zebra.ui.Gradient": 1,
                "zebra.ui.Radial": 1,
                "zebra.ui.Picture": 1,
                "zebra.ui.Pattern": 1,
                "zebra.ui.CompositeView": 1,
                "zebra.ui.ViewSet": 1,
                "zebra.ui.Font": 1,
                "zebra.ui.MouseListener": 1,
                "zebra.ui.FocusListener": 1,
                "zebra.ui.KeyListener": 1,
                "zebra.ui.Cursorable": 1,
                "zebra.ui.Composite": 1,
                "zebra.ui.ChildrenListener": 1,
                "zebra.ui.CopyCutPaste": 1,
                "zebra.ui.ComponentListener": 1,
                "zebra.ui.InputEvent": 1,
                "zebra.ui.KeyEvent": 1,
                "zebra.ui.MouseEvent": 1,
                "zebra.ui.findCanvas()": 1,
                "zebra.ui.loadImage()": 1,
                "zebra.ui.Panel": 1,
                "zebra.ui.BaseLayer": 1,
                "zebra.ui.RootLayer": 1,
                "zebra.ui.ViewPan": 1,
                "zebra.ui.ImagePan": 1,
                "zebra.ui.Manager": 1,
                "zebra.ui.PaintManager": 1,
                "zebra.ui.PaintManImpl": 1,
                "zebra.ui.FocusManager": 1,
                "zebra.ui.CommandManager": 1,
                "zebra.ui.CursorManager": 1,
                "zebra.ui.EventManager": 1,
                "zebra.ui.zCanvas": 1,
                "zebra.ui.MouseWheelSupport": 1,
                "zebra.ui.CompRender": 1,
                "zebra.ui.Line": 1,
                "zebra.ui.TextRender": 1,
                "zebra.ui.PasswordText": 1,
                "zebra.ui.Label": 1,
                "zebra.ui.MLabel": 1,
                "zebra.ui.BoldLabel": 1,
                "zebra.ui.ImageLabel": 1,
                "zebra.ui.StatePan": 1,
                "zebra.ui.Button": 1,
                "zebra.ui.BorderPan": 1,
                "zebra.ui.SwitchManager": 1,
                "zebra.ui.Group": 1,
                "zebra.ui.Checkbox": 1,
                "zebra.ui.Checkbox.Box": 1,
                "zebra.ui.Radiobox": 1,
                "zebra.ui.SplitPan": 1,
                "zebra.ui.Progress": 1,
                "zebra.ui.Link": 1,
                "zebra.ui.Extender": 1,
                "zebra.ui.ScrollManager": 1,
                "zebra.ui.Scroll": 1,
                "zebra.ui.ScrollPan": 1,
                "zebra.ui.Tabs": 1,
                "zebra.ui.Slider": 1,
                "zebra.ui.Toolbar": 1,
                "zebra.ui.RadioView": 1,
                "zebra.ui.TextField": 1,
                "zebra.ui.TextArea": 1,
                "zebra.ui.BaseList": 1,
                "zebra.ui.List": 1,
                "zebra.ui.List.ViewProvider": 1,
                "zebra.ui.CompList": 1,
                "zebra.ui.Combo": 1,
                "zebra.ui.Combo.ContentPan": 1,
                "zebra.ui.Combo.ReadonlyContentPan": 1,
                "zebra.ui.Combo.EditableContentPan": 1,
                "zebra.ui.ComboArrowView": 1,
                "zebra.ui.TooltipInfo": 1,
                "zebra.ui.PopupInfo": 1,
                "zebra.ui.WinListener": 1,
                "zebra.ui.showWindow()": 1,
                "zebra.ui.WinLayer": 1,
                "zebra.ui.Window": 1,
                "zebra.ui.TooltipManager": 1,
                "zebra.ui.Menu": 1,
                "zebra.ui.Menunbar": 1,
                "zebra.ui.PopupLayer": 1,
                "zebra.ui.PopupManager": 1,
                "zebra.ui.HtmlElement": 1,
                "zebra.ui.HtmlTextInput": 1,
                "zebra.ui.HtmlTextField": 1,
                "zebra.ui.HtmlTextArea": 1
            },
            "fors": {
                "zebra.ui.Font": 1,
                "zebra.ui.findCanvas()": 1,
                "zebra.ui.loadImage()": 1,
                "": 1,
                "zebra.ui.Checkbox": 1,
                "zebra.ui.List": 1,
                "zebra.ui.Combo": 1,
                "zebra.ui.showWindow()": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19553,
            "description": "Zebra UI. The UI is powerful way to create any imaginable \nuser interface for WEB. The idea is based on developing \nhierarchy of UI components that sits and renders on HTML5 \nCanvas element.\n\nWrite zebra UI code in safe place where you can be sure all \nnecessary structure, configurations, etc are ready. The safe \nplace is \"zebra.ready(...)\" method. Development of zebra UI \napplication begins from creation \"zebra.ui.zCanvas\" class, \nthat is starting point and root element of your UI components \nhierarchy. \"zCanvas\" is actually wrapper around HTML5 Canvas \nelement where zebra UI sits on. The typical zebra UI coding \ntemplate is shown below: \n      \n    // build UI in safe place  \n    zebra.ready(function() {\n       // create canvas element \n       var c = new zebra.ui.zCanvas(400, 400);\n           \n       // start placing UI component on c.root panel\n       //set layout manager\n       c.root.setLayout(new zebra.layout.BorderLayout());            \n       //add label to top\n       c.root.add(zebra.layout.TOP,new zebra.ui.Label(\"Top label\")); \n       //add text area to center\n       c.root.add(zebra.layout.CENTER,new zebra.ui.TextArea(\"\"));    \n       //add button area to bottom\n       c.root.add(zebra.layout.BOTTOM,new zebra.ui.Button(\"Button\"));\n       ...\n    });\n\n The latest version of zebra JavaScript is available in repository:\n\n       <script src='http://repo.zebkit.org/latest/zebra.min.js' \n               type='text/javascript'></script>",
            "itemtype": "main"
        },
        "ui.designer": {
            "name": "ui.designer",
            "submodules": {},
            "classes": {
                "zebra.ui.designer.ShaperPan": 1
            },
            "fors": {
                "": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18952,
            "description": "The package contains number of UI components that can be helful to \nmake visiual control of an UI component size and location",
            "itemtype": "main"
        },
        "ui.tree": {
            "name": "ui.tree",
            "submodules": {},
            "classes": {
                "zebra.ui.tree.DefEditors": 1,
                "zebra.ui.tree.DefViews": 1,
                "zebra.ui.tree.Tree": 1
            },
            "fors": {
                "": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19701,
            "description": "Tree UI component and all related to the component classes and interfaces. \nThe component is graphical representation of a tree model that allows a user \nto navigate over the model item, customize the items rendering and \norganize customizable editing of the items.\n\n       // create tree component instance to visualize the given tree model\n       var tree = new zebra.ui.tree.Tree({ \n           value: \"Root\"\n           kids : [\n               \"Item 1\",\n               \"Item 2\",\n               \"Item 3\"\n           ]\n       });\n\n       // make all tree items editable with text field component \n       tree.setEditorProvider(new zebra.ui.tree.DefEditors());",
            "itemtype": "main"
        },
        "ui.grid": {
            "name": "ui.grid",
            "submodules": {},
            "classes": {
                "zebra.ui.grid.Metrics": 1,
                "zebra.ui.grid.DefEditors": 1,
                "zebra.ui.grid.GridCaption": 1,
                "zebra.ui.grid.Grid": 1,
                "zebra.ui.grid.GridStretchPan": 1
            },
            "fors": {
                "": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22637,
            "description": "The package contains number of classes and interfaces to implement\nUI Grid component. The grid allows developers to visualize matrix \nmodel, customize the model data editing and rendering.",
            "itemtype": "main"
        }
    },
    "classes": {
        "zebra.Interface()": {
            "name": "zebra.Interface()",
            "shortname": "zebra.Interface()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "zebra",
            "namespace": ""
        },
        "zebra.Class()": {
            "name": "zebra.Class()",
            "shortname": "zebra.Class()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "zebra",
            "namespace": ""
        },
        "zebra.forName()": {
            "name": "zebra.forName()",
            "shortname": "zebra.forName()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "zebra",
            "namespace": ""
        },
        "zebra.instanceOf()": {
            "name": "zebra.instanceOf()",
            "shortname": "zebra.instanceOf()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "zebra",
            "namespace": ""
        },
        "zebra.ready()": {
            "name": "zebra.ready()",
            "shortname": "zebra.ready()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "zebra",
            "namespace": ""
        },
        "zebra.Dummy": {
            "name": "zebra.Dummy",
            "shortname": "zebra.Dummy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "zebra",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 791,
            "description": "Dummy class that implements nothing but can be useful to instantiate \nanonymous classes with some on \"the fly\" functionality:\n\n       // instantiate and use zebra class with method a implemented \n       var ac = new zebra.Dummy([\n            function a() {\n               ...\n            }\n       ]);\n\n       // use it\n       ac.a();"
        },
        "zebra.URL": {
            "name": "zebra.URL",
            "shortname": "zebra.URL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "zebra",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 887,
            "description": "URL class",
            "params": [
                {
                    "name": "url",
                    "description": "an url",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "zebra.util.newInstance()": {
            "name": "zebra.util.newInstance()",
            "shortname": "zebra.util.newInstance()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": ""
        },
        "zebra.util.findInTree()": {
            "name": "zebra.util.findInTree()",
            "shortname": "zebra.util.findInTree()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": ""
        },
        "zebra.util.rgb": {
            "name": "zebra.util.rgb",
            "shortname": "zebra.util.rgb",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1138,
            "description": "Rgb color class. This class represents rgb(a) color as JavaScript structure:\n\n      // rgb color\n      var rgb1 = new zebra.util.rgb(100,200,100);\n\n      // rgb with transparency \n      var rgb2 = new zebra.util.rgb(100,200,100, 0.6);\n      \n      // encoded as a string rgb color\n      var rgb3 = new zebra.util.rgb(\"rgb(100,100,200)\");\n\n      // hex rgb color\n      var rgb3 = new zebra.util.rgb(\"#CCDDFF\");",
            "params": [
                {
                    "name": "r",
                    "description": "red color intensity or if this is the only constructor parameter it denotes \nencoded in string rgb color",
                    "type": "Integer|String"
                },
                {
                    "name": "g",
                    "description": "green color intensity",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "b",
                    "description": "blue color intensity",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "alpha color intensity",
                    "type": "Float",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebra.util.Listeners": {
            "name": "zebra.util.Listeners",
            "shortname": "zebra.util.Listeners",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1300,
            "description": "This this META class is handy container to keep different types of listeners and\nfire events to the listeners:\n\n       // create listener container to keep three different events \n       // handlers\n       var MyListenerContainerClass = zebra.util.Listeners.Class(\"event1\", \n                                                                 \"event2\", \n                                                                 \"event3\"); \n\n       // instantiate listener class container\n       var listeners = new MyListenerContainerClass();\n\n       // add \"event1\" listener \n       listeners.add(function event1() {\n           ...\n       });\n\n       // add \"event2\" listener \n       listeners.add(function event2() {\n          ...\n       });\n\n       // and firing event1 to registered handlers\n       listeners.event1(...); \n\n       // and firing event2 to registered handlers\n       listeners.event2(...);",
            "is_constructor": 1,
            "params": [
                {
                    "name": "events",
                    "description": "events types the container has to support",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ]
        },
        "zebra.util.Position": {
            "name": "zebra.util.Position",
            "shortname": "zebra.util.Position",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1451,
            "description": "Useful class to track a virtual cursor position in a structure that has \ndedicated number of lines where every line has a number of elements. The \nstructure metric has to be described by providing an instance of  \nzebra.util.Position.Metric interface that discovers how many \nlines the structure has and how many elements every line includes.",
            "params": [
                {
                    "name": "m",
                    "description": "a position metric",
                    "type": "zebra.util.Position.Metric"
                }
            ],
            "is_constructor": 1
        },
        "zebra.util.Position.Metric": {
            "name": "zebra.util.Position.Metric",
            "shortname": "zebra.util.Position.Metric",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1477,
            "description": "Position metric interface. This interface is designed for describing \na navigational structure that consists on number of lines where\nevery line consists of number of elements"
        },
        "zebra.util.Bag": {
            "name": "zebra.util.Bag",
            "shortname": "zebra.util.Bag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1854,
            "description": "JSON configuration objects loader class. The class is handy way to keep and load configuration \nencoded in JSON format. Except standard JSON types the class uses number of JSON values and key \ninterpretations such as:\n \n   - **\"@key_of_refernced_value\"** String values that start from \"@\" character are considered \n     as a reference to other values \n   - **{ \"$class_name\":[ arg1, arg2, ...], \"prop1\": ...}** Key names that starts from \"$\" character \n     are considered as name of class that has to be instantiated as the value\n   - **{\"?isToucable\": { \"label\": true } }** Key names that start from \"?\" are considered as\n     conditional section.   \n\nAlso the class support section inheritance. That means you can say to include part of JSON \nto another part of JSON. For instance, imagine JSON describes properties for number of UI \ncomponents where an UI component can inherits another one. \n\n       {\n          // base component  \n          \"BaseComponent\": {\n              \"background\": \"red\",\n              \"border\": \"plain\",\n              \"size\": [300, 300]\n          },\n\n           // component that inherits properties from BaseComponent,\n           // but override background property with own value\n          \"ExtenderComp\": {\n              \"$inherit\": \"BaseComponent\",\n              \"background\": \"green\"\n          }\n       }\n\n\nThe loading of JSON can be multi steps procedure where you can load few JSON. That means\nyou can compose the final configuration from number of JSON files:\n\n       // prepare object that will keep loaded data\n       var loadedData = {}; \n\n       // create bag\n       var bag = zebra.util.Bag(loadedData);\n\n       // load the bag with two JSON\n       bag.load(\"{ ... }\", false).load(\"{  ...  }\");",
            "is_constructor": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "a root object to be loaded with the given JSON configuration",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "zebra.data.TextModel": {
            "name": "zebra.data.TextModel",
            "shortname": "zebra.data.TextModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2174,
            "description": "Text model interface",
            "is_interface": 1
        },
        "zebra.data.Text": {
            "name": "zebra.data.Text",
            "shortname": "zebra.data.Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2256,
            "description": "Multi-lines text model implementation",
            "params": [
                {
                    "name": "s",
                    "description": "the specified text the model has to be filled",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.data.TextModel"
        },
        "zebra.data.SingleLineTxt": {
            "name": "zebra.data.SingleLineTxt",
            "shortname": "zebra.data.SingleLineTxt",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2362,
            "description": "Single line text model implementation",
            "params": [
                {
                    "name": "s",
                    "description": "the specified text the model has to be filled",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "max",
                    "description": "the specified maximal text length",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.data.TextModel"
        },
        "zebra.data.ListModel": {
            "name": "zebra.data.ListModel",
            "shortname": "zebra.data.ListModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2455,
            "description": "List model class",
            "params": [
                {
                    "name": "a",
                    "description": "an array the list model has to be initialized with\n\n     // create list model that contains three integer elements\n     var l = new zebra.data.ListModel([1,2,3]);",
                    "type": "Array",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebra.data.Item": {
            "name": "zebra.data.Item",
            "shortname": "zebra.data.Item",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2621,
            "description": "Tree model item class. The structure is used by tree model to store tree items values, parent and children item references.",
            "params": [
                {
                    "name": "v",
                    "description": "the item value",
                    "type": "Object",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "zebra.data.TreeModel": {
            "name": "zebra.data.TreeModel",
            "shortname": "zebra.data.TreeModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2662,
            "description": "Tree model class. The class is simple and handy way to keep hierarchical structure.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "r",
                    "description": "a root item. As the argument you can pass \"zebra.data.Item\" or\na JavaType object. In the second case you can describe the tree as follow:\n\n    // create tree model initialized with tree structure passed as \n    // special formated JavaScript object   \n    var tree = new zebra.data.TreeModel({ value:\"Root\",\n                                         kids: [\n                                             \"Root kid 1\",\n                                             { \n                                               value: \"Root kid 2\",\n                                               kids:  [ \"Kid of kid 2\"] \n                                             }\n                                         ] });",
                    "type": "zebra.data.Item|Object",
                    "optional": true
                }
            ]
        },
        "zebra.data.Matrix": {
            "name": "zebra.data.Matrix",
            "shortname": "zebra.data.Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "data",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2815,
            "description": "Matrix model class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "the given data",
                    "type": "Array of Array",
                    "optional": true
                },
                {
                    "name": "rows",
                    "description": "a number of rows",
                    "type": "Interger",
                    "optional": true
                },
                {
                    "name": "cols",
                    "description": "a number of columns",
                    "type": "Interger",
                    "optional": true
                }
            ]
        },
        "zebra.io.ID()": {
            "name": "zebra.io.ID()",
            "shortname": "zebra.io.ID()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": ""
        },
        "zebra.io.b64encode()": {
            "name": "zebra.io.b64encode()",
            "shortname": "zebra.io.b64encode()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": ""
        },
        "zebra.io.b64decode()": {
            "name": "zebra.io.b64decode()",
            "shortname": "zebra.io.b64decode()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": ""
        },
        "zebra.io.QS": {
            "name": "zebra.io.QS",
            "shortname": "zebra.io.QS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3177,
            "description": "Query string parser class. The class provides number of \nuseful static methods to manipulate with a query string \nof an URL",
            "static": 1
        },
        "zebra.io.HTTP": {
            "name": "zebra.io.HTTP",
            "shortname": "zebra.io.HTTP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3315,
            "description": "HTTP request class. This class provides API to generate different (GET, POST, etc) HTTP requests in sync \nand async modes",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "an URL to a HTTP resource",
                    "type": "String"
                }
            ]
        },
        "zebra.io.GET()": {
            "name": "zebra.io.GET()",
            "shortname": "zebra.io.GET()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": ""
        },
        "zebra.io.POST()": {
            "name": "zebra.io.POST()",
            "shortname": "zebra.io.POST()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": ""
        },
        "zebra.io.Service": {
            "name": "zebra.io.Service",
            "shortname": "zebra.io.Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3661,
            "description": "A remote service connector class. It is supposed the class has to be extended with \ndifferent protocols like RPC, JSON etc. The typical pattern of connecting to \na remote service is shown below:\n\n       // create service connector that has two methods \"a()\" and \"b(param1)\"\n       var service = new zebra.io.Service(\"http://myservice.com\", [\n           \"a\", \"b\"\n       ]);\n\n       // call the methods of the remote service\n       service.a();\n       service.b(10);\n\nAlso the methods of a remote service can be called asynchronously. In this case\na callback method has to be passed as the last argument of called remote methods:\n\n       // create service connector that has two methods \"a()\" and \"b(param1)\"\n       var service = new zebra.io.Service(\"http://myservice.com\", [\n           \"a\", \"b\"\n       ]);\n\n       // call \"b\" method from the remote service asynchronously\n       service.b(10, function(res) {\n           // handle a result of the remote method execution here\n           ...\n       });\n\nIdeally any specific remote service extension of \"zebra.io.Service\"\nclass has to implement two methods:\n\n   - **encode** to say how the given remote method with passed parameters have\n   to be transformed into a concrete service side protocol (JSON, XML, etc)\n   - **decode** to say how the specific service response has to be converted into \n   JavaScript object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "an URL of remote service",
                    "type": "String"
                },
                {
                    "name": "methods",
                    "description": "a list of methods names the remote service provides",
                    "type": "Array"
                }
            ]
        },
        "zebra.io.JRPC": {
            "name": "zebra.io.JRPC",
            "shortname": "zebra.io.JRPC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3776,
            "description": "The class is implementation of JSON-RPC remote service connector.\n\n       // create JSON-RPC connector to a remote service that \n       // has three remote methods\n       var service = new zebra.io.JRPC(\"json-rpc.com\", [\n           \"method1\", \"method2\", \"method3\"\n       ]);\n\n       // synchronously call remote method \"method1\" \n       service.method1();\n       \n       // asynchronously call remote method \"method1\" \n       service.method1(function(res) {\n           ...\n       });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "an URL of remote service",
                    "type": "String"
                },
                {
                    "name": "methods",
                    "description": "a list of methods names the remote service provides",
                    "type": "Array"
                }
            ],
            "extends": "{zebra.io.Service}"
        },
        "zebra.io.XRPC": {
            "name": "zebra.io.XRPC",
            "shortname": "zebra.io.XRPC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3822,
            "description": "The class is implementation of XML-RPC remote service connector.\n\n       // create XML-RPC connector to a remote service that \n       // has three remote methods\n       var service = new zebra.io.XRPC(\"xmlrpc.com\", [\n           \"method1\", \"method2\", \"method3\"\n       ]);\n\n       // synchronously call remote method \"method1\" \n       service.method1();\n\n       // asynchronously call remote method \"method1\" \n       service.method1(function(res) {\n           ...\n       });",
            "is_constructor": 1,
            "extends": "{zebra.io.Service}",
            "params": [
                {
                    "name": "url",
                    "description": "an URL of remote service",
                    "type": "String"
                },
                {
                    "name": "methods",
                    "description": "a list of methods names the remote service provides",
                    "type": "Array"
                }
            ]
        },
        "zebra.io.XRPC.invoke()": {
            "name": "zebra.io.XRPC.invoke()",
            "shortname": "zebra.io.XRPC.invoke()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": ""
        },
        "zebra.io.JRPC.invoke()": {
            "name": "zebra.io.JRPC.invoke()",
            "shortname": "zebra.io.JRPC.invoke()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "namespace": ""
        },
        "zebra.layout.Layout": {
            "name": "zebra.layout.Layout",
            "shortname": "zebra.layout.Layout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4018,
            "description": "Layout manager interface",
            "is_interface": 1
        },
        "zebra.layout.getDirectChild()": {
            "name": "zebra.layout.getDirectChild()",
            "shortname": "zebra.layout.getDirectChild()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": ""
        },
        "zebra.layout.getDirectAt()": {
            "name": "zebra.layout.getDirectAt()",
            "shortname": "zebra.layout.getDirectAt()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": ""
        },
        "zebra.layout.getTopParent()": {
            "name": "zebra.layout.getTopParent()",
            "shortname": "zebra.layout.getTopParent()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": ""
        },
        "zebra.layout.getAbsLocation()": {
            "name": "zebra.layout.getAbsLocation()",
            "shortname": "zebra.layout.getAbsLocation()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": ""
        },
        "zebra.layout.Layoutable": {
            "name": "zebra.layout.Layoutable",
            "shortname": "zebra.layout.Layoutable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4169,
            "description": "Layoutable class defines rectangular component that \nhas elementary metrical properties like width, height \nand location and can be a participant of layout management \nprocess. Layoutable component is container that can \ncontains other layoutable component as its children. \nThe children components are ordered by applying a layout \nmanager of its parent component.",
            "is_constructor": 1,
            "extends": "{zebra.layout.Layout}"
        },
        "zebra.layout.StackLayout": {
            "name": "zebra.layout.StackLayout",
            "shortname": "zebra.layout.StackLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4714,
            "description": "Layout manager implementation that places layoutbale components \non top of each other stretching its to fill all available parent \ncomponent space",
            "is_constructor": 1
        },
        "zebra.layout.BorderLayout": {
            "name": "zebra.layout.BorderLayout",
            "shortname": "zebra.layout.BorderLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4749,
            "description": "Layout manager implementation that logically splits component area into five areas: TOP, BOTTOM, LEFT, RIGHT and CENTER.\nTOP and BOTTOM components are stretched to fill all available space horizontally and are sized to have preferred height horizontally. \nLEFT and RIGHT components are stretched to fill all available space vertically and are sized to have preferred width vertically.\nCENTER component is stretched to occupy all available space taking in account TOP, LEFT, RIGHT and BOTTOM components.\n \n     // create panel with border layout\n     var p = new zebra.ui.Panel(new zebra.layout.BorderLayout());\n     \n     // add children UI components with top, center and left constraints \n     p.add(zebra.layout.TOP,    new zebra.ui.Label(\"Top\"));\n     p.add(zebra.layout.CENTER, new zebra.ui.Label(\"Center\"));\n     p.add(zebra.layout.LEFT,   new zebra.ui.Label(\"Left\"));\n \n Construct the layout with the given vertical and horizontal gaps.",
            "params": [
                {
                    "name": "hgap",
                    "description": "horizontal gap. The gap is a horizontal distance between laid out components",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "vgap",
                    "description": "vertical gap. The gap is a vertical distance between laid out components",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.layout.Layout}"
        },
        "zebra.layout.RasterLayout": {
            "name": "zebra.layout.RasterLayout",
            "shortname": "zebra.layout.RasterLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4897,
            "description": "Rester layout manager can be used to use absolute position of \nlayoutable components. That means all components will be laid \nout according coordinates and size they have. Raster layout manager \nprovides extra possibilities to control children components placing. \nIt is possible to align components by specifying layout constraints, \nsize component to its preferred size and so on.",
            "params": [
                {
                    "name": "m",
                    "description": "flag to add extra rule to components layouting. \nFor instance use zebra.layout.USE_PS_SIZE as the flag value to set \ncomponents size to its preferred sizes.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.layout.Layout}"
        },
        "zebra.layout.FlowLayout": {
            "name": "zebra.layout.FlowLayout",
            "shortname": "zebra.layout.FlowLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4978,
            "description": "Flow layout manager group and places components aligned with \ndifferent vertical and horizontal alignments\n \n       // create panel and set flow layout for it\n       // components added to the panel will be placed \n       // horizontally aligned at the center of the panel \n       var p = new zebra.ui.Panel();\n       p.setLayout(new zebra.layout.FlowLayout(zebra.layout.CENTER, zebra.layout.CENTER));\n\n       // add three buttons into the panel with flow layout \n       p.add(new zebra.ui.Button(\"Button 1\"));\n       p.add(new zebra.ui.Button(\"Button 2\"));\n       p.add(new zebra.ui.Button(\"Button 3\"));",
            "params": [
                {
                    "name": "ax",
                    "description": "(zebra.layout.LEFT by default) horizontal alignment:\n \n    zebra.layout.LEFT - left alignment \n    zebra.layout.RIGHT - right alignment \n    zebra.layout.CENTER - center alignment",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "ay",
                    "description": "(zebra.layout.TOP by default) vertical alignment:\n\n    zebra.layout.TOP - top alignment \n    zebra.layout.CENTER - center alignment \n    zebra.layout.BOTTOM - bottom alignment",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "dir",
                    "description": "(zebra.layout.HORIZONTAL by default) a direction \nthe component has to be placed in the layout\n\n    zebra.layout.VERTICAL - vertical placed components\n    zebra.layout.HORIZONTAL - horizontal placed components",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "gap",
                    "description": "a space in pixels between laid out components",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.layout.Layout}"
        },
        "zebra.layout.ListLayout": {
            "name": "zebra.layout.ListLayout",
            "shortname": "zebra.layout.ListLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5094,
            "description": "List layout places components vertically one by one \n \n       // create panel and set list layout for it\n       var p = new zebra.ui.Panel();\n       p.setLayout(new zebra.layout.ListLayout());\n\n       // add three buttons into the panel with list layout \n       p.add(new zebra.ui.Button(\"Item 1\"));\n       p.add(new zebra.ui.Button(\"Item 2\"));\n       p.add(new zebra.ui.Button(\"Item 3\"));",
            "params": [
                {
                    "name": "ax",
                    "description": "horizontal list item alignment:\n \n    zebra.layout.LEFT - left alignment \n    zebra.layout.RIGHT - right alignment \n    zebra.layout.CENTER - center alignment \n    zebra.layout.STRETCH - stretching item to occupy the whole horizontal space",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "gap",
                    "description": "a space in pixels between laid out components",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.layout.Layout}"
        },
        "zebra.layout.PercentLayout": {
            "name": "zebra.layout.PercentLayout",
            "shortname": "zebra.layout.PercentLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5186,
            "description": "Percent layout places components vertically or horizontally and \nsizes its according to its percentage constraints.\n \n       // create panel and set percent layout for it\n       var p = new zebra.ui.Panel();\n       p.setLayout(new zebra.layout.PercentLayout());\n\n       // add three buttons to the panel that are laid out horizontally with\n       // percent layout according to its constraints: 20, 30 and 50 percents\n       p.add(20, new zebra.ui.Button(\"20%\"));\n       p.add(30, new zebra.ui.Button(\"30%\"));\n       p.add(50, new zebra.ui.Button(\"50%\"));",
            "params": [
                {
                    "name": "dir",
                    "description": "a direction of placing components. The \nvalue can be \"zebra.layout.HORIZONTAL\" or \"zebra.layout.VERTICAL\"",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "gap",
                    "description": "a space in pixels between laid out components",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "stretch",
                    "description": "true if the component should be stretched \nvertically or horizontally",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.layout.Layout}"
        },
        "zebra.layout.Constraints": {
            "name": "zebra.layout.Constraints",
            "shortname": "zebra.layout.Constraints",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5304,
            "description": "Grid layout manager constraints. Constraints says how a  component has to be placed in \ngrid layout virtual cell. The constraints specifies vertical and horizontal alignments, \na virtual cell paddings, etc.",
            "params": [
                {
                    "name": "ax",
                    "description": "a horizontal alignment",
                    "type": "Integer"
                },
                {
                    "name": "ay",
                    "description": "a vertical alignment",
                    "type": "Integer"
                }
            ],
            "is_constructor": 1
        },
        "zebra.layout.GridLayout": {
            "name": "zebra.layout.GridLayout",
            "shortname": "zebra.layout.GridLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layout",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5394,
            "description": "Grid layout manager. can be used to split a component area to \nnumber of virtual cells where children components can be placed. \nThe way how the children components have to be laid out in the cells can \nbe customized by using \"zebra.layout.Constraints\" class:\n\n       // create constraints\n       var ctr = new zebra.layout.Constraints();\n       \n       // specify cell top, left, right, bottom paddings \n       ctr.setPadding(8);\n       // say the component has to be left aligned in a \n       // virtual cell of grid layout \n       ctr.ax = zebra.layout.LEFT;\n\n       // create panel and set grid layout manager with two \n       // virtual rows and columns\n       var p = new zebra.ui.Panel();\n       p.setLayout(new zebra.layout.GridLayout(2,2));\n\n       // add children component\n       p.add(ctr, new zebra.ui.Label(\"Cell 1,1\"));\n       p.add(ctr, new zebra.ui.Label(\"Cell 1,2\"));\n       p.add(ctr, new zebra.ui.Label(\"Cell 2,1\"));\n       p.add(ctr, new zebra.ui.Label(\"Cell 2,2\"));",
            "params": [
                {
                    "name": "rows",
                    "description": "a number of virtual rows to layout \nchildren components",
                    "type": "Integer"
                },
                {
                    "name": "cols",
                    "description": "a number of virtual columns to \nlayout children components",
                    "type": "Integer"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.layout.Layout}"
        },
        "zebra.ui.View": {
            "name": "zebra.ui.View",
            "shortname": "zebra.ui.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5667,
            "description": "View class that is designed as a basis for various reusable decorative \nUI elements implementations"
        },
        "zebra.ui.Render": {
            "name": "zebra.ui.Render",
            "shortname": "zebra.ui.Render",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5730,
            "description": "Render class extends \"zebra.ui.View\" class with a notion \nof target object. Render stores reference  to a target that \nthe render knows how to visualize. Basically Render is an \nobject visualizer. For instance, developer can implement \ntext, image and so other objects visualizers.",
            "params": [
                {
                    "name": "target",
                    "description": "a target object to be visualized \nwith the render",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Raised": {
            "name": "zebra.ui.Raised",
            "shortname": "zebra.ui.Raised",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5774,
            "description": "Raised border view",
            "params": [
                {
                    "name": "brightest",
                    "description": "a brightest border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "middle",
                    "description": "a middle border line color",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Sunken": {
            "name": "zebra.ui.Sunken",
            "shortname": "zebra.ui.Sunken",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5819,
            "description": "Sunken border view",
            "is_constructor": 1,
            "params": [
                {
                    "name": "brightest",
                    "description": "a brightest border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "moddle",
                    "description": "a middle border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "darkest",
                    "description": "a darkest border line color",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Etched": {
            "name": "zebra.ui.Etched",
            "shortname": "zebra.ui.Etched",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5877,
            "description": "Etched border view",
            "is_constructor": 1,
            "params": [
                {
                    "name": "brightest",
                    "description": "a brightest border line color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "moddle",
                    "description": "a middle border line color",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Dotted": {
            "name": "zebra.ui.Dotted",
            "shortname": "zebra.ui.Dotted",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5927,
            "description": "Dotted border view",
            "params": [
                {
                    "name": "c",
                    "description": "the dotted border color",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Border": {
            "name": "zebra.ui.Border",
            "shortname": "zebra.ui.Border",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5954,
            "description": "Border view. Can be used to render CSS-like border.",
            "params": [
                {
                    "name": "c",
                    "description": "border color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "border width",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "r",
                    "description": "border corners radius",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.RoundBorder": {
            "name": "zebra.ui.RoundBorder",
            "shortname": "zebra.ui.RoundBorder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6043,
            "description": "Round border view.",
            "params": [
                {
                    "name": "col",
                    "description": "border color. Use null as the \nborder color value to prevent painting of the border",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "border width",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Gradient": {
            "name": "zebra.ui.Gradient",
            "shortname": "zebra.ui.Gradient",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6101,
            "description": "Vertical or horizontal linear gradient view",
            "params": [
                {
                    "name": "startColor",
                    "description": "start color",
                    "type": "String"
                },
                {
                    "name": "endColor",
                    "description": "end color",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type of gradient \n\"zebra.layout.VERTICAL\" or \"zebra.layout.HORIZONTAL\"",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Radial": {
            "name": "zebra.ui.Radial",
            "shortname": "zebra.ui.Radial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6156,
            "description": "Radial gradient view",
            "params": [
                {
                    "name": "startColor",
                    "description": "a start color",
                    "type": "String"
                },
                {
                    "name": "stopColor",
                    "description": "a stop color",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.Picture": {
            "name": "zebra.ui.Picture",
            "shortname": "zebra.ui.Picture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6182,
            "description": "Image render. Render an image target object or specified area of \nthe given target image object.",
            "params": [
                {
                    "name": "img",
                    "description": "the image to be rendered",
                    "type": "Image"
                },
                {
                    "name": "x",
                    "description": "a x coordinate of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "a y coordinate of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "a width of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "a height of the rendered image part",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "ub",
                    "description": "a boolean flag to say if the rendered \nimage has to be double buffered",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.Render"
        },
        "zebra.ui.Pattern": {
            "name": "zebra.ui.Pattern",
            "shortname": "zebra.ui.Pattern",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6296,
            "description": "Pattern render.",
            "params": [
                {
                    "name": "img",
                    "description": "an image to be used as the pattern",
                    "type": "Image",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.Render"
        },
        "zebra.ui.CompositeView": {
            "name": "zebra.ui.CompositeView",
            "shortname": "zebra.ui.CompositeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6316,
            "description": "Composite view. The view allows developers to combine number of \nviews and renders its together.",
            "params": [
                {
                    "name": "views",
                    "description": "array of dictionary of views \nto be composed together",
                    "type": "Arrayt|Object",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.View"
        },
        "zebra.ui.ViewSet": {
            "name": "zebra.ui.ViewSet",
            "shortname": "zebra.ui.ViewSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6402,
            "description": "ViewSet view. The view set is a special view container that includes \nnumber of views accessible by a key and allows only one view be active \nin a particular time. Active is view that has to be rendered. The view \nset can be used to store number of decorative elements where only one \ncan be rendered depending from an UI component state.",
            "params": [
                {
                    "name": "args",
                    "description": "object that represents views instances that have \nto be included in the ViewSet",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.CompositeView"
        },
        "zebra.ui.Font": {
            "name": "zebra.ui.Font",
            "shortname": "zebra.ui.Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6584,
            "description": "This class represents a font and provides basic font metrics like \nheight, ascent. Using the class developers can compute string width.\n     \n     // plain font \n     var f = new zebra.ui.Font(\"Arial\", 14);\n\n     // bold font\n     var f = new zebra.ui.Font(\"Arial\", \"bold\", 14);\n\n     // defining font with CSS font name\n     var f = new zebra.ui.Font(\"100px Futura, Helvetica, sans-serif\");",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "a name of the font. If size and style parameters \nhas not been passed the name is considered as CSS font name that \nincludes size and style",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "a style of the font: \"bold\", \"italic\", etc",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "size",
                    "description": "a size of the font",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        "zebra.ui.MouseListener": {
            "name": "zebra.ui.MouseListener",
            "shortname": "zebra.ui.MouseListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6703,
            "description": "Mouse and touch screen listener interface to express intention to \nhandle mouse or touch screen events",
            "is_interface": 1
        },
        "zebra.ui.FocusListener": {
            "name": "zebra.ui.FocusListener",
            "shortname": "zebra.ui.FocusListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6782,
            "description": "Focus listener interface to express intention to handle focus events",
            "is_interface": 1
        },
        "zebra.ui.KeyListener": {
            "name": "zebra.ui.KeyListener",
            "shortname": "zebra.ui.KeyListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6803,
            "description": "Key listener interface to express intention to handle key events",
            "is_interface": 1
        },
        "zebra.ui.Cursorable": {
            "name": "zebra.ui.Cursorable",
            "shortname": "zebra.ui.Cursorable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6838,
            "description": "Interface to express intention to control mouse cursor type"
        },
        "zebra.ui.Composite": {
            "name": "zebra.ui.Composite",
            "shortname": "zebra.ui.Composite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6856,
            "description": "Interface to express intention to control children UI components event handling by \nmaking them events transparent",
            "is_interface": 1
        },
        "zebra.ui.ChildrenListener": {
            "name": "zebra.ui.ChildrenListener",
            "shortname": "zebra.ui.ChildrenListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6874,
            "description": "Interface to express intention to handle children UI components events",
            "is_interface": 1
        },
        "zebra.ui.CopyCutPaste": {
            "name": "zebra.ui.CopyCutPaste",
            "shortname": "zebra.ui.CopyCutPaste",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6889,
            "description": "Interface to express intention to participate in native clipboard copy-paste actions. \nA component that implements it and has focus can get / send data into / from clipboard",
            "is_interface": 1
        },
        "zebra.ui.ComponentListener": {
            "name": "zebra.ui.ComponentListener",
            "shortname": "zebra.ui.ComponentListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6912,
            "description": "Interface to express intention to catch component events",
            "is_interface": 1
        },
        "zebra.ui.InputEvent": {
            "name": "zebra.ui.InputEvent",
            "shortname": "zebra.ui.InputEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6976,
            "description": "Input event class. Input event is everything what is bound to user \ninputing like keyboard, mouse, touch screen etc. This class often is \nused as basis for more specialized input event classes.",
            "params": [
                {
                    "name": "target",
                    "description": "a source of the input event",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "id",
                    "description": "an unique ID of the input event, for \ninstance zebra.ui.KeyEvent.PRESSED",
                    "type": "Integer"
                },
                {
                    "name": "uid",
                    "description": "an unique class id of the input event, \nfor instance zebra.ui.InputEvent.MOUSE_UID",
                    "type": "Integer"
                }
            ],
            "is_constructor": 1
        },
        "zebra.ui.KeyEvent": {
            "name": "zebra.ui.KeyEvent",
            "shortname": "zebra.ui.KeyEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7025,
            "description": "Input key event class. The input event is triggered by a \nkeyboard and has UID property set to zebra.ui.InputEvent.KEY_UID \nvalue",
            "params": [
                {
                    "name": "target",
                    "description": "a source of the key input event",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "id",
                    "description": "an unique ID of the key input event: zebra.ui.KeyEvent.PRESSED, \nzebra.ui.KeyEvent.TYPED, zebra.ui.KeyEvent.RELEASED",
                    "type": "Integer"
                },
                {
                    "name": "code",
                    "description": "a code of pressed key",
                    "type": "Integer"
                },
                {
                    "name": "ch",
                    "description": "a character of typed key",
                    "type": "String"
                },
                {
                    "name": "mask",
                    "description": "a bits mask of pressed meta keys:  zebra.ui.KeyEvent.M_CTRL, \nzebra.ui.KeyEvent.M_SHIFT, zebra.ui.KeyEvent.M_ALT, zebra.ui.KeyEvent.M_CMD",
                    "type": "Integer"
                }
            ],
            "extends": "zebra.ui.InputEvent",
            "is_constructor": 1
        },
        "zebra.ui.MouseEvent": {
            "name": "zebra.ui.MouseEvent",
            "shortname": "zebra.ui.MouseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7125,
            "description": "Mouse and touch screen input event class. The input event is \ntriggered by a mouse or touch screen. It has UID property set \nto zebra.ui.InputEvent.MOUSE_UID value",
            "params": [
                {
                    "name": "target",
                    "description": "a source of the mouse input event",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "id",
                    "description": "an unique ID of the mouse input event: \n\n       zebra.ui.MouseEvent.CLICKED    \n       zebra.ui.MouseEvent.PRESSED    \n       zebra.ui.MouseEvent.RELEASED   \n       zebra.ui.MouseEvent.ENTERED    \n       zebra.ui.MouseEvent.EXITED     \n       zebra.ui.MouseEvent.DRAGGED    \n       zebra.ui.MouseEvent.DRAGSTARTED\n       zebra.ui.MouseEvent.DRAGENDED  \n       zebra.ui.MouseEvent.MOVED",
                    "type": "Integer"
                },
                {
                    "name": "ax",
                    "description": "an absolute (relatively to a canvas where the source \nUI component is hosted) mouse pointer x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "ax",
                    "description": "an absolute (relatively to a canvas where the source \nUI component is hosted) mouse pointer y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "mask",
                    "description": "a bits mask of pressed mouse buttons:\n\n        zebra.ui.MouseEvent.LEFT_BUTTON\n        zebra.ui.MouseEvent.RIGHT_BUTTON",
                    "type": "Integer"
                },
                {
                    "name": "clicks",
                    "description": "number of mouse button clicks",
                    "type": "Integer"
                }
            ],
            "extends": "zebra.ui.InputEvent",
            "is_constructor": 1
        },
        "zebra.ui.findCanvas()": {
            "name": "zebra.ui.findCanvas()",
            "shortname": "zebra.ui.findCanvas()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": ""
        },
        "zebra.ui.loadImage()": {
            "name": "zebra.ui.loadImage()",
            "shortname": "zebra.ui.loadImage()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": ""
        },
        "zebra.ui.Panel": {
            "name": "zebra.ui.Panel",
            "shortname": "zebra.ui.Panel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7547,
            "description": "This the core UI component class. All other UI components \nhas to be successor of the UI class. \n\n      // instantiate panel with no arguments\n      var p = new zebra.ui.Panel();\n\n      // instantiate panel with border layout set as its layout manager\n      var p = new zebra.ui.Panel(new zebra.layout.BorderLayout());\n\n      // instantiate panel with the given properties (border \n      // layout manager, blue background and plain border)\n      var p = new zebra.ui.Panel({\n         layout: new zebra.ui.BorderLayout(),\n         background : \"blue\",\n         border     : \"plain\"\n      });",
            "params": [
                {
                    "name": "l",
                    "description": "pass a layout manager or \nnumber of properties that have to be applied to the instance of \nthe panel class.",
                    "type": "Object|zebra.layout.Layout",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.layout.Layoutable"
        },
        "zebra.ui.BaseLayer": {
            "name": "zebra.ui.BaseLayer",
            "shortname": "zebra.ui.BaseLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8067,
            "description": "Base layer UI component. Layer is special type of UI \ncomponents that is used to decouple different logical  \nUI components types from each other. Zebra Canvas \nconsists from number of layers where only one can be \nactive at the given point in time. Layers are stretched \nto fill full canvas size. Every time an input event \nhappens system detects an active layer by asking all \nlayers from top to bottom. First layer that wants to \ncatch input gets control. The typical layers examples \nare window layer, popup menus layer and so on.",
            "params": [
                {
                    "name": "id",
                    "description": "an unique id to identify the layer",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.RootLayer": {
            "name": "zebra.ui.RootLayer",
            "shortname": "zebra.ui.RootLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8120,
            "description": "Root layer implementation. This is the simplest UI layer implementation \nwhere the layer always try grabbing all input event",
            "is_constructor": 1,
            "extends": "{zebra.ui.BaseLayer}"
        },
        "zebra.ui.ViewPan": {
            "name": "zebra.ui.ViewPan",
            "shortname": "zebra.ui.ViewPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8135,
            "description": "UI component to keep and render the given \"zebra.ui.View\" class \ninstance. The target view defines the component preferred size\nand the component view.",
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.ImagePan": {
            "name": "zebra.ui.ImagePan",
            "shortname": "zebra.ui.ImagePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8192,
            "description": "Image panel UI component class. The component renders an image.",
            "params": [
                {
                    "name": "img",
                    "description": "a path or direct reference to an image object. \nIf the passed parameter is string it considered as path to an image. \nIn this case the image will be loaded using the passed path.",
                    "type": "String|Image",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.ViewPan"
        },
        "zebra.ui.Manager": {
            "name": "zebra.ui.Manager",
            "shortname": "zebra.ui.Manager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8226,
            "description": "UI manager class. The class is widely used as base for building \nvarious UI managers like paint, focus, event etc. Manager is \nautomatically registered as UI events listener for all implement \nby the manager UI event listeners",
            "is_constructor": 1
        },
        "zebra.ui.PaintManager": {
            "name": "zebra.ui.PaintManager",
            "shortname": "zebra.ui.PaintManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8247,
            "description": "Paint UI manager abstract class. The class has to be used as \nbasis to introduce an own paint manager implementations. The \nsimplest implementation has to extend \"zebra.ui.PaintManager\" \nwith \"paintComponent(g,c)\" method. The method defines how the \ngiven component \"c\" has to be rendered using 2D context \"g\".",
            "extends": "{zebra.ui.Manager}"
        },
        "zebra.ui.PaintManImpl": {
            "name": "zebra.ui.PaintManImpl",
            "shortname": "zebra.ui.PaintManImpl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8384,
            "description": "Zebra UI component paint manager implementation class. Zebra \nimplementation expects an UI component can implements:\n\n   - \"paint(g)\" method to paint its face   \n   - \"update(g)\" method to fill its background\n   - \"paintOnTop(g)\" method to paint some decorative elements after the \n   component background and face are rendered\n\nAlso the implementation expects an UI component can specify \nbackground and border view. Border view can change the c\ncomponent shape by defining \"ouline(...)\"\" method",
            "is_constructor": 1,
            "extends": "zebra.ui.PaintManager"
        },
        "zebra.ui.FocusManager": {
            "name": "zebra.ui.FocusManager",
            "shortname": "zebra.ui.FocusManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8482,
            "description": "Focus manager class defines the strategy of focus traversing among \nhierarchy of UI components. It keeps current focus owner component \nand provides API to change current focus component",
            "extends": "{zebra.ui.Manager}"
        },
        "zebra.ui.CommandManager": {
            "name": "zebra.ui.CommandManager",
            "shortname": "zebra.ui.CommandManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8620,
            "description": "Command manager supports short cut keys definition and listening. The shortcuts have to be defined in \njson configuration files:\n \n  - **commands.osx.json** for Mac OS X platform\n  - **commands.json** for all other platforms \n\nThe JSON configuration has simple structure:\n \n    [\n       {\n          \"command\"   : \"undo_command\",\n          \"args\"      : [ true, \"test\"]\n          \"key\"       : \"Ctrl+z\"\n       },\n       {\n          \"command\" : \"redo_command\",\n          \"key\"     : \"Ctrl+Shift+z\"\n       },\n       ...\n    ]\n\nThe configuration contains list of shortcuts. Every shortcut is bound to a key combination it is triggered. \nEvery shortcut has a name and an optional list of arguments that have to passed to a shortcut listener method.\nThe optional arguments can be used to differentiate two shortcuts that are bound to the same command.",
            "is_constructor": 1,
            "extends": "{zebra.ui.Manager}"
        },
        "zebra.ui.CursorManager": {
            "name": "zebra.ui.CursorManager",
            "shortname": "zebra.ui.CursorManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8733,
            "description": "Cursor manager class. Allows developers to control mouse cursor type by implementing an own \n\"zebra.ui.Cursorable\" interface. Imagine an UI component needs to change cursor type. It \n can be done by one of the following way:\n       \n   - **Implement cursorable interface by the component itself** \n\n         // instantiate panel class that implements cusorable interface\n         var p = new zebra.ui.Panel(zebra.ui.Cursorable, [\n              // implement cursorable interface method to set required \n              // mouse cursor type \n              function getCursorType(target, x, y) {\n                  return zebra.ui.Cursor.WAIT;\n              }\n         ]);\n\n   - **Implement cursorable interface and register it in cursor manager** \n\n         var myPanel = new zebra.ui.Panel();\n         ...\n         // set cursorable for the given UI component \n         zebra.ui.cursorManager.setCursorable(myPanel, new zebra.ui.Cursorable([\n              // implement cursorable interface method to set required \n              // mouse cursor type \n              function getCursorType(target, x, y) {\n                  return zebra.ui.Cursor.WAIT;\n              }\n         ]));\n\n   - **Simply setting cursor type for the given component by cursor manager** \n\n         var myPanel = new zebra.ui.Panel();\n         ...\n         // set cursorable for the given UI component \n         zebra.ui.cursorManager.setCursorable(myPanel, zebra.ui.Cursor.WAIT);",
            "is_constructor": 1,
            "extends": "{zebra.ui.Manager}"
        },
        "zebra.ui.EventManager": {
            "name": "zebra.ui.EventManager",
            "shortname": "zebra.ui.EventManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8849,
            "description": "Event manager class. One of the key zebra manager that is responsible for\ndistributing various events in zebra UI. The manager provides number of \nmethods to register global events listeners.",
            "is_constructor": 1,
            "extends": "{zebra.ui.Manager}"
        },
        "zebra.ui.zCanvas": {
            "name": "zebra.ui.zCanvas",
            "shortname": "zebra.ui.zCanvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9229,
            "description": "Canvas zebra UI component class. This is one of the key \nclass everybody has to use to build an UI. The class is a wrapper  \nfor HTML Canvas element. Internally it catches all native HTML Canvas \nevents and translates its into Zebra UI events. \n\nzCanvas instantiation triggers a new HTML Canvas will be created \nand added to HTML DOM tree.  It happens if developer doesn't pass\na Canvas element id or pass an id that doesn't reference to an \nexistent HTML canvas element. If developers need to re-use an \nexistent in DOM tree canvas element they have to pass id of \nthe canvas that has to be used as basis for zebra UI creation.\n \n      // a new HTML canvas element is created into HTML DOM tree\n      var canvas = zebra.ui.zCanvas();\n\n      // a new HTML canvas element is created into HTML DOM tree\n      var canvas = zebra.ui.zCanvas(400,500);  // pass canvas size \n\n      // stick to existent HTML canvas element \n      var canvas = zebra.ui.zCanvas(\"ExistentCanvasID\");  \n\nThe zCanvas has layered structure. Every layer is responsible for \nshowing and controlling a dedicated type of UI elements like windows\npop-up menus, tool tips and so on. Developers have to build an own UI \nhierarchy on the canvas root layer. The layer is standard UI panel \nthat is accessible as zCanvas component instance \"root\" field. \n      \n      // create canvas\n      var canvas = zebra.ui.zCanvas(400,500); \n      \n      // save reference to canvas root layer where \n      // hierarchy of UI components have to be hosted \n      var root = canvas.root;\n\n      // fill root with UI components\n      var label = new zebra.ui.Label(\"Label\");\n      label.setBounds(10,10,100,50);\n      root.add(label);",
            "extends": "{zebra.ui.Panel}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvasID",
                    "description": "an ID of a HTML canvas element. If \nHTML DOM tree already has a HTML Canvas element with the given id\nthe existent element will be used. Otherwise a new HTML canvas\nelement will be inserted into HTML DOM tree.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "a width of an HTML canvas element",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "a height of an HTML canvas element",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        "zebra.ui.MouseWheelSupport": {
            "name": "zebra.ui.MouseWheelSupport",
            "shortname": "zebra.ui.MouseWheelSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10291,
            "description": "Mouse wheel support class. Installs necessary mouse wheel\nlisteners and handles mouse wheel events in zebra UI. The \nmouse wheel support is plugging that is configured by a \nJSON configuration.",
            "is_constructor": 1
        },
        "zebra.ui.CompRender": {
            "name": "zebra.ui.CompRender",
            "shortname": "zebra.ui.CompRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10359,
            "description": "UI component render class. Renders the given target UI component\non the given surface using the specified 2D context",
            "params": [
                {
                    "name": "target",
                    "description": "an UI component to be rendered",
                    "type": "zebra.ui.Panel",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.Render"
        },
        "zebra.ui.Line": {
            "name": "zebra.ui.Line",
            "shortname": "zebra.ui.Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10397,
            "description": "Line UI component class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "orient",
                    "description": "an orientation of the line. One of\nthe following value can be used:\n\n       zebra.layout.VERTICAL\n       zebra.layout.HORIZONTAL",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.TextRender": {
            "name": "zebra.ui.TextRender",
            "shortname": "zebra.ui.TextRender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10466,
            "description": "Text render that expects and draws a text model or a string as its target",
            "is_constructor": 1,
            "extends": "zebra.ui.Render",
            "params": [
                {
                    "name": "text",
                    "description": "a text as string or text model object",
                    "type": "String|zebra.data.TextModel"
                }
            ]
        },
        "zebra.ui.PasswordText": {
            "name": "zebra.ui.PasswordText",
            "shortname": "zebra.ui.PasswordText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10829,
            "description": "Password text render class. This class renders a secret text with hiding it with the given character.",
            "params": [
                {
                    "name": "text",
                    "description": "a text as string or text model instance",
                    "type": "String|zebra.data.TextModel",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.TextRender"
        },
        "zebra.ui.Label": {
            "name": "zebra.ui.Label",
            "shortname": "zebra.ui.Label",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11101,
            "description": "Label UI component class. The label can be used to visualize simple string or multi lines text or \nthe given text render implementation:\n\n       // render simple string\n       var l = new zebra.ui.Label(\"Simple string\");\n\n       // render multi lines text\n       var l = new zebra.ui.Label(new zebra.data.Text(\"Multiline\\ntext\"));\n\n       // render password text \n       var l = new zebra.ui.Label(new zebra.ui.PasswordText(\"password\"));",
            "params": [
                {
                    "name": "r",
                    "description": "a text to be shown with the label. \nYou can pass a simple string or an instance of a text model or an instance of text render as the \ntext value.",
                    "type": "String|zebra.data.TextModel|zebra.ui.TextRender",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.ViewPan"
        },
        "zebra.ui.MLabel": {
            "name": "zebra.ui.MLabel",
            "shortname": "zebra.ui.MLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11209,
            "description": "Shortcut class to render multi lines text without necessity to create multi line model",
            "params": [
                {
                    "name": "t",
                    "description": "a text string",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.Label"
        },
        "zebra.ui.BoldLabel": {
            "name": "zebra.ui.BoldLabel",
            "shortname": "zebra.ui.BoldLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11223,
            "description": "Shortcut class to render bold text in Label",
            "params": [
                {
                    "name": "t",
                    "description": "a text string, text model or text render instance",
                    "type": "String|zebra.ui.TextRender|zebra.ui.TextModel",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "zebra.ui.Label"
        },
        "zebra.ui.ImageLabel": {
            "name": "zebra.ui.ImageLabel",
            "shortname": "zebra.ui.ImageLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11232,
            "description": "Image label UI component. This is UI container that consists from an image component and an label component.\nImage is located at the left size of text.",
            "params": [
                {
                    "name": "img",
                    "description": "an image or path to the image",
                    "type": "Image|String"
                },
                {
                    "name": "txt",
                    "description": "a text string, text model or text render instance",
                    "type": "String|zebra.ui.TextRender|zebra.ui.TextModel"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.StatePan": {
            "name": "zebra.ui.StatePan",
            "shortname": "zebra.ui.StatePan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11251,
            "description": "State panel class. The class implements UI component whose face, border and background view depends on its state. \nThe component is good basis for creation dynamic view UI components.\nThe state the component can be is:\n      \n   - **zebra.ui.StatePan.OVER** the mouse cursor is inside the component \n   - **zebra.ui.StatePan.OUT** the mouse cursor is outside the component\n   - **zebra.ui.StatePan.PRESSED_OVER** the mouse cursor is inside the component and an action mouse button or key is pressed\n   - **zebra.ui.StatePan.PRESSED_OUT** the mouse cursor is outside the component and an action mouse button or key is pressed\n   - **zebra.ui.StatePan.DISABLED** the component is disabled\n\nThe view border, background or face should be set as \"zebra.ui.ViewSet\" where an required \nfor the given component state view is identified by an id. By default corresponding to component states views IDs are the following:\n\"over\", \"pressed.over\", \"out\", \"pressed.out\", \"disabled\".  Imagine for example we have two colors and we need to change between \nthe colors every time mouse cursor is over/out of the component:\n \n    // create state panel\n    var statePan = new zebra.ui.StatePan();\n\n    // add dynamically updated background\n    statePan.setBackground(new zebra.ui.ViewSet({\n       \"over\": \"red\",\n       \"out\": \"blue\"\n    }));\n\nAlone with background border view can be done also dynamic\n\n    // add dynamically updated border\n    statePan.setBorder(new zebra.ui.ViewSet({\n       \"over\": new zebra.ui.Border(\"green\", 4, 8),\n       \"out\": null\n    }));\n\nAdditionally the UI component allows developer to specify whether the component can hold input focus and which UI component \nhas to be considered as the focus marker. The focus marker component is used as anchor to paint focus marker view. In simple\ncase the view can be just a border. So border will be rendered around the focus marker component:\n\n    // create state panel that contains one label component\n    var statePan = new zebra.ui.StatePan();\n    var lab      = new zebra.ui.Label(\"Focus marker label\");\n    lab.setPadding(6);\n    statePan.setPadding(6);\n    statePan.setLayout(new zebra.layout.BorderLayout());\n    statePan.add(zebra.layout.CENTER, lab);\n\n    // set label as an anchor for focus border indicator \n    statePan.setFocusAnchorComponent(lab);\n    statePan.setFocusMarkerView(\"plain\");\n\nOne more advanced feature of the component is a possibility of listening by children components when the state of the \ncomponent has been updated. A children component can be notified with its parent state updating by implementing \n\"parentStateUpdated(o,n,id)\" method. It gets old state, new state and a view id that is mapped to the new state.  \nThe feature is useful if we are developing a composite components whose children component also should \nreact to a state changing.",
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Button": {
            "name": "zebra.ui.Button",
            "shortname": "zebra.ui.Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11531,
            "description": "Button UI component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "t",
                    "description": "a button label. \nThe label can be a simple text or an UI component.",
                    "type": "String|zebra.ui.Panel",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.StatePan"
        },
        "zebra.ui.BorderPan": {
            "name": "zebra.ui.BorderPan",
            "shortname": "zebra.ui.BorderPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11630,
            "description": "Border panel UI component. The component render titled \nborder around the given children content UI component.\nBorder title can be placed on top or bottom border line \nand aligned horizontally (left, center, right). Any \nzebra UI component can be used as a border title element.",
            "params": [
                {
                    "name": "title",
                    "description": "a border panel \ntitle. Can be a string or any other UI component can be \nused as the border panel title",
                    "type": "zebra.ui.Panel|String",
                    "optional": true
                },
                {
                    "name": "content",
                    "description": "a content UI component \nof the border panel",
                    "type": "zebra.ui.Panel",
                    "optional": true
                },
                {
                    "name": "constraints",
                    "description": "a title constraints. \nThe constraints gives a possibility to place border \npanel title in different places. Generally the title can \nbe placed on the top or bottom part of the border panel.\nAlso the title can be aligned horizontally. \n      \n       // create border panel with a title located at the \n       // top and aligned at the canter   \n       var bp = new zebra.ui.BorderPan(\"Title\", \n                                       new zebra.ui.Panel(),\n                                       zebra.layout.TOP | zebra.layout.CENTER);",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.SwitchManager": {
            "name": "zebra.ui.SwitchManager",
            "shortname": "zebra.ui.SwitchManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11771,
            "description": "The standard UI checkbox component switch manager implementation. The manager holds\nboolean state of a checkbox UI component. There are few ways how a checkbox can \nswitch its state: standard checkbox or radio group. In general we have a deal with \none switchable UI component that can work in different modes. Thus we can re-use \none UI, but customize it with appropriate switch manager. That is the main idea of \nhaving the class.",
            "is_constructor": 1
        },
        "zebra.ui.Group": {
            "name": "zebra.ui.Group",
            "shortname": "zebra.ui.Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11853,
            "description": "Radio group switch manager implementation. This is an extension of \"zebra.ui.SwicthManager\" to \nsupport radio group switching behavior. You can use it event with normal checkbox:\n\n      // create group of check boxes that will work as a radio group\n      var gr = new zebra.ui.Group();\n      var ch1 = new zebra.ui.Checkbox(\"Test 1\", gr);\n      var ch2 = new zebra.ui.Checkbox(\"Test 2\", gr);\n      var ch3 = new zebra.ui.Checkbox(\"Test 3\", gr);",
            "is_constructor": 1,
            "extends": "zebra.ui.SwitchManager"
        },
        "zebra.ui.Checkbox": {
            "name": "zebra.ui.Checkbox",
            "shortname": "zebra.ui.Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11896,
            "description": "Check-box UI component. The component is a container that \nconsists from two other UI components: \n   \n   - Box component to keep checker indicator\n   - Label component to paint label \n\nDevelopers are free to customize the component as they want. \nThere is no limitation regarding how the box and label components \nhave to be laid out, which UI components have to be used as \nthe box or label components, etc. The check box extends state \npanel component and re-map states  to own views IDs:\n   \n   - \"on.out\" - checked and mouse cursor is out \n   - \"off.out\" - un-checked and mouse cursor is out \n   - \"don\" - disabled and checked, \n   - \"doff\" - disabled and un-checked , \n   - \"on.over\" - checked and mouse cursor is over \n   - \"off.over\" - un-checked and mouse cursor is out\n\n\nCustomize is quite similar to what explained for zebra.ui.StatePan:\n\n\n       // create checkbox component \n       var ch = new zebra.ui.Checkbox(\"Checkbox\");\n\n       // change border when the component checked to green\n       // otherwise set it to red\n       ch.setBorder(new zebra.ui.ViewSet({\n           \"off.*\": new zebra.ui.Border(\"red\"),\n           \"on.*\": new zebra.ui.Border(\"green\")\n       }));\n\n       // customize checker box children UI component to show\n       // green for checked and red for un-cheked states \n       ch.kids[0].setView(new zebra.ui.ViewSet({\n           \"off.*\": \"red\",\n           \"on.*\": \"green\"\n       }));\n       // sync current state with new look and feel\n       ch.sync();\n \nListening checked event should be done by registering a \nlistener in the check box switch manager as follow:\n\n       // create checkbox component \n       var ch = new zebra.ui.Checkbox(\"Checkbox\");\n\n       // register a checkbox listener\n       ch.manager._.add(function(sm) {\n           var s = sm.getState();\n           ...\n       });",
            "extends": "zebra.ui.StatePan",
            "is_constructor": 1,
            "params": [
                {
                    "name": "label",
                    "description": "a label",
                    "type": "String|zebra.ui.Panel",
                    "optional": true
                },
                {
                    "name": "m",
                    "description": "a switch manager",
                    "type": "zebra.ui.SwitchManager",
                    "optional": true
                }
            ]
        },
        "zebra.ui.Checkbox.Box": {
            "name": "zebra.ui.Checkbox.Box",
            "shortname": "zebra.ui.Checkbox.Box",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11961,
            "description": "The box UI component class that is used by default with \nthe check box component.",
            "is_constructor": 1,
            "extends": "zebra.ui.ViewPan"
        },
        "zebra.ui.Radiobox": {
            "name": "zebra.ui.Radiobox",
            "shortname": "zebra.ui.Radiobox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12101,
            "description": "Radio-box UI component class. This class is extension of \"zebra.ui.Checkbox\" class that sets group \nas a default switch manager. The other functionality id identical to checkbox component. Generally \nspeaking this class is a shortcut for radio box creation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "label",
                    "description": "a label",
                    "type": "String|zebra.ui.Panel",
                    "optional": true
                },
                {
                    "name": "m",
                    "description": "a switch manager",
                    "type": "zebra.ui.Group",
                    "optional": true
                }
            ]
        },
        "zebra.ui.SplitPan": {
            "name": "zebra.ui.SplitPan",
            "shortname": "zebra.ui.SplitPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12125,
            "description": "Splitter panel UI component class. The component splits its area horizontally or vertically into two areas. \nEvery area hosts an UI component. A size of the parts can be controlled by mouse cursor dragging. Gripper \nelement is children UI component that can be customized. For instance:\n\n     // create split panel\n     var sp = new zebra.ui.SplitPan(new zebra.ui.Label(\"Left panel\"), \n                                   new zebra.ui.Label(\"Right panel\")); \n     \n     // customize gripper background color depending on its state\n     sp.gripper.setBackground(new zebra.ui.ViewSet({\n          \"over\" : \"yellow\"\n          \"out\" : null,\n          \"pressed.over\" : \"red\"\n     }));",
            "params": [
                {
                    "name": "first",
                    "description": "a first UI component in splitter panel",
                    "type": "zebra.ui.Panel",
                    "optional": true
                },
                {
                    "name": "second",
                    "description": "a second UI component in splitter panel",
                    "type": "zebra.ui.Panel",
                    "optional": true
                },
                {
                    "name": "o",
                    "description": "an orientation of splitter element: zebra.layout.VERTICAL or zebra.layout.HORIZONTAL",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Progress": {
            "name": "zebra.ui.Progress",
            "shortname": "zebra.ui.Progress",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12466,
            "description": "Progress bar UI component class.                                                                                                                                                                                                                           y -= (bundleSize + this.gap   [description]",
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Link": {
            "name": "zebra.ui.Link",
            "shortname": "zebra.ui.Link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12679,
            "description": "UI link component class.",
            "params": [
                {
                    "name": "s",
                    "description": "a link text",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Button}"
        },
        "zebra.ui.Extender": {
            "name": "zebra.ui.Extender",
            "shortname": "zebra.ui.Extender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12725,
            "description": "Extender UI component class",
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}",
            "params": [
                {
                    "name": "c",
                    "description": "a content of the extender panel",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "l",
                    "description": "a title label text or \ncomponent",
                    "type": "zebra.ui.Panel|STring"
                }
            ]
        },
        "zebra.ui.ScrollManager": {
            "name": "zebra.ui.ScrollManager",
            "shortname": "zebra.ui.ScrollManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12793,
            "description": "Scroll manager class.",
            "params": [
                {
                    "name": "t",
                    "description": "a target component to be scrolled",
                    "type": "zebra.ui.Panel"
                }
            ],
            "is_constructor": 1
        },
        "zebra.ui.Scroll": {
            "name": "zebra.ui.Scroll",
            "shortname": "zebra.ui.Scroll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12873,
            "description": "Scroll bar UI component",
            "params": [
                {
                    "name": "t",
                    "description": "type of the scroll bar components:\n\n       zebra.layout.VERTICAL - vertical scroll bar\n       zebra.layout.HORIZONTAL - horizontal scroll bar",
                    "type": "Integer"
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.ScrollPan": {
            "name": "zebra.ui.ScrollPan",
            "shortname": "zebra.ui.ScrollPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13143,
            "description": "Scroll UI panel. The component is used to manage scrolling \nfor a children UI component that occupies more space than \nit is available.",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component that has to \nbe placed into scroll panel",
                    "type": "zebra.ui.Panel",
                    "optional": true
                },
                {
                    "name": "barMask",
                    "description": "a scroll bars mask that allows \ndevelopers to control vertical and \nhorizontal scroll bars visibility.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Tabs": {
            "name": "zebra.ui.Tabs",
            "shortname": "zebra.ui.Tabs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13446,
            "description": "Tabs UI panel. The component is used to organize switching \nbetween number of pages where every page is an UI component.",
            "params": [
                {
                    "name": "o",
                    "description": "the tab panel orientation:\n\n     zebra.layout.TOP\n     zebra.layout.BOTTOM\n     zebra.layout.LEFT\n     zebra.layout.RIGHT",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Slider": {
            "name": "zebra.ui.Slider",
            "shortname": "zebra.ui.Slider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13949,
            "description": "Slider UI component class.",
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Toolbar": {
            "name": "zebra.ui.Toolbar",
            "shortname": "zebra.ui.Toolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 14390,
            "description": "Toolbar UI component",
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.RadioView": {
            "name": "zebra.ui.RadioView",
            "shortname": "zebra.ui.RadioView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 14751,
            "description": "The radio button ticker view.",
            "extends": "zebra.ui.View",
            "is_constructor": 1,
            "params": [
                {
                    "name": "col1",
                    "description": "color one to render the outer cycle",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "col2",
                    "description": "color tow to render the inner cycle",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "zebra.ui.TextField": {
            "name": "zebra.ui.TextField",
            "shortname": "zebra.ui.TextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 14890,
            "description": "Text field UI component. The component is designed to enter single line, multi lines or password text.\nThe component implement text field functionality from the scratch. It supports the following features\n\n   - Text selection\n   - Redu/Undo actions\n   - Native WEB clipboard \n   - Basic text navigation\n   - Read-only mode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "txt",
                    "description": "a text the text field component \nhas to be filled. The parameter can be a simple string, text model or text render class instance.",
                    "type": "String|zebra.data.TextModel|zebra.ui.TextRender",
                    "optional": true
                },
                {
                    "name": "maxCol",
                    "description": "a maximal size of entered text. -1 means the size of the edited text\nhas no length limit.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.Label"
        },
        "zebra.ui.TextArea": {
            "name": "zebra.ui.TextArea",
            "shortname": "zebra.ui.TextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15590,
            "description": "Text area UI component. The UI component to render multi-lines text.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "txt",
                    "description": "a text",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.TextField"
        },
        "zebra.ui.BaseList": {
            "name": "zebra.ui.BaseList",
            "shortname": "zebra.ui.BaseList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15621,
            "description": "Base UI list component class that has to be extended with a concrete list component implementation.\nThe list component visualizes list model.",
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.List": {
            "name": "zebra.ui.List",
            "shortname": "zebra.ui.List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16088,
            "description": "The class is list component implementation that visualizes zebra.data.ListModel. \nIt is supposed the model can have any type of items. Visualization of the items \nis customized by defining a view provider.",
            "extends": "zebra.ui.BaseList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "a list model that should be passed as an instance\nof zebra.data.ListModel or as an array.",
                    "type": "zebra.data.ListModel|Array",
                    "optional": true
                },
                {
                    "name": "isComboMode",
                    "description": "true if the list navigation has to be triggered by \nmouse cursor moving",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "zebra.ui.List.ViewProvider": {
            "name": "zebra.ui.List.ViewProvider",
            "shortname": "zebra.ui.List.ViewProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16102,
            "description": "List view provider class. This implementation renders list item using string \nrender. If a list item is an instance of \"zebra.ui.View\" class than it will \nbe rendered as the view.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "f",
                    "description": "a font to render list item text",
                    "type": "String|zebra.ui.Font",
                    "optional": true
                },
                {
                    "name": "c",
                    "description": "a color to render list item text",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "zebra.ui.CompList": {
            "name": "zebra.ui.CompList",
            "shortname": "zebra.ui.CompList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16331,
            "description": "List component consider its children UI components as a list model items. Every added to the component \nUI children component becomes a list model element. The implementation allows developers to use \nother UI components as its elements what makes list item view customization very easy and powerful.",
            "extends": "zebra.ui.BaseList",
            "params": [
                {
                    "name": "model",
                    "description": "a list model that should be passed as an instance\nof zebra.data.ListModel or as an array.",
                    "type": "zebra.data.ListModel|Array",
                    "optional": true
                },
                {
                    "name": "isComboMode",
                    "description": "true if the list navigation has to be triggered by \nmouse cursor moving",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "zebra.ui.Combo": {
            "name": "zebra.ui.Combo",
            "shortname": "zebra.ui.Combo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16535,
            "description": "Combo box UI component class",
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Combo.ContentPan": {
            "name": "zebra.ui.Combo.ContentPan",
            "shortname": "zebra.ui.Combo.ContentPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16555,
            "description": "UI panel class that is used to implement combo box content area",
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.Combo.ReadonlyContentPan": {
            "name": "zebra.ui.Combo.ReadonlyContentPan",
            "shortname": "zebra.ui.Combo.ReadonlyContentPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16612,
            "description": "Read-only content area combo box component panel class",
            "extends": "zebra.ui.Combo.ContentPan"
        },
        "zebra.ui.Combo.EditableContentPan": {
            "name": "zebra.ui.Combo.EditableContentPan",
            "shortname": "zebra.ui.Combo.EditableContentPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16637,
            "description": "Editable content area combo box component panel class",
            "extends": "zebra.ui.Combo.ContentPan"
        },
        "zebra.ui.ComboArrowView": {
            "name": "zebra.ui.ComboArrowView",
            "shortname": "zebra.ui.ComboArrowView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17046,
            "description": "Combo box arrow view. The view is used to render combo box arrow element\nin pressed  and unpressed state.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "col",
                    "description": "a color of arrow element",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "state",
                    "description": "a state of arrow element. true means pressed state.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.View"
        },
        "zebra.ui.TooltipInfo": {
            "name": "zebra.ui.TooltipInfo",
            "shortname": "zebra.ui.TooltipInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17138,
            "description": "Toltip interface. The interface is supposed to be used to say \nwhich component has to be shown as a tooltip at the given location of \nthe UI component.",
            "is_interface": 1
        },
        "zebra.ui.PopupInfo": {
            "name": "zebra.ui.PopupInfo",
            "shortname": "zebra.ui.PopupInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17157,
            "description": "Popup interface to indicate which UI component has to be shown at the \ngiven location of the UI component as a popup menu.",
            "is_interface": 1
        },
        "zebra.ui.WinListener": {
            "name": "zebra.ui.WinListener",
            "shortname": "zebra.ui.WinListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17175,
            "description": "Window listener interface",
            "is_interface": 1
        },
        "zebra.ui.showWindow()": {
            "name": "zebra.ui.showWindow()",
            "shortname": "zebra.ui.showWindow()",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": ""
        },
        "zebra.ui.WinLayer": {
            "name": "zebra.ui.WinLayer",
            "shortname": "zebra.ui.WinLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17231,
            "description": "Window layer class. Window layer is supposed to be used for showing\nmodal and none modal internal window. There are special ready to use \n\"zebra.ui.Window\" UI component that can be shown as internal window, but\nzebra allows developers to show any UI component as modal or none modal \nwindow. Add an UI component to window layer to show it as modal o none \nmodal window:\n\n       // create canvas\n       var canvas   = new zebra.ui.zCanvas();\n      \n       // get windows layer \n       var winLayer = canvas.getLayer(zebra.ui.WinLayer.ID);\n\n       // create standard UI window component \n       var win = new zebra.ui.Window();\n       win.setBounds(10,10,200,200);\n\n       // show the created window as modal window\n       winLayer.addWin(\"modal\", win);\n\nAlso shortcut method can be used\n\n       // create canvas\n       var canvas   = new zebra.ui.zCanvas();\n\n       // create standard UI window component \n       var win = new zebra.ui.Window();\n       win.setBounds(10,10,200,200);\n\n       // show the created window as modal window\n       zebra.ui.showModalWindow(canvas, win);\n\nWindow layer supports three types of windows:\n\n   - **\"modal\"** a modal window catches all input till it will be closed \n   - **\"mdi\"** a MDI window can get focus, but it doesn't block switching \n   focus to other UI elements\n   - **\"info\"** an INFO window cannot get focus. It is supposed to show \n   some information like tooltip.",
            "is_constructor": 1,
            "extends": "{zebra.ui.BaseLayer}"
        },
        "zebra.ui.Window": {
            "name": "zebra.ui.Window",
            "shortname": "zebra.ui.Window",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17530,
            "description": "Window UI component class. Implements window like UI component.\nThe window component has a header, status bar and content areas. The header component  \nis usually placed at the top of window, the status bar component is placed at the bottom and\nthe content component at places the central part of the window. Also the window defines \ncorner UI component that is supposed to be used to resize the window. The window implementation \nprovides the following possibilities: \n\n   - Move window by dragging the window on its header \n   - Resize window by dragging the window corner element\n   - Place buttons in the header to maximize, minimize, close, etc the window\n   - Indicates state of window (active or inactive) by changing \n   the widow header style \n   - Define a window icon component\n   - Define a window status bar component",
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.TooltipManager": {
            "name": "zebra.ui.TooltipManager",
            "shortname": "zebra.ui.TooltipManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17798,
            "description": "Tooltip manager class implements possibility to define a tooltip \nfor a component. Tooltip is an UI component that has to be shown \nas information window every time a mouse cursor has entered the\nspecified component of the given area of the specified component.",
            "extends": "zebra.ui.Manager",
            "is_constructor": 1
        },
        "zebra.ui.Menu": {
            "name": "zebra.ui.Menu",
            "shortname": "zebra.ui.Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17950,
            "description": "Menu UI component class. The class implements popup menu UI component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "list",
                    "description": "use special notation to define a menu\n\n       {\n           'Menu Item 1': null,   // menu item 1 without a sub menu\n           'Menu Item 2': null,   // menu item 2 without a sub menu\n           '-':null,              // decorative line element \n           'Menu Item 3': {       // menu item 3 with a sub menu defined\n               \"[x] Checkable menu item\":null, // checkable menu item\n               \"Sub item 1\":null\n           }\n       }",
                    "type": "Object",
                    "optional": true
                }
            ],
            "extends": "{zebra.ui.CompList}"
        },
        "zebra.ui.Menunbar": {
            "name": "zebra.ui.Menunbar",
            "shortname": "zebra.ui.Menunbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18274,
            "description": "Menu bar UI component class. Menu bar can be build in any part of UI application.\nThere is no restriction regarding the placement of the component. \n\n       var canvas = new zebra.ui.zCanvas(300,200);\n       canvas.setLayout(new zebra.layout.BorderLayout());\n\n       var mbar = new zebra.ui.Menubar({\n           \"Item 1\": {\n               \"Subitem 1.1\":null,\n               \"Subitem 1.2\":null,\n               \"Subitem 1.3\":null\n           },\n           \"Item 2\": {\n               \"Subitem 2.1\":null,\n               \"Subitem 2.2\":null,\n               \"Subitem 2.3\":null\n           },\n           \"Item 3\": null\n       });\n\n       canvas.root.add(zebra.layout.BOTTOM, mbar);",
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.PopupLayer": {
            "name": "zebra.ui.PopupLayer",
            "shortname": "zebra.ui.PopupLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18501,
            "description": "UI popup layer class. Special layer implementation to show \ncontext menu. Normally the layer is not used directly.",
            "is_constructor": 1,
            "extends": "{zebra.ui.BaseLayer}"
        },
        "zebra.ui.PopupManager": {
            "name": "zebra.ui.PopupManager",
            "shortname": "zebra.ui.PopupManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18674,
            "description": "Popup menu manager class. The manager registering and triggers showing context popup menu. \nMenu appearing is triggered by right mouse click or double fingers touch event.\n\n       // create canvas\n       var canvas = new zebra.ui.zCanvas();\n\n       // create menu with three items\n       var m = new zebra.ui.Menu();\n       m.add(\"Menu Item 1\");\n       m.add(\"Menu Item 2\");\n       m.add(\"Menu Item 3\");\n   \n       // bind the menu to root panel\n       zebra.ui.popup.setPopup(canvas.root, m);\n\nThe popup manager use \"zebra.ui.PopupInfo\" interface implementation to understand which\npopup menu has to be shown at the given location of the target UI component. Developer \ncan tune a context menu appearing depending on the current mouse cursor or touch location:\n\n       // create canvas\n       var canvas = new zebra.ui.zCanvas();\n\n       // visualize 50x50 pixels hot spot of toot component  \n       // to which the context menu is bound \n       canvas.root.paint = function(g) {\n           g.setColor(\"red\");\n           g.fillRect(50,50,50,50);\n       }\n\n       // create menu with three items\n       var m = new zebra.ui.Menu();\n       m.add(\"Menu Item 1\");\n       m.add(\"Menu Item 2\");\n       m.add(\"Menu Item 3\");\n   \n       // bind the popup info interface implementation to the canvas\n       // root component\n       zebra.ui.popup.setPopup(canvas.root, new zebra.ui.PopupInfo([\n           function getPopup(target, x, y) {\n               // test if mouse cursor position is in red spot area\n               // and return context menu if it is true \n               if (x > 50 && y > 50 && x < 100 && y <  100)  {\n                   return m;\n               }\n               return null;\n           }\n       ]));\n\n Also developers can define a context menu on the level of component, \n without necessary to register it in popup manager. For this just implement\n \"zebra.ui.PopupInfo\" interface with a component that has a context menu:\n\n       // create canvas and set border layout for root panel\n       var canvas = new zebra.ui.zCanvas();\n       canvas.root.setLayout(new zebra.layout.BorderLayout());\n\n       // instantiate anonymous label class that implements \n       // popup info interface to bind a context menu to \n       // the label\n       var lab = new zebra.ui.Label(\"I have a context menu defined\", \n                                    zebra.ui.PopupInfo, [\n           function getPopup(target, x, y) { return m; }\n       ]);\n       lab.setBorder(\"plain\");\n       lab.setPadding(8);\n\n       // create menu with three items\n       var m = new zebra.ui.Menu();\n       m.add(\"Menu Item 1\");\n       m.add(\"Menu Item 2\");\n       m.add(\"Menu Item 3\");\n\n       // add label to top part of root panel\n       canvas.root.add(zebra.layout.TOP, lab);",
            "is_constructor": 1,
            "extends": "{zebra.ui.Manager}"
        },
        "zebra.ui.designer.ShaperPan": {
            "name": "zebra.ui.designer.ShaperPan",
            "shortname": "zebra.ui.designer.ShaperPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.designer",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18952,
            "description": "This is UI component class that implements possibility to embeds another\nUI components to control the component size and location visually.\n\n       // create canvas \n       var canvas = new zebra.ui.zCanvas(300,300);\n\n       // create two UI components\n       var lab = new zebra.ui.Label(\"Label\");\n       var but = new zebra.ui.Button(\"Button\");\n\n       // add created before label component as target of the shaper\n       // component and than add the shaper component into root panel \n       canvas.root.add(new zebra.ui.designer.ShaperPan(lab).properties({\n           bounds: [ 30,30,100,40]\n       }));\n\n       // add created before button component as target of the shaper\n       // component and than add the shaper component into root panel \n       canvas.root.add(new zebra.ui.designer.ShaperPan(but).properties({\n           bounds: [ 130,130,100,50]\n       }));",
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}",
            "params": [
                {
                    "name": "target",
                    "description": "a target UI component whose size and location\nhas to be controlled",
                    "type": "zebra.ui.Panel"
                }
            ]
        },
        "zebra.ui.HtmlElement": {
            "name": "zebra.ui.HtmlElement",
            "shortname": "zebra.ui.HtmlElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19145,
            "description": "HTML element UI component wrapper class. The class represents \nan HTML element as if it is standard UI component. It helps to use\nsome standard HTML element as zebra UI components and embeds it \nin zebra UI application layout.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "an HTML element to be represented\nas a standard zebra UI component. If the passed parameter is string \nit denotes a name of an HTML element. In this case a new HTML element \nwill be created.",
                    "type": "String|HTMLElement",
                    "optional": true
                }
            ],
            "extends": "{zebra.ui.Panel}"
        },
        "zebra.ui.HtmlTextInput": {
            "name": "zebra.ui.HtmlTextInput",
            "shortname": "zebra.ui.HtmlTextInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19490,
            "description": "HTML input element wrapper class. The class can be used as basis class\nto wrap HTML elements that can be used to enter a textual information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "a text the text input component has to be filled with",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "an input element name",
                    "type": "String"
                }
            ],
            "extends": "zebra.ui.HtmlElement"
        },
        "zebra.ui.HtmlTextField": {
            "name": "zebra.ui.HtmlTextField",
            "shortname": "zebra.ui.HtmlTextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19534,
            "description": "HTML input text element wrapper class. The class wraps standard HTML text field  \nand represents it as zebra UI component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "a text the text field component has to be filled with",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.HtmlTextInput"
        },
        "zebra.ui.HtmlTextArea": {
            "name": "zebra.ui.HtmlTextArea",
            "shortname": "zebra.ui.HtmlTextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19553,
            "description": "HTML input textarea element wrapper class. The class wraps standard HTML textarea \nelement and represents it as zebra UI component.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "a text the text area component has to be filled with",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "zebra.ui.HtmlTextInput"
        },
        "zebra.ui.tree.DefEditors": {
            "name": "zebra.ui.tree.DefEditors",
            "shortname": "zebra.ui.tree.DefEditors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.tree",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19611,
            "description": "Default tree editor provider"
        },
        "zebra.ui.tree.DefViews": {
            "name": "zebra.ui.tree.DefViews",
            "shortname": "zebra.ui.tree.DefViews",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.tree",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19669,
            "description": "Default tree editor view provider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "color",
                    "description": "the tree item text color",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "font",
                    "description": "the tree item text font",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "zebra.ui.tree.Tree": {
            "name": "zebra.ui.tree.Tree",
            "shortname": "zebra.ui.tree.Tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.tree",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19701,
            "description": "Tree UI component that visualizes a tree data model. The model itself can be passed as JavaScript \nstructure or as a instance of zebra.data.TreeModel. Internally tree component keeps the model always\nas zebra.data.TreeModel class instance:\n\n    var tree = new zebra.ui.tree.Tree({\n         value: \"Root\",\n         kids : [  \"Item 1\", \"Item 2\"]\n    });\n\nor\n \n    var model = new zebra.data.TreeModel(\"Root\");\n    model.add(model.root, \"Item 1\");\n    model.add(model.root, \"Item 2\");\n  \n    var tree = new zebra.ui.tree.Tree(model);",
            "is_constructor": 1,
            "extends": "{zebra.ui.Panel}",
            "params": [
                {
                    "name": "model",
                    "description": "a tree data model passed as JavaScript \nstructure or as an instance",
                    "type": "Object|zebra.data.TreeModel",
                    "optional": true
                },
                {
                    "name": "b",
                    "description": "the tree component items toggle state. true to have all items \nin opened state.\nof zebra.data.TreeModel class",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "zebra.ui.grid.Metrics": {
            "name": "zebra.ui.grid.Metrics",
            "shortname": "zebra.ui.grid.Metrics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "zebra.ui.grid.Grid"
            ],
            "module": "ui.grid",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20737,
            "description": "Interface that describes a grid component metrics"
        },
        "zebra.ui.grid.DefEditors": {
            "name": "zebra.ui.grid.DefEditors",
            "shortname": "zebra.ui.grid.DefEditors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.grid",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20854,
            "description": "Simple grid cells editors provider implementation. The editors provider\nalways use a text field component to edit a cell content.",
            "is_constructor": 1
        },
        "zebra.ui.grid.GridCaption": {
            "name": "zebra.ui.grid.GridCaption",
            "shortname": "zebra.ui.grid.GridCaption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.grid",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20921,
            "description": "Grid caption UI component class.",
            "extends": "{zebra.ui.Panel}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "m",
                    "description": "a grid metrics the caption is set for",
                    "type": "zebra.ui.grid.Metrics",
                    "optional": true
                },
                {
                    "name": "o",
                    "description": "an orientation of caption: \"zebra.layout.VERTICAL\" or \n\"zebra.layout.HORIZONTAL\"",
                    "type": "Integer",
                    "optional": true
                }
            ]
        },
        "zebra.ui.grid.Grid": {
            "name": "zebra.ui.grid.Grid",
            "shortname": "zebra.ui.grid.Grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.grid",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21287,
            "description": "Grid UI component class. The grid component visualizes \"zebra.data.Matrix\" data model.\nGrid cell visualization can be customized by defining and setting an own view provider.\nGrid component supports cell editing. Every existent UI component can be configured \nas a cell editor by defining an own editor provider. \n\nGrid can have top and left captions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "a matrix model to be visualized with the grid \ncomponent. It can be an instance of zebra.data.Matrix class or an array that contains \nembedded arrays. Every embedded array is a grid row.",
                    "type": "zebra.data.Matrix|Array",
                    "optional": true
                },
                {
                    "name": "rows",
                    "description": "a number of rows",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "columns",
                    "description": "a number of columns",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "extends": "{zebra.ui.Panel}",
            "uses": [
                "zebra.ui.grid.Metrics"
            ]
        },
        "zebra.ui.grid.GridStretchPan": {
            "name": "zebra.ui.grid.GridStretchPan",
            "shortname": "zebra.ui.grid.GridStretchPan",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ui.grid",
            "namespace": "",
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22637,
            "description": "Special UI panel that manages to stretch grid columns to occupy the whole panel space.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "grid",
                    "description": "a grid component that has to be added in the panel",
                    "type": "zebra.ui.grid.Grid"
                }
            ],
            "extends": "{zebra.ui.Panel}"
        }
    },
    "classitems": [
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 234,
            "description": "Interface is a special class that is used to \"pitch\" a class with a some marker.\nIt is not supposed an interface directly rules which method the class has to implement.\n\n       // declare \"I\" interface\n       var I = zebra.Interface();\n\n       // declare \"A\" class that implements \"I\" interface\n       var A = zebra.Class(I, [ function m() {} ]);\n   \n       // instantiate \"A\" class\n       var a = new A();\n       zebra.instanceOf(a, I);  // true \n       zebra.instanceOf(a, A);  // true",
            "return": {
                "description": "an interface",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "Interface",
            "class": "zebra.Interface()",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 306,
            "description": "Class declaration method. Zebra easy OOP concept supports:\n\n   - **Single class inheritance.** Any class can extend an another zebra class\n\n           // declare class \"A\" that with one method \"a\"   \n           var A = zebra.Class([\n               function a() { ... }\n           ]);\n       \n           // declare class \"B\" that inherits class \"A\"\n           var B = zebra.Class(A, []);\n\n           // instantiate class \"B\" and call method \"a\"\n           var b = new B();\n           b.a();\n\n   - **Class method overriding.** Override a parent class method implementation\n\n           // declare class \"A\" that with one method \"a\"   \n           var A = zebra.Class([\n               function a() { ... }\n           ]);\n       \n           // declare class \"B\" that inherits class \"A\"\n           // and overrides method a with an own implementation\n           var B = zebra.Class(A, [\n               function a() { ... }\n           ]);\n\n   - **Class method overloading.** You can declare methods with the same names but \n   different parameter list. The methods are considered as different method\n\n           // declare class \"A\" that with one method \"a\"   \n           var A = zebra.Class([\n               function a() { ... }\n           ]);\n       \n           // declare class \"B\" that inherits class \"A\"\n           // and overloads method \"a\" with another number of\n           // parameters \n           var B = zebra.Class(A, [\n               function a(param1) { ... }\n           ]);\n\n           // instantiate class B and call two different \n           // methods \"a()\" and \"a(param1)\"\n           var b = new B();\n           b.a();      // call method defined in \"A\" class \n           b.a(100);   // call overloaded method defined in \"B\" class\n\n\n   - **Constructors.** Constructor is a method with empty name\n\n           // declare class \"A\" that with one constructor\n           var A = zebra.Class([\n               function () { this.variable = 100; }\n           ]);\n\n           // instantiate \"A\"\n           var a = new A();\n           a.variable // variable is 100 \n\n   - **Static methods and variables declaration.** Static fields and methods can be setup by declaring\n     special \"$clazz\" method whose context is set to declared class\n\n           var A = zebra.Class([\n               // special method where static stuff has to be declared\n               function $clazz() {\n                   // declare static field\n                   this.staticVar = 100;\n                   // declare static method\n                   this.staticMethod = function() {};\n               }\n           ]); \n\n           // access static field an method\n           A.staticVar      // 100\n           A.staticMethod() // call static method \n\n   - **Access to super class context.** You can call method declared in a parent class \n\n           // declare \"A\" class with one class method \"a(p1,p2)\"\n           var A = zebra.Class([\n               function a(p1, p2) { ... }  \n           ]); \n       \n           // declare \"B\" class that inherits \"A\" class and overrides \"a(p1,p2)\" method\n           var B = zebra.Class(A, [\n               function a(p1, p2) { \n                   // call \"a(p1,p2)\" method implemented with \"A\" class\n                   this.$super(p1,p2); \n               }  \n           ]); \n\n\n One of the powerful feature of zebra easy OOP concept is possibility to instantiate \n anonymous classes and interfaces. Anonymous class is an instance of an existing \n class that can override the original class methods with own implementations, implements\n own list of interfaces. In other words the class instance customizes class definition\n for a particular instance of the class;  \n\n           // declare \"A\" class\n           var A = zebra.Class([\n               function a() { return 1; }\n           ]);\n\n           // instantiate anonymous class that add an own implementation of \"a\" method\n           var a = new A([\n               function a() { return 2; }\n           ]);\n           a.a() // return 2",
            "params": [
                {
                    "name": "inheritedClass",
                    "description": "an optional parent class to be inherited",
                    "type": "zebra.Class",
                    "optional": true
                },
                {
                    "name": "inheritedClass",
                    "description": "an optional interface to be extended",
                    "type": "zebra.Interface",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "methods",
                    "description": "list of declared class methods. Can be empty.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a class definition",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "Class",
            "class": "zebra.Class()",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 554,
            "description": "Get declared by this class methods.",
            "params": [
                {
                    "name": "name",
                    "description": "a method name. The name can be used as a filter to exclude all methods\nwhose name doesn't match the passed name",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "an array of declared by the class methods",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getMethods",
            "class": "zebra.Class()",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 676,
            "description": "Get class by the given class name",
            "params": [
                {
                    "name": "name",
                    "description": "a class name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a class. Throws exception if the class cannot be \nresolved by the given class name",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "forName",
            "class": "zebra.forName()",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 695,
            "description": "Test if the given object is instance of the specified class or interface. It is preferable \nto use this method instead of JavaScript \"instanceof\" operator whenever you are dealing with \nzebra classes and interfaces.",
            "params": [
                {
                    "name": "obj",
                    "description": "an object to be evaluated",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "clazz a class or interface",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "instanceOf",
            "class": "zebra.instanceOf()",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 717,
            "description": "The method makes sure all variables, structures, elements are loaded \nand ready to be used. The result of the method execution is calling \npassed callback functions when the environment is ready. The goal of \nthe method to provide safe place to run your code safely in proper \nplace and at proper time.\n\n       zebra.ready(function() {\n           // run code here safely\n           ...\n       });",
            "params": [
                {
                    "name": "f",
                    "description": "a function or array of functions to be called \nsafely. If there no one callback method has been passed it causes busy\nflag will be decremented.",
                    "type": "Fucntion|Array",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "ready",
            "class": "zebra.ready()",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 908,
            "description": "URL path",
            "itemtype": "attribute",
            "name": "path",
            "type": "{String}",
            "readonly": "",
            "class": "zebra.URL",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 917,
            "description": "URL protocol",
            "itemtype": "attribute",
            "name": "protocol",
            "type": "{String}",
            "readonly": "",
            "class": "zebra.URL",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 925,
            "description": "Host",
            "itemtype": "attribute",
            "name": "host",
            "type": "{String}",
            "readonly": "",
            "class": "zebra.URL",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 935,
            "description": "Query string",
            "itemtype": "attribute",
            "name": "qs",
            "type": "{String}",
            "readonly": "",
            "class": "zebra.URL",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 948,
            "description": "Get a parent URL of the URL",
            "return": {
                "description": "a parent URL",
                "type": "zebra.URL"
            },
            "itemtype": "method",
            "name": "getParentURL",
            "class": "zebra.URL",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 964,
            "description": "Join the given relative path to the URL.\nIf the passed path starts from \"/\" character\nit will be joined without taking in account \nthe URL path",
            "params": [
                {
                    "name": "p",
                    "description": "a relative path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an absolute URL",
                "type": "String"
            },
            "itemtype": "method",
            "name": "join",
            "class": "zebra.URL",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 990,
            "class": "zebra.util.newInstance()",
            "module": "zebra"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1007,
            "description": "Instantiate a new class instance by the given class name with the specified constructor \narguments.",
            "params": [
                {
                    "name": "clazz",
                    "description": "a class name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "an arguments list",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new instance of the given class initialized with the specified arguments",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "newInstance",
            "class": "zebra.util.newInstance()",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1031,
            "description": "Find by xpath-like path an element in a tree-like structure. The method is flexible way to look up \nelements in tree structures. The only requirements the passed tree-like structure has to follow is\ndeclaring a \"kids\" array field if the element has a children element. To understand if the given tree \nelement matches the current path fragment a special equality function has to be passed.\n\n       var treeLikeRoot = { \n           value : \"Root\", \n           kids : [\n               { value: \"Item 1\" },\n               { value: \"Item 2\" }\n           ]\n       };\n\n       zebra.util.findInTree(treeLikeRoot, \n                             \"/Root/item1\", \n                             function(item, fragment) {\n                                 return item.value == fragment;\n                             },\n                             function(foundElement) {\n                                ...\n                                // true means stop lookaup\n                                return true;   \n                             });",
            "params": [
                {
                    "name": "root",
                    "description": "a tree root element. If the element has a children element it has to \ndeclare \"kids\" field. This field is an array of all children elements",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "a xpath-like path. The path has to satisfy number of requirements \nand rules:\n\n   - \"/\"\" means lookup among all direct children elements \n   - \"//\"\" means lookup among all children elements recursively\n   - \"*\" means any path value \n   -[@attr=100] means number attribute\n   -[@attr=true] means boolean attribute\n   -[@attr='value'] means string attribute\n   - Path has always starts from \"/\" or \"//\"\n   - Path element always has to be defined: \"*\" or an symbolic name\n\n\nPath examples:\n\n   - \"//*\" traverse all tree elements\n   - \"//*[@a=10]\" traverse all tree elements that has an attribute \"a\" that equals 10\n   - \"/Root/Item\" find an element by exact path",
                    "type": "String"
                },
                {
                    "name": "eq",
                    "description": "an equality function. The function gets current evaluated tree element  \nand a path fragment against which the tree element has to be evaluated. It is expected the method \nreturns boolean value to say if the given passed tree element matches the path fragment.",
                    "type": "Function"
                },
                {
                    "name": "cb",
                    "description": "callback function that is called every time a new tree element\nmatches the given path fragment. The function has to return true if the tree look up\nhas to be stopped",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "findInTree",
            "class": "zebra.util.findInTree()",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1163,
            "description": "Red color intensity",
            "itemtype": "attribute",
            "name": "r",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.util.rgb",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1170,
            "description": "Green color intensity",
            "itemtype": "attribute",
            "name": "g",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.util.rgb",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1177,
            "description": "Blue color intensity",
            "itemtype": "attribute",
            "name": "b",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.util.rgb",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1184,
            "description": "Alpha",
            "itemtype": "attribute",
            "name": "a",
            "type": "{Float}",
            "readonly": "",
            "class": "zebra.util.rgb",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1462,
            "description": "Fire when a virtual cursor position has been updated\n\n       position._.add(function(src, prevOffset, prevLine, prevCol) {\n           ...\n       });",
            "itemtype": "event",
            "name": "posChanged",
            "params": [
                {
                    "name": "src",
                    "description": "an object that triggers the event",
                    "type": "zebra.util.Position"
                },
                {
                    "name": "prevOffest",
                    "description": "a previous virtual cursor offset",
                    "type": "Integer"
                },
                {
                    "name": "prevLine",
                    "description": "a previous virtual cursor line",
                    "type": "Integer"
                },
                {
                    "name": "prevCol",
                    "description": "a previous virtual cursor column in the previous line",
                    "type": "Integer"
                }
            ],
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1484,
            "description": "Get number of lines to navigate through",
            "return": {
                "description": "a number of lines",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLines",
            "class": "zebra.util.Position.Metric",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1490,
            "description": "Get a number of elements in the given line",
            "params": [
                {
                    "name": "l",
                    "description": "a line index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a number of elements in a line",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLineSize",
            "class": "zebra.util.Position.Metric",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1497,
            "description": "Get a maximal element index (a last element of a last line)",
            "return": {
                "description": "a maximal element index",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getMaxOffset",
            "class": "zebra.util.Position.Metric",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1512,
            "description": "Clear virtual cursor position to undefined (-1)",
            "itemtype": "method",
            "name": "clearPos",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1525,
            "description": "Set the specified virtual cursor offsest",
            "params": [
                {
                    "name": "o",
                    "description": "an offset",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setOffset",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1549,
            "description": "Seek virtual cursor offset with the given shift",
            "params": [
                {
                    "name": "off",
                    "description": "a shift",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "seek",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1556,
            "description": "Set the vurtual cursor line and the given column in the line",
            "params": [
                {
                    "name": "r",
                    "description": "a line",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a column in the line",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRowCol",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1587,
            "description": "Calculate a line and line column by the given offset.",
            "params": [
                {
                    "name": "off",
                    "description": "an offset",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an array that contains a line as the first \nelement and a column in the line as the second element.",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getPointByOffset",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1624,
            "description": "Calculate an offset by the given line and column in the line",
            "params": [
                {
                    "name": "row",
                    "description": "a line",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a column in the line",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an offset",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getOffsetByPoint",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1644,
            "description": "Calculate maximal possible offset",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "calcMaxOffset",
            "return": {
                "description": "a maximal possible offset",
                "type": "Integer"
            },
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1656,
            "description": "Seek virtual cursor to the next position. How the method has to seek to the next position\nhas to be denoted by one of the following constants:\n   \n   - **zebra.util.Position.BEG** seek cursor to the begin of the current line\n   - **zebra.util.Position.END** seek cursor to the end of the current line\n   - **zebra.util.Position.UP** seek cursor one line up\n   - **zebra.util.Position.DOWN** seek cursor one line down \n   \nIf the current virtual position is not known (-1) the method always sets \nit to the first line, the first column in the line (offset is zero).",
            "params": [
                {
                    "name": "t",
                    "description": "an action the seek has to be done",
                    "type": "Integer"
                },
                {
                    "name": "num",
                    "description": "number of seek actions",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "seekLineTo",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1731,
            "description": "Current virtual cursor line position",
            "itemtype": "attribute",
            "name": "currentLine",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1738,
            "description": "Current virtual cursor column position",
            "itemtype": "attribute",
            "name": "currentCol",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1745,
            "description": "Current virtual cursor offset",
            "itemtype": "attribute",
            "name": "offset",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1756,
            "description": "Set position metric. Metric describes how many lines  \nand elements in these line the virtual cursor can be navigated",
            "params": [
                {
                    "name": "p",
                    "description": "a position metric",
                    "type": "zebra.util.Position.Metric"
                }
            ],
            "itemtype": "method",
            "name": "setMetric",
            "class": "zebra.util.Position",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1906,
            "description": "The attribute rules how arrays have to be merged if the bag is loaded from few \nJSON sources. true means that if a two JSON have the same key that reference to\narray values the final value will be a concatenation of the two arrays from the \ntwo JSON sources.",
            "itemtype": "attribute",
            "name": "concatArrays",
            "type": "{Boolean}",
            "default": "false",
            "class": "zebra.util.Bag",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 1917,
            "description": "The property says if the object introspection is required to try find a setter \nmethod for the given key. For instance if an object is loaded with the \nfollowing JSON:\n        \n        {\n           \"color\": \"red\"\n        }\n       \nthe introspection will cause bag class to try finding \"setColor(c)\" method in \nthe loaded with the JSON object and call it to set \"red\" property value.",
            "itemtype": "attribute",
            "name": "usePropertySetters",
            "default": "true",
            "type": "{Boolean}",
            "class": "zebra.util.Bag",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2076,
            "description": "Called every time the given class name has to be transformed into \nthe class object (constructor) reference.",
            "params": [
                {
                    "name": "clazz",
                    "description": "a class name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a class reference",
                "type": "Function"
            },
            "itemtype": "method",
            "name": "resolveClass",
            "class": "zebra.util.Bag",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2104,
            "description": "Load the given JSON content and parse if the given flag is true. The passed  \nboolean flag controls parsing. The flag is used to load few JSON. Before \nparsing the JSONs are merged and than the final result is parsed.",
            "params": [
                {
                    "name": "s",
                    "description": "a JSON content to be loaded",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "true if the loading has to be completed",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the bag itself",
                "type": "zebra.util.Bag"
            },
            "itemtype": "method",
            "name": "load",
            "class": "zebra.util.Bag",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2133,
            "description": "End loading JSONs and parse final result",
            "itemtype": "method",
            "name": "end",
            "class": "zebra.util.Bag",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2159,
            "class": "zebra.data.TextModel",
            "module": "util"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2180,
            "description": "Get the given string line stored in the model",
            "itemtype": "method",
            "name": "getLine",
            "params": [
                {
                    "name": "line",
                    "description": "a line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a string line",
                "type": "String"
            },
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2187,
            "description": "Get wrapped by the text model original text string",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "an original text",
                "type": "String"
            },
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2193,
            "description": "Get number of lines stored in the text model",
            "itemtype": "method",
            "name": "getLines",
            "return": {
                "description": "a number of lines",
                "type": "Integer"
            },
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2199,
            "description": "Get number of characters stored in the model",
            "itemtype": "method",
            "name": "getTextLength",
            "return": {
                "description": "a number of characters",
                "type": "Integer"
            },
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2205,
            "description": "Write the given string in the text model starting from the specified offset",
            "itemtype": "method",
            "name": "write",
            "params": [
                {
                    "name": "s",
                    "description": "a string to be written into the text model",
                    "type": "String"
                },
                {
                    "name": "offset",
                    "description": "an offset starting from that the passed string has to be written into the text model",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2212,
            "description": "Remove substring from the text model.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "offset",
                    "description": "an offset starting from that a substring will be removed",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a size of a substring to be removed",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2219,
            "description": "Fill the text model with the given text",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "text",
                    "description": "a new text to be set for the text model",
                    "type": "String"
                }
            ],
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2225,
            "description": "Fired when the text model has been updated: a string has been inserted or removed\n\n       text._.add(function (src, b, off, len, startLine, lines) {\n           ...\n       });",
            "itemtype": "event",
            "name": "textUpdated",
            "params": [
                {
                    "name": "src",
                    "description": "a text model that triggers the event",
                    "type": "zebra.data.Text"
                },
                {
                    "name": "b",
                    "description": "a flag that is true if a string has been written in the text model, false if the model substring has been removed",
                    "type": "Boolean"
                },
                {
                    "name": "off",
                    "description": "an offset starting form that the text update took place",
                    "type": "Integer"
                },
                {
                    "name": "len",
                    "description": "a length of text that has been affected by the text model update",
                    "type": "Integer"
                },
                {
                    "name": "startLine",
                    "description": "a first line that has been affected by the text model update",
                    "type": "Integer"
                },
                {
                    "name": "lines",
                    "description": "a number of lines that has been affected by the text model update",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.TextModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2372,
            "description": "Maximal text length. -1 means the text is not restricted regarding its length.",
            "itemtype": "attribute",
            "name": "maxLen",
            "type": "{Integer}",
            "default": "-1",
            "readonly": "",
            "class": "zebra.data.SingleLineTxt",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2385,
            "description": "Get number of lines stored in the text model. The model can have only one line",
            "itemtype": "method",
            "name": "getLines",
            "return": {
                "description": "a number of lines",
                "type": "Integer"
            },
            "class": "zebra.data.SingleLineTxt",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2431,
            "description": "Set the given maximal length the text can have",
            "itemtype": "method",
            "name": "setMaxLength",
            "params": [
                {
                    "name": "max",
                    "description": "a maximal length of text",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.SingleLineTxt",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2466,
            "description": "Fired when a new element has been added to the list model \n\n    list._.add(function elementInserted(src, o, i) {\n        ...\n    });",
            "itemtype": "event",
            "name": "elementInserted",
            "params": [
                {
                    "name": "src",
                    "description": "a list model that triggers the event",
                    "type": "zebra.data.ListModel"
                },
                {
                    "name": "o",
                    "description": "an element that has been added",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "an index at that the new element has been added",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2479,
            "description": "Fired when an element has been removed from the list model \n\n    list._.add(function elementRemoved(src, o, i) {\n        ...\n    });",
            "itemtype": "event",
            "name": "elementRemoved",
            "params": [
                {
                    "name": "src",
                    "description": "a list model that triggers the event",
                    "type": "zebra.data.ListModel"
                },
                {
                    "name": "o",
                    "description": "an element that has been removed",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "an index at that the element has been removed",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2492,
            "description": "Fired when an element has been re-set \n\n    list._.add(function elementSet(src, o, pe, i) {\n        ...\n    });",
            "itemtype": "event",
            "name": "elementSet",
            "params": [
                {
                    "name": "src",
                    "description": "a list model that triggers the event",
                    "type": "zebra.data.ListModel"
                },
                {
                    "name": "o",
                    "description": "an element that has been set",
                    "type": "Object"
                },
                {
                    "name": "pe",
                    "description": "a previous element",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "an index at that the element has been re-set",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2508,
            "description": "Get an item stored at the given location in the list",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "an item location",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a list item",
                "type": "Object"
            },
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2521,
            "description": "Add the given item into end of the list",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "o",
                    "description": "an item to be added",
                    "type": "Object"
                }
            ],
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2531,
            "description": "Remove all elements from the list model",
            "itemtype": "method",
            "name": "removeAll",
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2540,
            "description": "Remove an element at the given location of the list model",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "i",
                    "description": "a location of an element to be removed from the list",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2551,
            "description": "Remove the given element from the list",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "o",
                    "description": "an element to be removed from the list",
                    "type": "Object"
                }
            ],
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2560,
            "description": "Insert the given element into the given position of the list",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "o",
                    "description": "an element to be inserted into the list",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "a position at which the element has to be inserted into the list",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2574,
            "description": "Get number of elements stored in the list",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "a number of element in the list",
                "type": "Integer"
            },
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2581,
            "description": "Set the new element at the given position",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "o",
                    "description": "a new element to be set as the list element at the given position",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "a position",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "previous element that was stored at the given position",
                "type": "Object"
            },
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2598,
            "description": "Check if the element is in the list",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "o",
                    "description": "an element to be checked",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the element is in the list",
                "type": "Boolean"
            },
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2606,
            "description": "Get position the given element is stored in the list",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "o",
                    "description": "an element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the element position. -1 if the element cannot be found in the list",
                "type": "Integer"
            },
            "class": "zebra.data.ListModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2630,
            "description": "Array of the element children items",
            "itemtype": "attribute",
            "name": "kids",
            "type": "{Array}",
            "default": "[]",
            "readonly": "",
            "class": "zebra.data.Item",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2639,
            "description": "Value stored with this item",
            "itemtype": "attribute",
            "name": "value",
            "type": "{Object}",
            "default": "null",
            "readonly": "",
            "class": "zebra.data.Item",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2648,
            "description": "Reference to parent item",
            "itemtype": "attribute",
            "name": "parent",
            "type": "{zebra.data.Item}",
            "default": "undefined",
            "readonly": "",
            "class": "zebra.data.Item",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2682,
            "description": "Fired when the tree model item value has been updated. \n\n   tree._.add(function itemModified(src, item) {\n       ...\n   });",
            "itemtype": "event",
            "name": "itemModified",
            "params": [
                {
                    "name": "src",
                    "description": "a tree model that triggers the event",
                    "type": "zebra.data.TreeModel"
                },
                {
                    "name": "item",
                    "description": "an item whose value has been updated",
                    "type": "zebra.data.Item"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2694,
            "description": "Fired when the tree model item has been removed\n\n   tree._.add(function itemRemoved(src, item) {\n      ...\n   });",
            "itemtype": "event",
            "name": "itemRemoved",
            "params": [
                {
                    "name": "src",
                    "description": "a tree model that triggers the event",
                    "type": "zebra.data.TreeModel"
                },
                {
                    "name": "item",
                    "description": "an item that has been removed from the tree model",
                    "type": "zebra.data.Item"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2706,
            "description": "Fired when the tree model item has been inserted into the model\n\n   tree._.add(function itemInserted(src, item) {\n      ...\n   });",
            "itemtype": "event",
            "name": "itemInserted",
            "params": [
                {
                    "name": "src",
                    "description": "a tree model that triggers the event",
                    "type": "zebra.data.TreeModel"
                },
                {
                    "name": "item",
                    "description": "an item that has been inserted into the tree model",
                    "type": "zebra.data.Item"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2733,
            "description": "Reference to teh tree model root item",
            "itemtype": "attribute",
            "name": "root",
            "readonly": "",
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2739,
            "description": "Update a value of the given tree model item with the new one",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "item",
                    "description": "an item whose value has to be updated",
                    "type": "zebra.data.Item"
                },
                {
                    "name": "v",
                    "description": "a new item value",
                    "type": "[type]"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2750,
            "description": "Add the new item to the tree model as a children element of the given parent item",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "to",
                    "description": "a parent item to which the new item has to be added",
                    "type": "zebra.data.Item"
                },
                {
                    "name": "an",
                    "description": "item or value of the item to be added to the parent item of the tree model",
                    "type": "Object|zebra.data.Item"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2760,
            "description": "Insert the new item to the tree model as a children element at the given position of the parent element",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "to",
                    "description": "a parent item to which the new item has to be inserted",
                    "type": "zebra.data.Item"
                },
                {
                    "name": "an",
                    "description": "item or value of the item to be inserted to the parent item",
                    "type": "Object|zebra.data.Item"
                },
                {
                    "name": "i",
                    "description": "a position the new item has to be inserted into the parent item",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2781,
            "description": "Remove the given item from the tree model",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "an item to be removed from the tree model",
                    "type": "zebra.data.Item"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2796,
            "description": "Remove all children items from the given item of the tree model",
            "itemtype": "method",
            "name": "removeKids",
            "params": [
                {
                    "name": "item",
                    "description": "an item from that all children items have to be removed",
                    "type": "zebra.data.Item"
                }
            ],
            "class": "zebra.data.TreeModel",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2825,
            "description": "Number of rows in the matrix model",
            "itemtype": "attribute",
            "name": "rows",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2832,
            "description": "Number of columns in the matrix model",
            "itemtype": "attribute",
            "name": "cols",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2839,
            "description": "Fired when the matrix model size (number of rows or columns) is changed. \n         \n        matrix._.add(function matrixResized(src, pr, pc) {\n           ...\n        });",
            "itemtype": "event",
            "name": "matrixResized",
            "params": [
                {
                    "name": "src",
                    "description": "a matrix that triggers the event",
                    "type": "zebra.data.Matrix"
                },
                {
                    "name": "pr",
                    "description": "a previous number of rows",
                    "type": "Integer"
                },
                {
                    "name": "pc",
                    "description": "a previous number of columns",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2852,
            "description": "Fired when the matrix model cell has been updated. \n         \n         matrix._.add(function cellModified(src, row, col, old) {\n            ...\n         });",
            "itemtype": "event",
            "name": "cellModified",
            "params": [
                {
                    "name": "src",
                    "description": "a matrix that triggers the event",
                    "type": "zebra.data.Matrix"
                },
                {
                    "name": "row",
                    "description": "an updated row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "an updated column",
                    "type": "Integer"
                },
                {
                    "name": "old",
                    "description": "a previous cell value",
                    "type": "Object"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2867,
            "description": "Get a matrix model cell value at the specified row and column",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "row",
                    "description": "a cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a cell column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "matrix model cell value",
                "type": "Object"
            },
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2881,
            "description": "Set the specified by row and column cell value. If the specified row or column is greater than \nthe matrix model has the model size will be adjusted to new one.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "row",
                    "description": "a cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a cell column",
                    "type": "Integer"
                },
                {
                    "name": "obj",
                    "description": "a new cell value",
                    "type": "Object"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2901,
            "description": "Set the specified by index cell value. The index identifies cell starting from [0,0] cell till [rows,columns]. \nIf the index is greater than size of model the model size will be adjusted to new one.",
            "itemtype": "method",
            "name": "puti",
            "params": [
                {
                    "name": "i",
                    "description": "a cell row",
                    "type": "Integer"
                },
                {
                    "name": "obj",
                    "description": "a new cell value",
                    "type": "Object"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2913,
            "description": "Set the given number of rows and columns the model has to have.",
            "itemtype": "method",
            "name": "setRowsCols",
            "params": [
                {
                    "name": "rows",
                    "description": "a new number of rows",
                    "type": "Integer"
                },
                {
                    "name": "cols",
                    "description": "a new number of columns",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2929,
            "description": "Reallocate the matrix model space with the new number of rows and columns",
            "itemtype": "method",
            "name": "rellocate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "r",
                    "description": "a new number of rows",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a new number of columns",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2942,
            "description": "Set the given number of rows the model has to have.",
            "itemtype": "method",
            "name": "setRows",
            "params": [
                {
                    "name": "rows",
                    "description": "a new number of rows",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2949,
            "description": "Set the given number of columns the model has to have.",
            "itemtype": "method",
            "name": "setCols",
            "params": [
                {
                    "name": "cols",
                    "description": "a new number of columns",
                    "type": "Integer"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2956,
            "description": "Remove specified number of rows from the model starting from the given row.",
            "itemtype": "method",
            "name": "removeRows",
            "params": [
                {
                    "name": "begrow",
                    "description": "a start row",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of rows to be removed",
                    "type": "Interger"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 2977,
            "description": "Remove specified number of columns from the model starting from the given column.",
            "itemtype": "method",
            "name": "removeCols",
            "params": [
                {
                    "name": "begcol",
                    "description": "a start column",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of columns to be removed",
                    "type": "Interger"
                }
            ],
            "class": "zebra.data.Matrix",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3016,
            "class": "zebra.io.ID()",
            "module": "data"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3034,
            "description": "Generate UUID of the given length",
            "params": [
                {
                    "name": "size",
                    "description": "the generated UUID length. The default size is 16 characters.",
                    "type": "Ineteger",
                    "optional": true
                }
            ],
            "return": {
                "description": "an UUID",
                "type": "String"
            },
            "itemtype": "method",
            "name": "ID",
            "class": "zebra.io.ID()",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3059,
            "description": "Encode the given string into base64",
            "params": [
                {
                    "name": "input",
                    "description": "a string to be encoded",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "b64encode",
            "class": "zebra.io.b64encode()",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3092,
            "description": "Decode the base64 encoded string",
            "params": [
                {
                    "name": "input",
                    "description": "base64 encoded string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a string",
                "type": "String"
            },
            "itemtype": "method",
            "name": "b64decode",
            "class": "zebra.io.b64decode()",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3186,
            "description": "Append the given parameters to a query string of the specified URL",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "a dictionary of parameters to be appended to \nthe URL query string",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a new URL",
                "type": "String"
            },
            "static": 1,
            "itemtype": "method",
            "name": "append",
            "class": "zebra.io.QS",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3199,
            "description": "Fetch and parse query string of the given URL",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a parsed query string as a dictionary of parameters",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "class": "zebra.io.QS",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3215,
            "description": "Convert the given dictionary of parameters to a query string.",
            "params": [
                {
                    "name": "obj",
                    "description": "a dictionary of parameters",
                    "type": "Object"
                },
                {
                    "name": "encode",
                    "description": "say if the parameters values have to be \nencoded",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a query string built from parameters list",
                "type": "String"
            },
            "static": 1,
            "itemtype": "method",
            "name": "toQS",
            "class": "zebra.io.QS",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3325,
            "description": "Perform HTTP GET request .",
            "return": {
                "description": "a result of the HTTP GET request",
                "type": "String"
            },
            "itemtype": "method",
            "name": "GET",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3334,
            "description": "Perform HTTP GET request asynchronously.",
            "params": [
                {
                    "name": "f",
                    "description": "a callback function that is called when the HTTP GET \nrequest is done. The method gets a response string as the first argument \nand the original request object as the second argument.\n       \n       zebra.io.HTTP(\"google.com\").GET(function(result, request) {\n           // handle HTTP GET response\n           ...\n       });",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "GET",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3351,
            "description": "Perform HTTP GET request synchronously or asynchronously with the given \nquery parameters.",
            "params": [
                {
                    "name": "d",
                    "description": "a dictionary of query parameters",
                    "type": "Object"
                },
                {
                    "name": "f",
                    "description": "a callback function that is called when the HTTP GET \nrequest is done. The method gets a response string as the first argument \nand the original request object as the second argument.\n   \n       // synchronous HTTP GET request with the number of\n       // query parameters\n       var result = zebra.io.HTTP(\"google.com\").GET({\n           param1: \"var1\",\n           param3: \"var2\",\n           param3: \"var3\"\n       });",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "GET",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3374,
            "description": "Perform synchronously HTTP POST request. No any data is sent with the POST request.",
            "return": {
                "description": "a result of HTTP POST request",
                "type": "String"
            },
            "itemtype": "method",
            "name": "POST",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3383,
            "description": "Perform HTTP POST request asynchronously with no parameters or synchronously \nwith the given parameters list.",
            "params": [
                {
                    "name": "d",
                    "description": "a callback function that is called when HTTP POST \nrequest is done. The method gets a response string as the first argument \nand the original request object as the second argument:\n       \n       // asynchronously send POST\n       zebra.io.HTTP(\"google.com\").POST(function(result, request) {\n           // handle HTTP GET response\n           ...\n       });\n\nOr you can pass a number of parameters to be sent synchronously by \nHTTP POST request: \n\n       // send parameters synchronously by HTTP POST request\n       zebra.io.HTTP(\"google.com\").POST({\n           param1: \"val1\",\n           param2: \"val3\",\n           param3: \"val3\" \n       });",
                    "type": "Function|Object"
                }
            ],
            "itemtype": "method",
            "name": "POST",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3413,
            "description": "Perform HTTP POST request synchronously or asynchronously with the given \ndata to be sent.",
            "params": [
                {
                    "name": "d",
                    "description": "a data to be sent by HTTP POST request",
                    "type": "String"
                },
                {
                    "name": "f",
                    "description": "a callback function that is called when HTTP POST \nrequest is done. The method gets a response string as the first argument \nand the original request object as the second argument. If the callback\nis null the POST request will be done synchronously. The method gets a \nresponse string as the first argument and the original request object \nas the second argument.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "POST",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3429,
            "description": "Universal HTTP request method that can be used to generate \na HTTP request with any HTTP method to the given URL with \nthe given data to be sent asynchronously or synchronously",
            "params": [
                {
                    "name": "method",
                    "description": "an HTTP method (GET,POST,DELETE,PUT, etc)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "a data to be sent to the given URL",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "a callback method to be defined \nif the HTTP request has to be sent asynchronously.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "SEND",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3463,
            "description": "Called every time an error in a HTTP request has happened",
            "params": [
                {
                    "name": "r",
                    "description": "an original request object",
                    "type": "HttpRequest"
                },
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "httpError",
            "class": "zebra.io.HTTP",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3476,
            "description": "Shortcut method to perform asynchronous or synchronous HTTP GET requests.\n\n       // synchronous HTTP GET call\n       var res = zebra.ui.GET(\"http://test.com\");\n\n       // asynchronous HTTP GET call\n       zebra.ui.GET(\"http://test.com\", function(res, request) {\n           // handle result\n           ...\n       });\n\n       // synchronous HTTP GET call with query parameters\n       var res = zebra.ui.GET(\"http://test.com\", {\n           param1 : \"var1\",\n           param1 : \"var2\",\n           param1 : \"var3\"\n       });",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "parameters",
                    "description": "a dictionary of query parameters",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "a callback function that is called \nwhen the GET request is completed. Pass it if to perform request\nasynchronously",
                    "type": "Funcion",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "GET",
            "class": "zebra.io.GET()",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3508,
            "description": "Shortcut method to perform asynchronous or synchronous HTTP POST requests.\n\n       // synchronous HTTP POST call\n       var res = zebra.ui.POST(\"http://test.com\");\n\n       // asynchronous HTTP POST call\n       zebra.ui.POST(\"http://test.com\", function(res, request) {\n           // handle result\n           ...\n       });\n\n       // synchronous HTTP POST call with query parameters\n       var res = zebra.ui.POST(\"http://test.com\", {\n           param1 : \"var1\",\n           param1 : \"var2\",\n           param1 : \"var3\"\n       });\n\n       // synchronous HTTP POST call with data\n       var res = zebra.ui.POST(\"http://test.com\", \"data\");\n\n       // asynchronous HTTP POST call with data\n       zebra.ui.POST(\"http://test.com\", \"data\", function(res, request) {\n           // handle result\n       });",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "parameters",
                    "description": "a dictionary of query parameters",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "a callback function that is called \nwhen the GET request is completed. Pass it if to perform request\nasynchronously",
                    "type": "Funcion",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "POST",
            "class": "zebra.io.POST()",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3705,
            "description": "Remote service url",
            "itemtype": "attribute",
            "name": "url",
            "readonly": "",
            "type": "{String}",
            "class": "zebra.io.Service",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3714,
            "description": "Remote service methods names",
            "itemtype": "attribute",
            "name": "methods",
            "readonly": "",
            "type": "{Array}",
            "class": "zebra.io.Service",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3738,
            "description": "Transforms the given remote method execution with the specified parameters\nto service specific protocol.",
            "params": [
                {
                    "name": "name",
                    "description": "a remote method name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "an passed to the remote method arguments",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a remote service specific encoded string",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "encode",
            "class": "zebra.io.Service",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3748,
            "description": "Transforms the given remote method response to a JavaScript \nobject.",
            "params": [
                {
                    "name": "name",
                    "description": "a remote method name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a result of the remote method calling as a JavaScript \nobject",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "decode",
            "class": "zebra.io.Service",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3758,
            "description": "Send the given data to the given url and return a response. Callback \nfunction can be passed for asynchronous result handling.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "a data to be send",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "a callback function",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a result",
                "type": "String"
            },
            "itemtype": "method",
            "name": "send",
            "class": "zebra.io.Service",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3958,
            "description": "Shortcut to call the specified method of a XML-RPC service.",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "a method name",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "invoke",
            "class": "zebra.io.XRPC.invoke()",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3969,
            "description": "Shortcut to call the specified method of a JSON-RPC service.",
            "params": [
                {
                    "name": "url",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "a method name",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "invoke",
            "class": "zebra.io.JRPC.invoke()",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 3980,
            "class": "zebra.layout.Layout",
            "module": "io"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4024,
            "description": "Calculate preferred size of the given component",
            "params": [
                {
                    "name": "t",
                    "description": "a target layoutable component",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "calcPreferredSize",
            "class": "zebra.layout.Layout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4030,
            "description": "Layout children components of the specified layoutable target component",
            "params": [
                {
                    "name": "t",
                    "description": "a target layoutable component",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "doLayout",
            "class": "zebra.layout.Layout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4055,
            "description": "Find a direct children element for the given children component \nand the specified parent component",
            "params": [
                {
                    "name": "parent",
                    "description": "a parent component",
                    "type": "zebra.layout.Layoutable"
                },
                {
                    "name": "child",
                    "description": "a children component",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a direct children component",
                "type": "zebra.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "getDirectChild",
            "class": "zebra.layout.getDirectChild()",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4069,
            "description": "Find a direct component located at the given location of the specified \nparent component and the specified parent component",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate relatively to the parent component",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate relatively to the parent component",
                    "type": "Integer"
                },
                {
                    "name": "parent",
                    "description": "a parent component",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "return": {
                "description": "an index of direct children component \nor -1 if no a children component can be found",
                "type": "zebra.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "getDirectAt",
            "class": "zebra.layout.getDirectAt()",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4088,
            "description": "Get a top (the highest in component hierarchy) parent component \nof the given component",
            "params": [
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a top parent component",
                "type": "zebra.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "getTopParent",
            "class": "zebra.layout.getTopParent()",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4101,
            "description": "Translate the given relative to the specified component location \nin an absolute location. Absolute location is location relatively \nto the top parent component of the specified component.",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate relatively  to the given component",
                    "type": "Inetger",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "a y coordinate relatively  to the given component",
                    "type": "Inetger",
                    "optional": true
                },
                {
                    "name": "c",
                    "description": "a component",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "return": {
                "description": "an absolute location of the given location of the specified \nUI component. First element of the result array is a x coordinate and \nsecond is a y coordinate.",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getAbsLocation",
            "class": "zebra.layout.getAbsLocation()",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4183,
            "description": "x coordinate",
            "itemtype": "attribute",
            "name": "x",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4191,
            "description": "y coordinate",
            "itemtype": "attribute",
            "name": "y",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4199,
            "description": "Width of rectangular area",
            "itemtype": "attribute",
            "name": "width",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4207,
            "description": "Height of rectangular area",
            "itemtype": "attribute",
            "name": "height",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4215,
            "description": "Indicate a layoutable component visibility",
            "itemtype": "attribute",
            "name": "isVisible",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4223,
            "description": "Indicate a layoutable component validity",
            "itemtype": "attribute",
            "name": "isValid",
            "default": "false",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4231,
            "description": "Reference to a parent layoutable component",
            "itemtype": "attribute",
            "name": "parent",
            "default": "null",
            "readonly": "",
            "type": "{zebra.layout.Layoutable}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4239,
            "description": "Layout manager that is used to order children layoutable components",
            "itemtype": "attribute",
            "name": "layout",
            "default": "itself",
            "readonly": "",
            "type": "{Layout}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4252,
            "description": "The component layout constraints. The constraints is specific to \nthe parent component layout manager value that customizes the \nchildren component layouting on the parent component.",
            "itemtype": "attribute",
            "name": "constraints",
            "default": "null",
            "type": "{Object}",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4263,
            "description": "Find a first children component that satisfies the passed path expression.",
            "params": [
                {
                    "name": "path",
                    "description": "path expression. Path expression is simplified form \nof XPath-like expression:\n        \n       \"/Panel\"  - find first children that is an instance of zebra.ui.Panel\n       \"/Panel[@id='top']\" - find first children that is an instance of zebra.ui.Panel with \"id\" attribute that equals \"top\"\n       \"//Panel\"  - find first children that is an instance of zebra.ui.Panel recursively",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "find",
            "return": {
                "description": "found children component or null if \nno children component can be found",
                "type": "zebra.layout.Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4290,
            "description": "Find children components that satisfy the passed path expression.",
            "params": [
                {
                    "name": "path",
                    "description": "path expression. Path expression is \nsimplified form of XPath-like expression:\n        \n        \"/Panel\"  - find first children that is an instance of zebra.ui.Panel\n        \"/Panel[@id='top']\" - find first children that is an instance of zebra.ui.Panel with \"id\" attribute that equals \"top\"\n        \"//Panel\"  - find first children that is an instance of zebra.ui.Panel recursively",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function that is called every time a \nnew children component has been found.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "findAll",
            "return": {
                "description": "return array of found children components if \npassed function has not been passed",
                "type": "Array"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4321,
            "description": "Validate the component metrics. The method is called as \na one step of the component validation procedure. The \nmethod causes \"recalc\" method execution if the method\nhas been implemented and the component is in invalid\nstate. It is supposed the \"recalc\" method has to be\nimplemented by a component as safe place where the \ncomponent metrics can be calculated. Component \nmetrics is individual for the given component \nproperties that has influence to the component \npreferred size value. In many cases the properties\ncalculation has to be minimized what can be done\nby moving the calculation in \"recalc\" method",
            "itemtype": "method",
            "name": "validateMetric",
            "access": "protected",
            "tagname": "",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4344,
            "description": "By default there is no any implementation of \"recalc\" method\nin the layoutable component. In other words the method doesn't\nexist. Developer should implement the method if the need a proper\nand efficient place  to calculate component properties that \nhave influence to the component preferred size. The \"recalc\"\nmethod is called only when it is really necessary to compute\nthe component metrics.",
            "itemtype": "method",
            "name": "recalc",
            "access": "protected",
            "tagname": "",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4356,
            "description": "Invalidate the component layout. Layout invalidation means the \ncomponent children components have to be placed with the component\nlayout manager. Layout invalidation causes a parent component \nlayout is also invalidated.",
            "itemtype": "method",
            "name": "invalidateLayout",
            "access": "protected",
            "tagname": "",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4369,
            "description": "Invalidate component layout and metrics.",
            "itemtype": "method",
            "name": "invalidate",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4379,
            "description": "Force validation of the component metrics and layout if it is not valid",
            "itemtype": "method",
            "name": "validate",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4395,
            "description": "The method can be implemented to be informed every time \nthe component lay outs its children components",
            "itemtype": "method",
            "name": "laidout",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4401,
            "description": "Get preferred size. The preferred size includes  top, left, \nbottom and right paddings and \nthe size the component wants to have",
            "itemtype": "method",
            "name": "getPreferredSize",
            "return": {
                "description": "return size object the component wants to \nhave as the following structure:\n               \n        {width:{Integer}, height:{Integer}} object",
                "type": "Object"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4427,
            "description": "Get top padding.",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "top padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4434,
            "description": "Get left padding.",
            "itemtype": "method",
            "name": "getLeft",
            "return": {
                "description": "left padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4441,
            "description": "Get bottom padding.",
            "itemtype": "method",
            "name": "getBottom",
            "return": {
                "description": "bottom padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4448,
            "description": "Get right padding.",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "right padding in pixel",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4455,
            "description": "Set the parent component.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "a parent component",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "setParent",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4469,
            "description": "Set the given layout manager that is used to place \nchildren component. Layout manager is simple class \nthat defines number of rules concerning the way \nchildren components have to be ordered on its parent \nsurface.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "m",
                    "description": "a layout manager",
                    "type": "zebra.ui.Layout"
                }
            ],
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4490,
            "description": "By default layoutbable component itself implements \nlayout manager to order its children components.\nThis method implementation does nothing, so children \ncomponent will placed according locations and sizes they \nhave set.",
            "itemtype": "method",
            "name": "doLayout",
            "access": "private",
            "tagname": "",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4501,
            "description": "Detect index of a children component.",
            "params": [
                {
                    "name": "c",
                    "description": "a children component",
                    "type": "zebra.ui.Layoutbale"
                }
            ],
            "itemtype": "method",
            "name": "indexOf",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4509,
            "description": "Insert the new children component at the given index with the specified layout constraints. \nThe passed constraints can be set via a layoutable component that is inserted. Just \nset \"constraints\" property of in inserted component.",
            "params": [
                {
                    "name": "i",
                    "description": "an index at that the new children component has to be inserted",
                    "type": "Integer"
                },
                {
                    "name": "constr",
                    "description": "layout constraints of the new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children layoutable component to be added",
                    "type": "zebra.layout.Layoutbale"
                }
            ],
            "return": {
                "description": "an inserted children layoutable component",
                "type": "zebra.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "insert",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4532,
            "description": "The method can be implemented to be informed every time a new component \nhas been inserted into the component",
            "params": [
                {
                    "name": "i",
                    "description": "an index at that the new children component has been inserted",
                    "type": "Integer"
                },
                {
                    "name": "constr",
                    "description": "layout constraints of the new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children layoutable component that has \nbeen added",
                    "type": "zebra.layout.Layoutbale"
                }
            ],
            "itemtype": "method",
            "name": "kidAdded",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4542,
            "description": "Set the layoutable component location. Location is x, y coordinates relatively to \na parent component",
            "params": [
                {
                    "name": "xx",
                    "description": "x coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "yy",
                    "description": "y coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLocation",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4558,
            "description": "The method can be implemented to be informed every time the component\nhas been moved",
            "params": [
                {
                    "name": "px",
                    "description": "x previous coordinate of moved children component",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "y previous coordinate of moved children component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "relocated",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4567,
            "description": "Set the layoutable component bounds. Bounds defines the component location and size.",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate relatively to the layoutable component parent",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setBounds",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4580,
            "description": "Set the layoutable component size.",
            "params": [
                {
                    "name": "w",
                    "description": "a width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setSize",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4596,
            "description": "The method can be implemented to be informed every time the component\nhas been resized",
            "params": [
                {
                    "name": "w",
                    "description": "a previous width of the component",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a previous height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "resized",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4605,
            "description": "Get a children layoutable component by the given constraints.",
            "params": [
                {
                    "name": "c",
                    "description": "a constraints",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "return": {
                "description": "a children component",
                "type": "zebra.layout.Layoutable"
            },
            "itemtype": "method",
            "name": "getByConstraints",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4621,
            "description": "Remove the given children component.",
            "params": [
                {
                    "name": "c",
                    "description": "a children component to be removed",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "a removed children component",
                "type": "zebra.layout.Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4631,
            "description": "Remove a children component at the specified position.",
            "params": [
                {
                    "name": "i",
                    "description": "a children component index at which it has to be removed",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "removeAt",
            "return": {
                "description": "a removed children component",
                "type": "zebra.layout.Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4647,
            "description": "The method can be implemented to be informed every time a children component\nhas been removed",
            "params": [
                {
                    "name": "i",
                    "description": "a children component index at which it has been removed",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a children component that has been removed",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "kidRemoved",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4656,
            "description": "Set the specified preferred size the component has to have. \nComponent preferred size is important thing that is widely \nused to layout the component. Usually the preferred \nsize is calculated by a concrete component basing on \nits metrics. For instance, label component calculates its\npreferred size basing on text size. But if it is required  \nthe component preferred size can be fixed with the desired \nvalue.",
            "params": [
                {
                    "name": "w",
                    "description": "a preferred width. Pass \"-1\" as the \nargument value to not set preferred width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a preferred height. Pass \"-1\" as the \nargument value to not set preferred height",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPreferredSize",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4679,
            "description": "Replace a children component with the specified constraints \nwith the given new children component",
            "params": [
                {
                    "name": "constr",
                    "description": "a constraints of a children \ncomponent to be replaced with a new one",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children \ncomponent to be set",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "set",
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4694,
            "description": "Add the new children component with the given constraints",
            "params": [
                {
                    "name": "constr",
                    "description": "a constrains of a new children component",
                    "type": "Object"
                },
                {
                    "name": "d",
                    "description": "a new children component to be added",
                    "type": "zebra.layout.Layoutable"
                }
            ],
            "itemtype": "method",
            "name": "add",
            "return": {
                "description": "added layoutable component",
                "type": "zebra.layout.Layoutable"
            },
            "class": "zebra.layout.Layoutable",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4772,
            "description": "Horizontal gap (space between components)",
            "itemtype": "attribute",
            "name": "hgap",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.BorderLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 4780,
            "description": "Vertical gap (space between components)",
            "itemtype": "attribute",
            "name": "vgap",
            "default": "0",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.BorderLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5139,
            "description": "Horizontal list items alignment",
            "itemtype": "attribute",
            "name": "ax",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.layout.ListLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5147,
            "description": "Pixel gap between list items",
            "itemtype": "attribute",
            "name": "gap",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.layout.ListLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5223,
            "description": "Pixel gap between components",
            "itemtype": "attribute",
            "name": "gap",
            "readonly": "",
            "type": "{Ineteger}",
            "class": "zebra.layout.PercentLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5230,
            "description": "Direction the components have to be placed (vertically or horizontally)",
            "itemtype": "attribute",
            "name": "dir",
            "readonly": "",
            "type": "{Ineteger}",
            "class": "zebra.layout.PercentLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5315,
            "description": "Top cell padding",
            "itemtype": "attribute",
            "name": "top",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5322,
            "description": "Left cell padding",
            "itemtype": "attribute",
            "name": "left",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5329,
            "description": "Right cell padding",
            "itemtype": "attribute",
            "name": "right",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5336,
            "description": "Bottom cell padding",
            "itemtype": "attribute",
            "name": "bottom",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5343,
            "description": "Horizontal alignment",
            "itemtype": "attribute",
            "name": "ax",
            "type": "{Integer}",
            "default": "zebra.layout.STRETCH",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5350,
            "description": "Vertical alignment",
            "itemtype": "attribute",
            "name": "ay",
            "type": "{Integer}",
            "default": "zebra.layout.STRETCH",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5368,
            "description": "Set all four paddings (top, left, bottom, right) to the given value",
            "params": [
                {
                    "name": "p",
                    "description": "a padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPadding",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5377,
            "description": "Set top, left, bottom, right paddings",
            "params": [
                {
                    "name": "t",
                    "description": "a top padding",
                    "type": "Integer"
                },
                {
                    "name": "l",
                    "description": "a left padding",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a bottom padding",
                    "type": "Integer"
                },
                {
                    "name": "r",
                    "description": "a right padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPaddings",
            "class": "zebra.layout.Constraints",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5432,
            "description": "Number of virtual rows to place children components",
            "itemtype": "attribute",
            "name": "rows",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.GridLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5440,
            "description": "Number of virtual columns to place children components",
            "itemtype": "attribute",
            "name": "cols",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.layout.GridLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5465,
            "description": "Calculate the given row height",
            "params": [
                {
                    "name": "row",
                    "description": "a row",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "the target container",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a size of the row",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "calcRowSize",
            "access": "protected",
            "tagname": "",
            "class": "zebra.layout.GridLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5486,
            "description": "Calculate the given column width",
            "params": [
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "the target container",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a size of the column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "calcColSize",
            "access": "protected",
            "tagname": "",
            "class": "zebra.layout.GridLayout",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5560,
            "class": "zebra.ui.View",
            "module": "layout"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5676,
            "description": "Get left gap. The method informs UI component that uses the view as\na border view how much space left side of the border occupies",
            "return": {
                "description": "a left gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLeft",
            "class": "zebra.ui.View",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5683,
            "description": "Get right gap. The method informs UI component that uses the view as\na border view how much space right side of the border occupies",
            "return": {
                "description": "a right gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getRight",
            "class": "zebra.ui.View",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5690,
            "description": "Get top gap. The method informs UI component that uses the view as\na border view how much space top side of the border occupies",
            "return": {
                "description": "a top gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getTop",
            "class": "zebra.ui.View",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5697,
            "description": "Get bottom gap. The method informs UI component that uses the view as\na border view how much space bottom side of the border occupies",
            "return": {
                "description": "a bottom gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getBottom",
            "class": "zebra.ui.View",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5707,
            "description": "Return preferred size the view desires to have",
            "itemtype": "method",
            "name": "getPreferredSize",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "zebra.ui.View",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5714,
            "description": "The method is called to render the decorative element on the \ngiven surface of the specified UI component",
            "params": [
                {
                    "name": "g",
                    "description": "graphical context",
                    "type": "Canvas 2D context"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "required width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "required height",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "an UI component on which the view \nelement has to be drawn",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "paint",
            "class": "zebra.ui.View",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5744,
            "description": "Target component to be visualized",
            "itemtype": "attribute",
            "name": "target",
            "default": "null",
            "readonly": "",
            "type": "{Object}",
            "class": "zebra.ui.Render",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5756,
            "description": "Set the given target object. The method triggers \n\"targetWasChanged(oldTarget, newTarget)\" execution if \nthe method is declared. Implement the method if you need \nto track a target object updating.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "o",
                    "description": "a target object to be visualized",
                    "type": "Object"
                }
            ],
            "class": "zebra.ui.Render",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5783,
            "description": "Brightest border line color",
            "itemtype": "attribute",
            "name": "brightest",
            "readonly": "",
            "type": "{String}",
            "default": "\"white\"",
            "class": "zebra.ui.Raised",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5791,
            "description": "Middle border line color",
            "itemtype": "attribute",
            "name": "middle",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebra.ui.Raised",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5832,
            "description": "Brightest border line color",
            "itemtype": "attribute",
            "name": "brightest",
            "readonly": "",
            "type": "{String}",
            "default": "\"white\"",
            "class": "zebra.ui.Sunken",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5840,
            "description": "Middle border line color",
            "itemtype": "attribute",
            "name": "middle",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebra.ui.Sunken",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5848,
            "description": "Darkest border line color",
            "itemtype": "attribute",
            "name": "darkest",
            "readonly": "",
            "type": "{String}",
            "default": "\"black\"",
            "class": "zebra.ui.Sunken",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5889,
            "description": "Brightest border line color",
            "itemtype": "attribute",
            "name": "brightest",
            "readonly": "",
            "type": "{String}",
            "default": "\"white\"",
            "class": "zebra.ui.Etched",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5897,
            "description": "Middle border line color",
            "itemtype": "attribute",
            "name": "middle",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebra.ui.Etched",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5935,
            "itemtype": "attribute",
            "name": "color",
            "readonly": "",
            "type": "{String}",
            "default": "\"black\"",
            "class": "zebra.ui.Dotted",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5965,
            "description": "Border color",
            "itemtype": "attribute",
            "name": "color",
            "readonly": "",
            "type": "{String}",
            "default": "\"gray\"",
            "class": "zebra.ui.Border",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5973,
            "description": "Border line width",
            "itemtype": "attribute",
            "name": "width",
            "readonly": "",
            "type": "{Integer}",
            "default": "1",
            "class": "zebra.ui.Border",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 5981,
            "description": "Border radius",
            "itemtype": "attribute",
            "name": "radius",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.ui.Border",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6005,
            "description": "Defines border outline for the given 2D Canvas context",
            "params": [
                {
                    "name": "g",
                    "description": "",
                    "type": "2D Canvas context"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "required width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "required height",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "target UI component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "outline",
            "return": {
                "description": "true if the outline has to be applied as an UI component shape",
                "type": "Boolean"
            },
            "class": "zebra.ui.Border",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6054,
            "description": "Border color",
            "itemtype": "attribute",
            "name": "color",
            "readonly": "",
            "type": "{String}",
            "default": "null",
            "class": "zebra.ui.RoundBorder",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6062,
            "description": "Border width",
            "itemtype": "attribute",
            "name": "width",
            "readonly": "",
            "type": "{Integer}",
            "default": "1",
            "class": "zebra.ui.RoundBorder",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6112,
            "description": "Gradient orientation: vertical or horizontal",
            "itemtype": "attribute",
            "name": "orientation",
            "readonly": "",
            "default": "zebra.layout.VERTICAL",
            "type": "{Integer}",
            "class": "zebra.ui.Gradient",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6199,
            "description": "A x coordinate of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "x",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.ui.Picture",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6207,
            "description": "A y coordinate of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "y",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.ui.Picture",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6215,
            "description": "A width  of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "width",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.ui.Picture",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6223,
            "description": "A height  of the image part that has to be rendered",
            "itemtype": "attribute",
            "name": "height",
            "readonly": "",
            "type": "{Integer}",
            "default": "0",
            "class": "zebra.ui.Picture",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6422,
            "description": "Activate the given view from the given set.",
            "params": [
                {
                    "name": "id",
                    "description": "a key of a view from the set to be activated",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "activate",
            "class": "zebra.ui.ViewSet",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6461,
            "description": "Views set",
            "itemtype": "attribute",
            "name": "views",
            "type": "Object",
            "default": "{}",
            "readonly": "",
            "class": "zebra.ui.ViewSet",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6470,
            "description": "Active in the set view",
            "itemtype": "attribute",
            "name": "activeView",
            "type": "View",
            "default": "null",
            "readonly": "",
            "class": "zebra.ui.ViewSet",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6624,
            "description": "Height of the font",
            "itemtype": "attribute",
            "name": "height",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.Font",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6641,
            "description": "Ascent of the font",
            "itemtype": "attribute",
            "name": "ascent",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.Font",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6650,
            "description": "Calculate the given string width in pixels",
            "params": [
                {
                    "name": "s",
                    "description": "a string whose width has to be computed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a string size in pixels",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "stringWidth",
            "class": "zebra.ui.Font",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6663,
            "description": "Calculate the specified substring width",
            "params": [
                {
                    "name": "s",
                    "description": "a string",
                    "type": "String"
                },
                {
                    "name": "off",
                    "description": "fist character index",
                    "type": "Integer"
                },
                {
                    "name": "len",
                    "description": "length of substring",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a substring size in pixels",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "charsWidth",
            "class": "zebra.ui.Font",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6677,
            "description": "Returns CSS font representation",
            "return": {
                "description": "a CSS representation of the given Font",
                "type": "String"
            },
            "itemtype": "method",
            "name": "toString",
            "class": "zebra.ui.Font",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6710,
            "description": "The method is called when a mouse button has been pressed or \na finger has touched a touch screen",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mousePressed",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6718,
            "description": "The method is called when a mouse button has been released or \na finger has untouched a touch screen",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseReleased",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6726,
            "description": "The method is called when a mouse cursor has been moved with \nno one mouse button has been pressed",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseMoved",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6734,
            "description": "The method is called when a mouse cursor entered the given component",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseEntered",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6741,
            "description": "The method is called when a mouse cursor exited the given component",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseExited",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6748,
            "description": "The method is called when a mouse button has been clicked. Click events\nare generated only if no one mouse moved or drag events has been generated\nin between mouse pressed -> mouse released events sequence.",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseClicked",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6757,
            "description": "The method is called when a mouse cursor has been moved when a mouse button \nhas been pressed. Or when a finger has been moved over a touch screen.",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseDragged",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6765,
            "description": "The method is called when a mouse cursor has been moved first time when a mouse button \nhas been pressed. Or when a finger has been moved first time over a touch screen.",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseDragStarted",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6773,
            "description": "The method is called when a mouse cursor has been moved last time when a mouse button \nhas been pressed. Or when a finger has been moved last time over a touch screen.",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a mouse event",
                    "type": "zebra.ui.MouseEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseDragEnded",
            "class": "zebra.ui.MouseListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6788,
            "description": "The method is called when a component has gained focus",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "an input event",
                    "type": "zebra.ui.InputEvent"
                }
            ],
            "itemtype": "method",
            "name": "focusGained",
            "class": "zebra.ui.FocusListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6795,
            "description": "The method is called when a component has lost focus",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "an input event",
                    "type": "zebra.ui.InputEvent"
                }
            ],
            "itemtype": "method",
            "name": "focusLost",
            "class": "zebra.ui.FocusListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6809,
            "description": "The method is called when a key has been pressed",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebra.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebra.ui.KeyListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6816,
            "description": "The method is called when a key has been typed",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebra.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyTyped",
            "class": "zebra.ui.KeyListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6823,
            "description": "The method is called when a key has been released",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebra.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyReleased",
            "class": "zebra.ui.KeyListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6830,
            "description": "The method is called when a key has been pressed",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebra.ui.KeyEvent"
                }
            ],
            "itemtype": "method",
            "name": "keyPressed",
            "class": "zebra.ui.KeyListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6843,
            "description": "The method is called by cursor manager to ask which cursor type has to be set for the \nat the given location of the given UI component",
            "optional": 1,
            "params": [
                {
                    "name": "c",
                    "description": "an UI component where a mouse cursor is on",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "x",
                    "description": "a x coordinate relevantly the component where a mouse cursor is on",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate relevantly the component where a mouse cursor is on",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a mouse cursor type",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getCursorType",
            "is_interface": 1,
            "class": "zebra.ui.Cursorable",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6863,
            "description": "The method is called to ask if the given children UI component \nhas to be events transparent",
            "optional": 1,
            "params": [
                {
                    "name": "c",
                    "description": "a children UI component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "true if the given children component has \nto be events transparent",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "catchInput",
            "class": "zebra.ui.Composite",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6880,
            "description": "The method is called when an input event has occurred in the children component",
            "optional": 1,
            "params": [
                {
                    "name": "e",
                    "description": "an input event that has occurred in a children \nUI component",
                    "type": "zebra.ui.InputEvent"
                }
            ],
            "itemtype": "method",
            "name": "childInputEvent",
            "class": "zebra.ui.ChildrenListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6896,
            "description": "The method is called to ask return a string that has to be put into clipboard",
            "optional": 1,
            "return": {
                "description": "a string to copy in native clipboard",
                "type": "String"
            },
            "itemtype": "method",
            "name": "copy",
            "class": "zebra.ui.CopyCutPaste",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6903,
            "description": "The method is called to pass string from clipboard to a component \n\"CopyCutPaste\" interface implements",
            "optional": 1,
            "params": [
                {
                    "name": "s",
                    "description": "a string from native clipboard",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "paste",
            "class": "zebra.ui.CopyCutPaste",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6918,
            "description": "The method is called when a component has been re-sized",
            "optional": 1,
            "params": [
                {
                    "name": "c",
                    "description": "a component that has been sized",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "pw",
                    "description": "a previous width the sized component had",
                    "type": "Integer"
                },
                {
                    "name": "ph",
                    "description": "a previous height the sized component had",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "compSized",
            "class": "zebra.ui.ComponentListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6927,
            "description": "The method is called when a component has been re-located",
            "optional": 1,
            "params": [
                {
                    "name": "c",
                    "description": "a component that has been moved",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "px",
                    "description": "a previous x coordinate the moved component had",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a previous y coordinate the moved component had",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "compMoved",
            "class": "zebra.ui.ComponentListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6936,
            "description": "The method is called when a component enabled state has been updated",
            "optional": 1,
            "params": [
                {
                    "name": "c",
                    "description": "a component whose enabled state has been updated",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "compEnabled",
            "class": "zebra.ui.ComponentListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6943,
            "description": "The method is called when a component visibility state has been updated",
            "optional": 1,
            "params": [
                {
                    "name": "c",
                    "description": "a component whose visibility state has been updated",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "compShown",
            "class": "zebra.ui.ComponentListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6950,
            "description": "The method is called when a component has been inserted into another UI component",
            "optional": 1,
            "params": [
                {
                    "name": "p",
                    "description": "a parent component the component has been added",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "constr",
                    "description": "a layout constraints",
                    "type": "Object"
                },
                {
                    "name": "c",
                    "description": "a component that has been added",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "compAdded",
            "class": "zebra.ui.ComponentListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6959,
            "description": "The method is called when a component has been removed from its parent UI component",
            "optional": 1,
            "params": [
                {
                    "name": "p",
                    "description": "a parent component of the component that has been removed",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "c",
                    "description": "a component that has been removed",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "compRemoved",
            "class": "zebra.ui.ComponentListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 6998,
            "description": "Source of the input event",
            "itemtype": "attribute",
            "name": "source",
            "readonly": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.InputEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7006,
            "description": "Unique id of the input event",
            "itemtype": "attribute",
            "name": "ID",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.InputEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7014,
            "description": "Class id of the input event. It helps to differentiates \ninput events by a device it has been generated",
            "itemtype": "attribute",
            "name": "UID",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.InputEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7057,
            "description": "A code of a pressed key",
            "itemtype": "attribute",
            "name": "code",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.KeyEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7065,
            "description": "A bits mask of pressed meta keys (CTRL, ALT, etc)",
            "itemtype": "attribute",
            "name": "mask",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.KeyEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7073,
            "description": "A character of a typed key",
            "itemtype": "attribute",
            "name": "ch",
            "readonly": "",
            "type": "{String}",
            "class": "zebra.ui.KeyEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7082,
            "description": "Test if CTRL key is held",
            "return": {
                "description": "true if CTRL key is held",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isControlPressed",
            "class": "zebra.ui.KeyEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7091,
            "description": "Test if SHIFT key is held",
            "return": {
                "description": "true if SHIFT key is held",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isShiftPressed",
            "class": "zebra.ui.KeyEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7100,
            "description": "Test if ALT key is held",
            "return": {
                "description": "true if ALT key is held",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isAltPressed",
            "class": "zebra.ui.KeyEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7109,
            "description": "Test if command (windows) key is held",
            "return": {
                "description": "true if command key is held",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isCmdPressed",
            "class": "zebra.ui.KeyEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7175,
            "description": "Absolute mouse pointer x coordinate",
            "itemtype": "attribute",
            "name": "absX",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7182,
            "description": "Absolute mouse pointer y coordinate",
            "itemtype": "attribute",
            "name": "absY",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7189,
            "description": "Mouse pointer x coordinate (relatively to source UI component)",
            "itemtype": "attribute",
            "name": "x",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7196,
            "description": "Mouse pointer y coordinate (relatively to source UI component)",
            "itemtype": "attribute",
            "name": "y",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7203,
            "description": "Number of times a mouse button has been pressed",
            "itemtype": "attribute",
            "name": "clicks",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7210,
            "description": "Number of fingers on a touch screen",
            "itemtype": "attribute",
            "name": "touchCounter",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7217,
            "description": "A bits mask of a pressed mouse button",
            "itemtype": "attribute",
            "name": "mask",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7224,
            "description": "Reset the event properties with new values",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "a target component that triggers the event",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "id",
                    "description": "an unique id of the event",
                    "type": "Ineteger"
                },
                {
                    "name": "ax",
                    "description": "an absolute (relatively to a canvas where the target \ncomponent is hosted) x mouse cursor coordinate",
                    "type": "Ineteger"
                },
                {
                    "name": "ay",
                    "description": "an absolute (relatively to a canvas where the target \ncomponent is hosted) y mouse cursor coordinate",
                    "type": "Ineteger"
                },
                {
                    "name": "mask",
                    "description": "a pressed mouse buttons mask",
                    "type": "Ineteger"
                },
                {
                    "name": "clicks",
                    "description": "number of a button clicks",
                    "type": "Ineteger"
                }
            ],
            "itemtype": "method",
            "name": "reset",
            "class": "zebra.ui.MouseEvent",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7266,
            "description": "Find a zebra.ui.zCanvas where the given UI component is hosted",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "a zebra canvas",
                "type": "zebra.ui.zCanvas"
            },
            "itemtype": "method",
            "name": "findCanvas",
            "class": "zebra.ui.findCanvas()",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7509,
            "description": "Load an image by the given URL.",
            "params": [
                {
                    "name": "path",
                    "description": "an URL",
                    "type": "String"
                },
                {
                    "name": "ready",
                    "description": "a call back method to be notified when the \nimage has been completely loaded or failed. The method gets three parameters\n   \n   - an URL to the image\n   - boolean loading result. true means success\n   - an image that has been loaded \n\n           // load image\n           zebra.ui.loadImage(\"test.png\", function(path, result, image) {\n               if (result === false) {\n                   // handle error\n                   ...\n               }\n           });",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "an image",
                "type": "Image"
            },
            "itemtype": "method",
            "name": "loadImage",
            "class": "zebra.ui.loadImage()",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7574,
            "description": "UI component border view",
            "itemtype": "attribute",
            "name": "border",
            "default": "null",
            "readonly": "",
            "type": "{zebra.ui.View}",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7582,
            "description": "UI component background view",
            "itemtype": "attribute",
            "name": "bg",
            "default": "null",
            "readonly": "",
            "type": "{zebra.ui.View}",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7590,
            "description": "Implement the method to say if the UI component can hold focus",
            "return": {
                "description": "true if the component can have gain focus",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "canHaveFocus",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7598,
            "description": "UI component enabled state",
            "itemtype": "attribute",
            "name": "isEnabled",
            "default": "true",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7612,
            "description": "Setup UI component properties",
            "params": [
                {
                    "name": "p",
                    "description": "collection of properties to be applied",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "properties",
            "return": {
                "description": "the class instance itself",
                "type": "zebra.ui.Panel"
            },
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7633,
            "description": "Load content of the panel UI components from the specified JSON file.",
            "params": [
                {
                    "name": "jsonPath",
                    "description": "an URL to a JSON file that describes UI \nto be loaded into the panel",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "itemtype": "method",
            "name": "load",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7647,
            "description": "Get a children UI component that embeds the given point.",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a children UI component",
                "type": "Panel"
            },
            "itemtype": "method",
            "name": "getComponentAt",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7673,
            "description": "Shortcut method to invalidating the component \nand initiating the component repainting",
            "itemtype": "method",
            "name": "vrp",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7701,
            "description": "The method is implemented to be aware about a children component\ninsertion.",
            "params": [
                {
                    "name": "index",
                    "description": "an index at that a new children component \nhas been added",
                    "type": "Integer"
                },
                {
                    "name": "constr",
                    "description": "a layout constraints of an inserted component",
                    "type": "Object"
                },
                {
                    "name": "l",
                    "description": "a children component that has been inserted",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "kidAdded",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7716,
            "description": "The method is implemented to be aware about a children component\nremoval.",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a removed component",
                    "type": "Integer"
                },
                {
                    "name": "l",
                    "description": "a removed children component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "kidRemoved",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7728,
            "description": "The method is implemented to be aware the \ncomponent location updating",
            "params": [
                {
                    "name": "px",
                    "description": "a previous x coordinate of the component",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a previous y coordinate of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "relocated",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7739,
            "description": "The method is implemented to be aware the \ncomponent size updating",
            "params": [
                {
                    "name": "pw",
                    "description": "a previous width of the component",
                    "type": "Integer"
                },
                {
                    "name": "ph",
                    "description": "a previous height of the component",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "resized",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7750,
            "description": "Checks if the component has a focus",
            "return": {
                "description": "true if the component has focus",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "hasFocus",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7759,
            "description": "Force the given component to catch focus if the component is focusable.",
            "itemtype": "method",
            "name": "requestFocus",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7767,
            "description": "Force the given component to catch focus in the given timeout.",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout. The default value is 50",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "requestFocusIn",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7782,
            "description": "Set the UI component visibility",
            "params": [
                {
                    "name": "b",
                    "description": "a visibility state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setVisible",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7795,
            "description": "Set the UI component enabled state. Using this property an UI component \ncan be excluded from getting input events",
            "params": [
                {
                    "name": "b",
                    "description": "a enabled state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setEnabled",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7811,
            "description": "Set UI component top, left, bottom, right paddings. The paddings are \ngaps between component border and painted area.",
            "params": [
                {
                    "name": "top",
                    "description": "a top padding",
                    "type": "Integer"
                },
                {
                    "name": "left",
                    "description": "a left padding",
                    "type": "Integer"
                },
                {
                    "name": "bottom",
                    "description": "a bottom padding",
                    "type": "Integer"
                },
                {
                    "name": "right",
                    "description": "a right padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPaddings",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7832,
            "description": "Set the UI component top, right, left, bottom paddings to the same given value",
            "params": [
                {
                    "name": "v",
                    "description": "the value that will be set as top, right, left, bottom UI \ncomponent paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPadding",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7840,
            "description": "Set the border view",
            "params": [
                {
                    "name": "v",
                    "description": "a border view",
                    "type": "zebra.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setBorder",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7869,
            "description": "Set the background. Background can be a color string or a zebra.ui.View class \ninstance, or a function(g,x,y,w,h,c) that paints the background:\n       \n           // set background color\n           comp.setBackground(\"red\");\n\n           // set a picture as a component background\n           comp.setBackground(new zebra.ui.Picture(...));\n\n           // set a custom rendered background\n           comp.setBackground(function (g,x,y,w,h,target) {\n               // paint a component background here\n               g.setColor(\"blue\");\n               g.fillRect(x,y,w,h);\n               g.drawLine(...);\n               ...\n           });",
            "params": [
                {
                    "name": "v",
                    "description": "a background",
                    "type": "String|zebra.ui.View|Function"
                }
            ],
            "itemtype": "method",
            "name": "setBackground",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7902,
            "description": "Add the given children component or number of components to the given panel.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "children component of number of \ncomponents to be added. The parameter can be:\n\n   - Component\n   - Array of components\n   - Dictionary object where every element is a component to be added and the key of \n   the component is stored in the dictionary is considered as the component constraints",
                    "type": "zebra.ui.Panel|Array|Object"
                }
            ],
            "itemtype": "method",
            "name": "setKids",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7949,
            "description": "Called whenever the UI component gets or looses focus",
            "itemtype": "method",
            "name": "focused",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7964,
            "description": "Request the whole UI component or part of the UI component to be repainted",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y coordinate of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height of the component area to be repainted",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "repaint",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 7983,
            "description": "Remove all children UI components",
            "itemtype": "method",
            "name": "removeAll",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8005,
            "description": "Bring the UI component to front",
            "itemtype": "method",
            "name": "toFront",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8017,
            "description": "Send the UI component to back",
            "itemtype": "method",
            "name": "toBack",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8029,
            "description": "Set the UI component size to its preferred size",
            "return": {
                "description": "a preferred size applied to the component. \nThe structure of the returned object is the following:\n       \n           { width:{Integer}, height:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "toPreferredSize",
            "class": "zebra.ui.Panel",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8110,
            "description": "Id of the layer",
            "itemtype": "attribute",
            "name": "id",
            "type": "{String}",
            "readonly": "",
            "class": "zebra.ui.BaseLayer",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8153,
            "description": "Set the target view to be wrapped with the UI component",
            "params": [
                {
                    "name": "v",
                    "description": "a view",
                    "type": "zebra.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setView",
            "class": "zebra.ui.ViewPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8164,
            "description": "Reference to a view that the component visualize",
            "itemtype": "attribute",
            "name": "view",
            "type": "{zebra.ui.View}",
            "default": "undefined",
            "readonly": "",
            "class": "zebra.ui.ViewPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8177,
            "description": "Override the parent method to calculate preferred size\nbasing on a target view.",
            "params": [
                {
                    "name": "t",
                    "description": "[description]",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "return a target view preferred size if it is defined.\nThe returned structure is the following:\n             { width: {Integer}, height:{Integer} }",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "calcPreferredSize",
            "class": "zebra.ui.ViewPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8209,
            "description": "Set image to be rendered in the UI component",
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "img",
                    "description": "a path or direct reference to an image. \nIf the passed parameter is string it considered as path to an image. \nIn this case the image will be loaded using the passed path",
                    "type": "String|Image"
                }
            ],
            "class": "zebra.ui.ImagePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8260,
            "description": "Ask for repainting of the given rectangular area of the specified UI component. This method\ndoesn't do repainting immediately. It calculates the dirty area of the whole canvas and then \nschedule repainting. Real repainting happens when all repaint method executions are satisfied.",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component that requests repainting",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "x",
                    "description": "x coordinate of top-left corner of a rectangular area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y coordinate of top-left corner of a rectangular area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "w width of top-left corner of a rectangular area to be repainted",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "h height of top-left corner of a rectangular area to be repainted",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "repaint",
            "class": "zebra.ui.PaintManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8491,
            "description": "Reference to the current focus owner component.",
            "itemtype": "attribute",
            "name": "focusOwner",
            "readonly": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.FocusManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8516,
            "description": "Test if the given component is a focus owner",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component to be tested",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "hasFocus",
            "return": {
                "description": "true if the given component holds focus",
                "type": "Boolean"
            },
            "class": "zebra.ui.FocusManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8537,
            "description": "Test if the given component can catch focus",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component to be tested",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "isFocusable",
            "return": {
                "description": "true if the given component can catch a focus",
                "type": "Boolean"
            },
            "class": "zebra.ui.FocusManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8581,
            "description": "Force to pass a focus to the given UI component",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component to pass a focus",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "requestFocus",
            "class": "zebra.ui.FocusManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8650,
            "description": "Shortcut event is handled by registering a method handler with shortcut manager. The manager is accessed as \n\"zebra.ui.commandManager\" static variable:\n\n       zebra.ui.commandManager._.add(function (e) {\n           ...\n       });",
            "itemtype": "event",
            "name": "shortcut",
            "params": [
                {
                    "name": "e",
                    "description": "shortcut event",
                    "type": "Object",
                    "props": [
                        {
                            "name": "args",
                            "description": "shortcut arguments list",
                            "type": "Array"
                        },
                        {
                            "name": "command",
                            "description": "shortcut name",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "zebra.ui.CommandManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8775,
            "description": "Say which cursor has to be used for the given UI component.",
            "params": [
                {
                    "name": "t",
                    "description": "an UI component",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "c",
                    "description": "a zebra.ui.Cursorable \ninterface implementation. It has to provide \"getCursorType(target,x,y)\" \nmethod implementation that defines a cursor type to be set for the \ngiven target object and location. Also a cursor type can be passed\ndirectly to the method. In this case the cursorable class instance\nwill be created automatically.",
                    "type": "zebra.ui.Cursorable|String"
                }
            ],
            "itemtype": "method",
            "name": "setCursorable",
            "class": "zebra.ui.CursorManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8829,
            "description": "Keeps cursor info class instances for the number of UI components",
            "itemtype": "attribute",
            "name": "cursors",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "{Object}",
            "class": "zebra.ui.CursorManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8838,
            "description": "Current cursor type",
            "itemtype": "attribute",
            "name": "cursorType",
            "type": "{String}",
            "readonly": "",
            "default": "\"default\"",
            "class": "zebra.ui.CursorManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8969,
            "description": "Register global event listener. The listener will \nget events according to event listeners interfaces \nit implements. For instance to listen key and \nmouse events the passed listener has to be an \ninstance of \"zebra.ui.KeyListener\" and \n\"zebra.ui.MouseListener\" interfaces:\n               \n\n       // implement and register global key and mouse listener\n       zebra.ui.events.addListener(new zebra.Dummy(zebra.ui.MouseListener, \n                                                   zebra.ui.KeyListener, [\n\n           // implement necessary events handlers methods\n           function keyPressed(e) {\n               ...\n           }\n           ...\n       ]));",
            "params": [
                {
                    "name": "l",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "addListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 8999,
            "description": "Un-register the global listener. The method detects which listener interfaces \nthe passed listener implements and un-registers its.",
            "params": [
                {
                    "name": "l",
                    "description": "a listener",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "removeListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9012,
            "description": "Register global component listener",
            "params": [
                {
                    "name": "l",
                    "description": "a component listener",
                    "type": "zebra.ui.ComponentListener"
                }
            ],
            "itemtype": "method",
            "name": "addComponentListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9021,
            "description": "Un-register global component listener",
            "params": [
                {
                    "name": "l",
                    "description": "a component listener",
                    "type": "zebra.ui.ComponentListener"
                }
            ],
            "itemtype": "method",
            "name": "removeFocusListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9030,
            "description": "Register global mouse listener",
            "params": [
                {
                    "name": "l",
                    "description": "a mouse listener",
                    "type": "zebra.ui.MouseListener"
                }
            ],
            "itemtype": "method",
            "name": "addMouseListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9039,
            "description": "Un-register global mouse listener",
            "params": [
                {
                    "name": "l",
                    "description": "a mouse listener",
                    "type": "zebra.ui.MouseListener"
                }
            ],
            "itemtype": "method",
            "name": "removeMouseListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9048,
            "description": "Register global focus listener",
            "params": [
                {
                    "name": "l",
                    "description": "a focus listener",
                    "type": "zebra.ui.FocusListener"
                }
            ],
            "itemtype": "method",
            "name": "addFocusListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9057,
            "description": "Un-register global focus listener",
            "params": [
                {
                    "name": "l",
                    "description": "a focus listener",
                    "type": "zebra.ui.FocusListener"
                }
            ],
            "itemtype": "method",
            "name": "removeFocusListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9064,
            "description": "Register global key listener",
            "params": [
                {
                    "name": "l",
                    "description": "a key listener",
                    "type": "zebra.ui.KeyListener"
                }
            ],
            "itemtype": "method",
            "name": "addKeyListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9073,
            "description": "Un-register global key listener",
            "params": [
                {
                    "name": "l",
                    "description": "a key listener",
                    "type": "zebra.ui.KeyListener"
                }
            ],
            "itemtype": "method",
            "name": "removeKeyListener",
            "class": "zebra.ui.EventManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9750,
            "description": "Keeps rectangular \"dirty\" area of the canvas component",
            "access": "private",
            "tagname": "",
            "itemtype": "attribute",
            "name": "da",
            "type": "{Object} \n               { x:Integer, y:Integer, width:Integer, height:Integer }",
            "class": "zebra.ui.zCanvas",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9760,
            "description": "Reference to HTML Canvas element  where the zebra canvas UI \ncomponents are hosted",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "itemtype": "attribute",
            "name": "canvas",
            "type": "{Canvas}",
            "class": "zebra.ui.zCanvas",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9918,
            "description": "Stretch Canvas to occupy full screen area",
            "itemtype": "method",
            "name": "fullScreen",
            "class": "zebra.ui.zCanvas",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 9923,
            "description": "Indicate if the canvas has to be stretched to \nfill the whole screen area.",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "isFullScreen",
            "readonly": "",
            "class": "zebra.ui.zCanvas",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10096,
            "class": "zebra.ui.MouseWheelSupport",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10301,
            "description": "Mouse wheel handler",
            "params": [
                {
                    "name": "e",
                    "description": "DOM mouse event object",
                    "type": "MouseWheelEvent"
                }
            ],
            "itemtype": "method",
            "name": "mouseWheelMoved",
            "class": "zebra.ui.MouseWheelSupport",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10336,
            "description": "Setup mouse wheel support for the specified \"zebra.ui.zCanvas\" \ncomponent",
            "params": [
                {
                    "name": "canvas",
                    "description": "a zebra zCanvas UI component",
                    "type": "zebra.ui.zCanvas"
                }
            ],
            "itemtype": "method",
            "name": "setup",
            "class": "zebra.ui.MouseWheelSupport",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10419,
            "description": "Line orientation",
            "itemtype": "attribute",
            "name": "orient",
            "type": "{Integer}",
            "readonly": "",
            "default": "zebra.layout.VERTICAL",
            "class": "zebra.ui.Line",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10432,
            "description": "Line width",
            "itemtype": "attribute",
            "name": "lineWidth",
            "type": "{Integer}",
            "default": "1",
            "class": "zebra.ui.Line",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10440,
            "description": "Line color",
            "itemtype": "attribute",
            "name": "lineWidth",
            "type": "{String}",
            "default": "black",
            "class": "zebra.ui.Line",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10475,
            "description": "UI component that holds the text render",
            "itemtype": "attribute",
            "name": "owner",
            "default": "null",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10485,
            "description": "Get a line indent",
            "default": "1",
            "return": {
                "description": "line indent",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLineIndent",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10495,
            "description": "Get number of lines of target text",
            "return": {
                "description": "a number of line in the target text",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLines",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10508,
            "description": "Get the given line height in pixels",
            "params": [
                {
                    "name": "l",
                    "description": "a line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a line height in pixels",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getLineHeight",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10518,
            "description": "Called whenever an owner UI component has been changed",
            "params": [
                {
                    "name": "v",
                    "description": "a new owner UI component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "ownerChanged",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10525,
            "description": "Paint the specified text line",
            "params": [
                {
                    "name": "g",
                    "description": "graphical 2D context",
                    "type": "2DContext"
                },
                {
                    "name": "x",
                    "description": "x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y coordinate",
                    "type": "Integer"
                },
                {
                    "name": "line",
                    "description": "a line number",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "an UI component on that the line has to be rendered",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "paintLine",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10538,
            "description": "Get text line by the given line number",
            "params": [
                {
                    "name": "r",
                    "description": "a line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a text line",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getLine",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10557,
            "description": "Get the rendered target text as string object",
            "return": {
                "description": "rendered text",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10567,
            "description": "Get the given text line width in pixels",
            "params": [
                {
                    "name": "line",
                    "description": "a text line number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a text line width in pixels",
                "type": "Inetger"
            },
            "itemtype": "method",
            "name": "lineWidth",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10578,
            "description": "Called every time the target text metrics has to be recalculated",
            "itemtype": "method",
            "name": "recalc",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10603,
            "description": "Text model update listener handler",
            "params": [
                {
                    "name": "src",
                    "description": "text model object",
                    "type": "zebra.data.TextModel"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "off",
                    "description": "an offset starting from that \nthe text has been updated",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a size (in character) of text part that \nhas been updated",
                    "type": "Integer"
                },
                {
                    "name": "ful",
                    "description": "a first affected by the given update line",
                    "type": "Integer"
                },
                {
                    "name": "updatedLines",
                    "description": "a number of text lines that have \nbeen affected by text updating",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "textUpdated",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10641,
            "description": "Invalidate metrics for the specified range of lines.",
            "params": [
                {
                    "name": "start",
                    "description": "first line to be invalidated",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "number of lines to be invalidated",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "invalidate",
            "access": "private",
            "tagname": "",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10738,
            "description": "Paint the specified text selection of the given line. The area \nwhere selection has to be rendered is denoted with the given\nrectangular area.",
            "params": [
                {
                    "name": "g",
                    "description": "a canvas graphical context",
                    "type": "2DContext"
                },
                {
                    "name": "x",
                    "description": "a x coordinate of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of of selection rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "line",
                    "description": "[description]",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "a target UI component where the text \nis rendered",
                    "type": "zebra.ui.Panel"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "paintSelection",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10758,
            "description": "Set the text model content",
            "params": [
                {
                    "name": "s",
                    "description": "a text as string object",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10767,
            "description": "Set the rendered text font.",
            "params": [
                {
                    "name": "f",
                    "description": "a font as CSS string or zebra.ui.Font class instance",
                    "type": "String|zebra.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10781,
            "description": "Set rendered text color",
            "params": [
                {
                    "name": "c",
                    "description": "a text color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10796,
            "description": "Text color",
            "itemtype": "attribute",
            "name": "color",
            "type": "{String}",
            "default": "zebra.ui.fontColor",
            "readonly": "",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10805,
            "description": "Text font",
            "itemtype": "attribute",
            "name": "font",
            "type": "{String|zebra.ui.Font}",
            "default": "zebra.ui.font",
            "readonly": "",
            "class": "zebra.ui.TextRender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10840,
            "description": "Echo character that will replace characters of hidden text",
            "itemtype": "attribute",
            "name": "echo",
            "type": "{String}",
            "readonly": "",
            "default": "\"*\"",
            "class": "zebra.ui.PasswordText",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10849,
            "description": "Indicates if the last entered character doesn't have to be replaced with echo character",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "showLast",
            "default": "true",
            "readonly": "",
            "class": "zebra.ui.PasswordText",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 10860,
            "description": "Set the specified echo character. The echo character is used to hide secret text.",
            "params": [
                {
                    "name": "ch",
                    "description": "an echo character",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setEchoChar",
            "class": "zebra.ui.PasswordText",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11123,
            "description": "Get the label text",
            "return": {
                "description": "a zebra label text",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11130,
            "description": "Get the label text font",
            "return": {
                "description": "a zebra label font",
                "type": "zebra.ui.Font"
            },
            "itemtype": "method",
            "name": "getFont",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11137,
            "description": "Set the label text model",
            "params": [
                {
                    "name": "m",
                    "description": "a text model to be set",
                    "type": "zebra.data.TextModel"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11144,
            "description": "Get the label text font",
            "return": {
                "description": "a zebra label font",
                "type": "zebra.ui.Font"
            },
            "itemtype": "method",
            "name": "getFont",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11151,
            "description": "Set the label text value",
            "params": [
                {
                    "name": "s",
                    "description": "a new label text",
                    "type": "String|zebra.data.TextModel"
                }
            ],
            "itemtype": "method",
            "name": "setText",
            "deprecated": true,
            "deprecationMessage": "use setValue method instead",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11159,
            "description": "Get the label text",
            "return": {
                "description": "a zebra label text",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getText",
            "deprecated": true,
            "deprecationMessage": "use getValue method instead",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11167,
            "description": "Set the label text value",
            "params": [
                {
                    "name": "s",
                    "description": "a new label text",
                    "type": "String|zebra.data.TextModel"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11177,
            "description": "Set the label text color",
            "params": [
                {
                    "name": "c",
                    "description": "a text color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11186,
            "description": "Set the label text font",
            "params": [
                {
                    "name": "f",
                    "description": "a text font",
                    "type": "zebra.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "zebra.ui.Label",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11321,
            "description": "Current component state",
            "itemtype": "attribute",
            "name": "state",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11329,
            "description": "Indicates if the component can have focus",
            "itemtype": "attribute",
            "name": "isCanHaveFocus",
            "readonly": "",
            "type": "{Boolean}",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11340,
            "description": "Reference to an anchor focus marker component",
            "itemtype": "attribute",
            "name": "focusMarkerView",
            "readonly": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11348,
            "description": "The method is designed to customize mapping between the component state \nand a string view id. It can be handy for classes that extend the component to have \nown view IDs set.",
            "params": [
                {
                    "name": "s",
                    "description": "a state code",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a view ID that corresponds to the given state",
                "type": "String"
            },
            "itemtype": "method",
            "name": "idByState",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11366,
            "description": "Called every time the component state has been updated",
            "params": [
                {
                    "name": "o",
                    "description": "a previous component state",
                    "type": "Integer"
                },
                {
                    "name": "n",
                    "description": "a new component state",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "stateUpdated",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11450,
            "description": "Set the view that has to be rendered as focus marker when the component gains focus.",
            "params": [
                {
                    "name": "c",
                    "description": "a view. The view can be a color or border string \ncode or view or an implementation of zebra.ui.View \"paint(g,x,y,w,h,t)\" method.",
                    "type": "String|zenra.ui.view|Fucntion"
                }
            ],
            "itemtype": "method",
            "name": "setFocusMarkerView",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11463,
            "description": "Says if the component can hold focus or not",
            "params": [
                {
                    "name": "b",
                    "description": "true if the component can gain focus",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setCanHaveFocus",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11476,
            "description": "Set the specified children component to be used as focus marker view anchor component. \nAnchor component is a component over that the focus marker view is painted.",
            "params": [
                {
                    "name": "c",
                    "description": "an anchor component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "setFocusAnchorComponent",
            "class": "zebra.ui.StatePan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11547,
            "description": "Indicate if the button should\nfire event by pressed event",
            "itemtype": "attribute",
            "name": "isFireByPress",
            "type": "{Boolean}",
            "default": "false",
            "readonly": "",
            "class": "zebra.ui.Button",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11557,
            "description": "Fire button event repeating period. -1 means\nthe button event repeating is disabled.",
            "itemtype": "attribute",
            "name": "firePeriod",
            "type": "{Integer}",
            "default": "-1",
            "readonly": "",
            "class": "zebra.ui.Button",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11576,
            "description": "Set the mode the button has to fire events. \nButton can fire event after it has been unpressed \nor immediately when it has been pressed. Also button \ncan start firing events periodically when it has been \npressed and holden in the pressed state.",
            "params": [
                {
                    "name": "b",
                    "description": "true if the button has to fire \nevent by pressed event",
                    "type": "Boolean"
                },
                {
                    "name": "time",
                    "description": "the period of time the button \nhas to repeat firing events if it has been pressed and \nholden in pressed state. -1 means event doesn't have \nrepeated",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setFireParams",
            "class": "zebra.ui.Button",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11664,
            "description": "Vertical gap. Define top and bottom paddings between\nborder panel border and the border panel content",
            "itemtype": "attribute",
            "name": "vGap",
            "type": "{Ineteger}",
            "readonly": "",
            "default": "0",
            "class": "zebra.ui.BorderPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11673,
            "description": "Horizontal gap. Define left and right paddings between\nborder panel border and the border panel content",
            "itemtype": "attribute",
            "name": "hGap",
            "type": "{Ineteger}",
            "readonly": "",
            "default": "0",
            "class": "zebra.ui.BorderPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11729,
            "description": "Set vertical and horizontal paddings between the\nborder panel border and the content of the border \npanel",
            "params": [
                {
                    "name": "vg",
                    "description": "a top and bottom paddings",
                    "type": "Integer"
                },
                {
                    "name": "hg",
                    "description": "a left and right paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGaps",
            "class": "zebra.ui.BorderPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11782,
            "description": "Fired when a state has been updated\n       \n       var ch = new zebra.ui.Checkbox(\"Test\");\n       ch.manager._.add(function (src, ui) {\n           ...\n       });",
            "itemtype": "event",
            "name": "stateUpdated",
            "params": [
                {
                    "name": "src",
                    "description": "a switch manager that controls and tracks the event",
                    "type": "zebra.ui.SwitchManager"
                },
                {
                    "name": "ui",
                    "description": "an UI component that triggers the event",
                    "type": "zebra.ui.Checkbox"
                }
            ],
            "class": "zebra.ui.SwitchManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11796,
            "description": "Get current state of the given UI component",
            "params": [
                {
                    "name": "o",
                    "description": "an ui component",
                    "type": "zebra.ui.Checkbox"
                }
            ],
            "return": {
                "description": "a boolean state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "getState",
            "class": "zebra.ui.SwitchManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11804,
            "description": "Set the state for the given UI component",
            "params": [
                {
                    "name": "o",
                    "description": "an ui component",
                    "type": "zebra.ui.Checkbox"
                },
                {
                    "name": "b",
                    "description": "a boolean state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setState",
            "class": "zebra.ui.SwitchManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11817,
            "description": "Called every time a state has been updated.",
            "params": [
                {
                    "name": "o",
                    "description": "an ui component for which the state has been updated",
                    "type": "zebra.ui.Checkbox"
                },
                {
                    "name": "b",
                    "description": "a new boolean state of the UI component",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "stateUpdated",
            "class": "zebra.ui.SwitchManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11828,
            "description": "Call when the manager has been installed for the given UI component",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "an UI component the switch manager is designated",
                    "type": "zebra.ui.Checkbox"
                }
            ],
            "itemtype": "method",
            "name": "install",
            "class": "zebra.ui.SwitchManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11838,
            "description": "Call when the manager has been uninstalled for the given UI component",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "an UI component the switch manager is not anymore used",
                    "type": "zebra.ui.Checkbox"
                }
            ],
            "itemtype": "method",
            "name": "uninstall",
            "class": "zebra.ui.SwitchManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11975,
            "class": "zebra.ui.Checkbox",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11982,
            "description": "Set the check box state",
            "params": [
                {
                    "name": "b",
                    "description": "a state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.Checkbox",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11989,
            "description": "Get the check box state",
            "return": {
                "description": "a check box state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebra.ui.Checkbox",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 11996,
            "description": "Set the check box state",
            "params": [
                {
                    "name": "b",
                    "description": "a state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setState",
            "deprecated": true,
            "deprecationMessage": "use setValue method instead",
            "class": "zebra.ui.Checkbox",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12004,
            "description": "Get the check box state",
            "return": {
                "description": "a check box state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "getState",
            "deprecated": true,
            "deprecationMessage": "use getValue method",
            "class": "zebra.ui.Checkbox",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12071,
            "description": "Set the specified switch manager",
            "params": [
                {
                    "name": "m",
                    "description": "a switch manager",
                    "type": "zebra.ui.SwicthManager"
                }
            ],
            "itemtype": "method",
            "name": "setSwicthManager",
            "class": "zebra.ui.Checkbox",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12077,
            "description": "A switch manager",
            "itemtype": "attribute",
            "name": "manager",
            "readonly": "",
            "type": "{zebra.ui.SwitchManager}",
            "class": "zebra.ui.Checkbox",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12209,
            "description": "A minimal size of the left (or top) sizable panel",
            "itemtype": "attribute",
            "name": "leftMinSize",
            "type": "{Integer}",
            "readonly": "",
            "default": "50",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12217,
            "description": "A minimal size of right (or bottom) sizable panel",
            "itemtype": "attribute",
            "name": "rightMinSize",
            "type": "{Integer}",
            "readonly": "",
            "default": "50",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12225,
            "description": "Indicates if the splitter bar can be moved",
            "itemtype": "attribute",
            "name": "isMoveable",
            "type": "{Boolean}",
            "readonly": "",
            "default": "true",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12233,
            "description": "A gap between gripper element and first and second UI components",
            "itemtype": "attribute",
            "name": "gap",
            "type": "{Integer}",
            "readonly": "",
            "default": "1",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12241,
            "description": "A reference to gripper UI component",
            "itemtype": "attribute",
            "name": "gripper",
            "type": "{zebra.ui.Panel}",
            "readonly": "",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12248,
            "description": "A reference to left (top) sizable UI component",
            "itemtype": "attribute",
            "name": "leftComp",
            "type": "{zebra.ui.Panel}",
            "readonly": "",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12255,
            "description": "A reference to right (bottom) sizable UI component",
            "itemtype": "attribute",
            "name": "rightComp",
            "type": "{zebra.ui.Panel}",
            "readonly": "",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12272,
            "description": "Set gripper element location",
            "params": [
                {
                    "name": "l",
                    "description": "a location of the gripper element",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGripperLoc",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12365,
            "description": "Set gap between gripper element and sizable panels",
            "params": [
                {
                    "name": "g",
                    "description": "a gap",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGap",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12377,
            "description": "Set the minimal size of the left (or top) sizeable panel",
            "params": [
                {
                    "name": "m",
                    "description": "a minimal possible size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLeftMinSize",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12389,
            "description": "Set the minimal size of the right (or bottom) sizeable panel",
            "params": [
                {
                    "name": "m",
                    "description": "a minimal possible size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRightMinSize",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12401,
            "description": "Set the given gripper movable state",
            "params": [
                {
                    "name": "b",
                    "description": "the gripper movable state.",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setGripperMovable",
            "class": "zebra.ui.SplitPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12473,
            "description": "Fired when a progress bar value has been updated\n\n       progress._.add(function(src, oldValue) {\n           ...\n       });",
            "itemtype": "event",
            "name": "valueUpdated",
            "params": [
                {
                    "name": "src",
                    "description": "a progress bar that triggers \n the event",
                    "type": "zebra.ui.Progress"
                },
                {
                    "name": "oldValue",
                    "description": "a progress bar previous value",
                    "type": "Integer"
                }
            ],
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12488,
            "description": "Gap between bundle elements",
            "default": "2",
            "itemtype": "attribute",
            "name": "gap",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12497,
            "description": "Progress bar orientation",
            "default": "zebra.layout.HORIZONTAL",
            "itemtype": "attribute",
            "name": "orientation",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12558,
            "description": "Progress bar value",
            "itemtype": "attribute",
            "name": "value",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12567,
            "description": "Progress bar bundle width",
            "itemtype": "attribute",
            "name": "bundleWidth",
            "type": "{Integer}",
            "readonly": "",
            "default": "6",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12575,
            "description": "Progress bar bundle height",
            "itemtype": "attribute",
            "name": "bundleHeight",
            "type": "{Integer}",
            "readonly": "",
            "default": "6",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12585,
            "description": "Progress bar maximal value",
            "itemtype": "attribute",
            "name": "maxValue",
            "type": "{Integer}",
            "readonly": "",
            "default": "20",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12597,
            "description": "Set the progress bar orientation",
            "params": [
                {
                    "name": "o",
                    "description": "an orientation: zebra.layout.VERTICAL or zebra.layout.HORIZONTAL",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setOrientation",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12612,
            "description": "Set maximal integer value the progress bar value can rich",
            "params": [
                {
                    "name": "m",
                    "description": "a maximal value the progress bar value can rich",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setMaxValue",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12625,
            "description": "Set the current progress bar value",
            "params": [
                {
                    "name": "p",
                    "description": "a progress bar",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12640,
            "description": "Set the given gap between progress bar bundle elements",
            "params": [
                {
                    "name": "g",
                    "description": "a gap",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setGap",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12652,
            "description": "Set the progress bar bundle element view",
            "params": [
                {
                    "name": "v",
                    "description": "a progress bar bundle view",
                    "type": "zebra.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setBundleView",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12664,
            "description": "Set the progress bar bundle element size",
            "params": [
                {
                    "name": "w",
                    "description": "a bundle element width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a bundle element height",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setBundleSize",
            "class": "zebra.ui.Progress",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12702,
            "description": "Set the link text color for the specified link state",
            "params": [
                {
                    "name": "state",
                    "description": "a link state",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a link text color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "class": "zebra.ui.Link",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12741,
            "description": "Toogle on toogle off the extender panel",
            "itemtype": "method",
            "name": "toggle",
            "class": "zebra.ui.Extender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12766,
            "description": "Indicate if the extender panel is collapsed",
            "type": "{Boolean}",
            "itemtype": "attribute",
            "name": "isCollapsed",
            "readonly": "",
            "default": "false",
            "class": "zebra.ui.Extender",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12800,
            "description": "Fired when a target component has been scrolled\n\n       scrollManager._.add(function(px, py) {\n           ...\n       });",
            "itemtype": "event",
            "name": "scrolled",
            "params": [
                {
                    "name": "px",
                    "description": "a previous x location target component scroll location",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a previous y location target component scroll location",
                    "type": "Integer"
                }
            ],
            "class": "zebra.ui.ScrollManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12814,
            "description": "Get current target component x scroll location",
            "return": {
                "description": "a x scroll location",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getSX",
            "class": "zebra.ui.ScrollManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12821,
            "description": "Get current target component y scroll location",
            "return": {
                "description": "a y scroll location",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getSY",
            "class": "zebra.ui.ScrollManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12832,
            "description": "Scroll the target component into the specified location",
            "params": [
                {
                    "name": "x",
                    "description": "a x location",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y location",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "scrollTo",
            "class": "zebra.ui.ScrollManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12849,
            "description": "Make visible the given rectangular area of the \nscrolled target component",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate of top left corner \nof the rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate of top left corner \nof the rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of the rectangular area",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the rectangular area",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "makeVisible",
            "class": "zebra.ui.ScrollManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12905,
            "description": "Maximal possible value",
            "itemtype": "attribute",
            "name": "max",
            "type": "{Integer}",
            "readonly": "",
            "default": "100",
            "class": "zebra.ui.Scroll",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12914,
            "description": "Page increment value",
            "itemtype": "attribute",
            "name": "pageIncrement",
            "type": "{Integer}",
            "readonly": "",
            "default": "20",
            "class": "zebra.ui.Scroll",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 12923,
            "description": "Unit increment value",
            "itemtype": "attribute",
            "name": "unitIncrement",
            "type": "{Integer}",
            "readonly": "",
            "default": "5",
            "class": "zebra.ui.Scroll",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13057,
            "description": "Set the specified maximum value of the scroll component",
            "params": [
                {
                    "name": "m",
                    "description": "a maximum value",
                    "type": "Inetger"
                }
            ],
            "itemtype": "method",
            "name": "setMaximum",
            "class": "zebra.ui.Scroll",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13174,
            "description": "Indicate if the scroll bars should be hidden \nwhen they are not active",
            "itemtype": "attribute",
            "name": "autoHide",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebra.ui.ScrollPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13184,
            "description": "Set the given auto hide state.",
            "params": [
                {
                    "name": "b",
                    "description": "an auto hide state.",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setAutoHide",
            "class": "zebra.ui.ScrollPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13357,
            "description": "Vertical scroll bar component",
            "itemtype": "attribute",
            "name": "vBar",
            "type": "{zebra.ui.Scroll}",
            "readonly": "",
            "class": "zebra.ui.ScrollPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13364,
            "description": "Horizontal scroll bar component",
            "itemtype": "attribute",
            "name": "hBar",
            "type": "{zebra.ui.Scroll}",
            "readonly": "",
            "class": "zebra.ui.ScrollPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13461,
            "description": "Fired when a new tab page has been selected \n\n     tabs._.add(function (src, selectedIndex) {\n        ...\n     });",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "src",
                    "description": "a tabs component that triggers the event",
                    "type": "zebra.ui.Tabs"
                },
                {
                    "name": "selectedIndex",
                    "description": "a tab page index that has been selected",
                    "type": "Integer"
                }
            ],
            "class": "zebra.ui.Tabs",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13506,
            "description": "Navigate to a next tab page following the given direction starting from the given page",
            "params": [
                {
                    "name": "page",
                    "description": "a starting page index",
                    "type": "Integer"
                },
                {
                    "name": "d",
                    "description": "a navigation direction. 1 means forward and -1 mens backward",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a new tab page index",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "next",
            "class": "zebra.ui.Tabs",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13547,
            "description": "Test if the given tab page is in enabled state",
            "params": [
                {
                    "name": "index",
                    "description": "a tab page index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a tab page state",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isTabEnabled",
            "class": "zebra.ui.Tabs",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13764,
            "description": "Get tab index located at the given location",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an index of the tab that is \ndetected at the given location. -1 if no any \ntab can be found",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getTabAt",
            "class": "zebra.ui.Tabs",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13811,
            "description": "Switch to the given tab page",
            "params": [
                {
                    "name": "index",
                    "description": "a tab page index to be navigated",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebra.ui.Tabs",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 13866,
            "description": "Set enabled state for the given tab page",
            "params": [
                {
                    "name": "i",
                    "description": "a tab page index",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a tab page enabled state",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "enableTab",
            "class": "zebra.ui.Tabs",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 14874,
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 14930,
            "description": "Selection color",
            "itemtype": "attribute",
            "name": "selectionColor",
            "type": "{String}",
            "readonly": "",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 14939,
            "description": "Cursor view",
            "itemtype": "attribute",
            "name": "curView",
            "type": "{zebra.ui.View}",
            "readonly": "",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 14946,
            "description": "Indicate if the text field is editable",
            "itemtype": "attribute",
            "name": "isEditable",
            "type": "{Boolean}",
            "default": "true",
            "readonly": "",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15012,
            "description": "Remove selected text",
            "itemtype": "method",
            "name": "removeSelected",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15118,
            "description": "Test if the given key pressed event has to be processed",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "a key event",
                    "type": "zebra.ui.KeyEvent"
                }
            ],
            "return": {
                "description": "true if the given key pressed event doesn't \nhave be processed",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isFiltered",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15131,
            "description": "Remove the specified part of edited text",
            "params": [
                {
                    "name": "pos",
                    "description": "a start position of a removed text",
                    "type": "Integer"
                },
                {
                    "name": "size",
                    "description": "a size of removed text",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "remove",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15152,
            "description": "Insert the specified text into the edited text at the given position",
            "params": [
                {
                    "name": "pos",
                    "description": "a start position of a removed text",
                    "type": "Integer"
                },
                {
                    "name": "s",
                    "description": "a text to be inserted",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "write",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15184,
            "description": "Draw the text field cursor",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "g",
                    "description": "a 2D contextnn",
                    "type": "2DContext"
                }
            ],
            "itemtype": "method",
            "name": "drawCursor",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15214,
            "description": "Select the specified part of the edited text",
            "params": [
                {
                    "name": "startOffset",
                    "description": "a start position of a selected text",
                    "type": "Integer"
                },
                {
                    "name": "endOffset",
                    "description": "an end position of a selected text",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15244,
            "description": "Test if the text field has a selected text",
            "return": {
                "description": "true if the text field has a selected text",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "hasSelection",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15284,
            "description": "Set the specified hint text to be drawn with the given font and color.\nThe hint is not-editable text that is shown in empty text field to help \na user to understand which input the text field expects.",
            "params": [
                {
                    "name": "hint",
                    "description": "a hint text",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "a font",
                    "type": "String|zebra.ui.Font"
                },
                {
                    "name": "color",
                    "description": "a hint color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setHint",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15334,
            "description": "Get a starting position (row and column) of a selected text",
            "return": {
                "description": "a position of a selected text. First element \nof is a row and second column of selected text. null if \nthere is no any selected text",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getStartSelection",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15346,
            "description": "Get an ending position (row and column) of a selected text",
            "return": {
                "description": "a position of a selected text. First element \nof is a row and second column of selected text. null if \nthere is no any selected text",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getEndSelection",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15358,
            "description": "Get a selected text",
            "return": {
                "description": "a selected text",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getSelectedText",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15393,
            "description": "Clear a text selection.",
            "itemtype": "method",
            "name": "clearSelection",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15432,
            "description": "Set the specified cursor position controller",
            "params": [
                {
                    "name": "p",
                    "description": "a position controller",
                    "type": "zebra.util.Position"
                }
            ],
            "itemtype": "method",
            "name": "setPosition",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15449,
            "description": "Set the cursor view. The view defines rendering of the text field \ncursor.",
            "params": [
                {
                    "name": "v",
                    "description": "a cursor view",
                    "type": "zebra.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setCursorView",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15464,
            "description": "Adjust the size of the text field component to be enough to place the given\nnumber of rows and columns.",
            "params": [
                {
                    "name": "r",
                    "description": "a row of the text the height of the text field has to be adjusted",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "a column of the text the width of the text field has to be adjusted",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setPSByRowsCols",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15477,
            "description": "Control the text field editable state",
            "params": [
                {
                    "name": "b",
                    "description": "true to make the text field editable",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setEditable",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15502,
            "description": "Set selection color",
            "params": [
                {
                    "name": "c",
                    "description": "a selection color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setSelectionColor",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15570,
            "description": "Set the text content of the text field component",
            "params": [
                {
                    "name": "s",
                    "description": "a text the text field component has to be filled",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.TextField",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15607,
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15631,
            "description": "Selected list item index",
            "type": "{Integer}",
            "readonly": "",
            "itemtype": "attribute",
            "name": "selectedIndex",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15638,
            "description": "List model the component visualizes",
            "itemtype": "attribute",
            "name": "model",
            "type": "{zebra.data.ListModel}",
            "readonly": "",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15645,
            "description": "Select the specified list item.",
            "params": [
                {
                    "name": "v",
                    "description": "a list item to be selected. Use null as \nthe parameter value to clean an item selection",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15667,
            "description": "Get the list component selected item",
            "return": {
                "description": "a selected item",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15676,
            "description": "Get a value that defines left, right, top and bottom list item gaps.",
            "return": {
                "description": "an item gap",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getItemGap",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15685,
            "description": "Get selected list item",
            "return": {
                "description": "an item",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getSelected",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15708,
            "description": "Test if the given list item is selected",
            "params": [
                {
                    "name": "i",
                    "description": "an item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the item with the given index is selected",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isSelected",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15728,
            "description": "Return the given list item location.",
            "params": [
                {
                    "name": "i",
                    "description": "a list item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a location of the list item. The result is object that \nhas the following structure:\n               { x:Integer, y:Integer}",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getItemLocation",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15743,
            "description": "Return the given list item size.",
            "params": [
                {
                    "name": "i",
                    "description": "a list item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a size of the list item. The result is object that \nhas the following structure:\n               { width:Integer, height:Integer}",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getItemLocation",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15764,
            "description": "Detect an item by the specified location",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a list item that is located at the given position. -1 if no any list item can be \nfound.",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getItemIdxAt",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15774,
            "description": "Calculate maximal width and maximal height the items in the list have",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "a max items size",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "calcMaxItemSize",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15791,
            "description": "Force repainting of the given list items",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "p",
                    "description": "an index of the first list item to be repainted",
                    "type": "Integer"
                },
                {
                    "name": "n",
                    "description": "an index of the second list item to be repainted",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "repaintByOffsets",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15837,
            "description": "Select the given list item",
            "params": [
                {
                    "name": "index",
                    "description": "an item index to be selected",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15960,
            "description": "Set the left, right, top and bottom a list item paddings",
            "params": [
                {
                    "name": "g",
                    "description": "a left, right, top and bottom a list item paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setItemGap",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15972,
            "description": "Set the list model to be rendered with the list component",
            "params": [
                {
                    "name": "m",
                    "description": "a list model",
                    "type": "zebra.data.ListModel"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 15991,
            "description": "Set the given position controller. List component uses position to \ntrack virtual cursor.",
            "params": [
                {
                    "name": "c",
                    "description": "a position",
                    "type": "zebra.util.Position"
                }
            ],
            "itemtype": "method",
            "name": "setPosition",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16007,
            "description": "Set the list items view provider. Defining a view provider allows developers\nto customize list item rendering.",
            "params": [
                {
                    "name": "v",
                    "description": "a view provider",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViewProvider",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16049,
            "description": "Currently selected list item index",
            "type": "{Integer}",
            "itemtype": "attribute",
            "name": "selectedIndex",
            "default": "-1",
            "readonly": "",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16061,
            "description": "Scroll manager",
            "itemtype": "attribute",
            "name": "scrollManager",
            "readonly": "",
            "type": "{zebra.ui.ScrollManager}",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16073,
            "description": "List model",
            "readonly": "",
            "itemtype": "attribute",
            "name": "model",
            "class": "zebra.ui.BaseList",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16114,
            "description": "Reference to text render that is used to paint a list items",
            "type": "{zebra.ui.TextRender}",
            "itemtype": "attribute",
            "name": "text",
            "readonly": "",
            "class": "zebra.ui.List.ViewProvider",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16126,
            "description": "Get a view for the given model data element of the\nspecified list component",
            "params": [
                {
                    "name": "target",
                    "description": "a list component",
                    "type": "zebra.ui.List"
                },
                {
                    "name": "value",
                    "description": "a data model value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a view to be used to render \nthe given list component item",
                "type": "zebra.ui.View"
            },
            "itemtype": "method",
            "name": "getView",
            "class": "zebra.ui.List.ViewProvider",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16143,
            "class": "zebra.ui.List",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16279,
            "description": "Index of the first visible list item",
            "readonly": "",
            "itemtype": "attribute",
            "name": "firstVisible",
            "type": "{Integer}",
            "access": "private",
            "tagname": "",
            "class": "zebra.ui.List",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16288,
            "description": "Y coordinate of the first visible list item",
            "readonly": "",
            "itemtype": "attribute",
            "name": "firstVisibleY",
            "type": "{Integer}",
            "access": "private",
            "tagname": "",
            "class": "zebra.ui.List",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16298,
            "description": "Internal flag to track list items visibility status. It is set \nto false to trigger list items metrics and visibility recalculation",
            "itemtype": "attribute",
            "name": "visValid",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "zebra.ui.List",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16541,
            "description": "Fired when a new value in a combo box component has been selected\n \n    combo._.add(function(combo, value) {\n        ...\n    });",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "combo",
                    "description": "a combo box component where a new value\nhas been selected",
                    "type": "zebra.ui.Combo"
                },
                {
                    "name": "value",
                    "description": "a new value that has been selected",
                    "type": "Object"
                }
            ],
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16562,
            "description": "Called whenever the given combo box value has been updated with the specified \nvalue. Implement the method to synchronize content panel with updated combo \nbox value",
            "itemtype": "method",
            "name": "updateValue",
            "params": [
                {
                    "name": "combo",
                    "description": "a combo box component that has been updated",
                    "type": "zebra.ui.Combo"
                },
                {
                    "name": "value",
                    "description": "a value with which the combo box has been updated",
                    "type": "Object"
                }
            ],
            "class": "zebra.ui.Combo.ContentPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16574,
            "description": "Indicates if the content panel is editable. Set the property to true \nto indicate the content panel implementation is editable. Editable\nmeans the combo box content can be editable by a user",
            "itemtype": "attribute",
            "name": "isEditable",
            "type": "{Boolean}",
            "readonly": "",
            "default": "undefined",
            "class": "zebra.ui.Combo.ContentPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16584,
            "description": "Get a combo box the content panel belongs",
            "itemtype": "method",
            "name": "getCombo",
            "return": {
                "description": "a combo the content panel belongs",
                "type": "zebra.ui.Combo"
            },
            "class": "zebra.ui.Combo.ContentPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16643,
            "description": "Fired when a content value has been updated. \n        \n       content._.add(function(contentPan, newValue) {\n           ...\n       });",
            "params": [
                {
                    "name": "contentPan",
                    "description": "a content panel that \nupdated its value",
                    "type": "zebra.ui.Combo.ContentPan"
                },
                {
                    "name": "newValue",
                    "description": "a new value the content panel has been set\nwith",
                    "type": "Object"
                }
            ],
            "itemtype": "event",
            "name": "contentUpdated",
            "class": "zebra.ui.Combo.EditableContentPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16669,
            "description": "A reference to a text field component the content panel uses as a \nvalue editor",
            "itemtype": "attribute",
            "name": "textField",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "type": "{zebra.ui.TextField}",
            "class": "zebra.ui.Combo.EditableContentPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16696,
            "description": "Called when the combo box content has been updated",
            "params": [
                {
                    "name": "combo",
                    "description": "a combo where the new value has been set",
                    "type": "zebra.ui.Combo"
                },
                {
                    "name": "v",
                    "description": "a new combo box value",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "updateValue",
            "class": "zebra.ui.Combo.EditableContentPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16727,
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16771,
            "description": "Select the given value from the list as the combo box value",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a list element to be selected \nas the combo box value",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16781,
            "description": "Set combo box value.",
            "params": [
                {
                    "name": "v",
                    "description": "a value",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setValue",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16790,
            "description": "Get the current combo box value",
            "return": {
                "description": "a value",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getValue",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16810,
            "description": "Hide combo drop down list",
            "itemtype": "method",
            "name": "hidePad",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16822,
            "description": "Show combo drop down list",
            "itemtype": "method",
            "name": "showPad",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16861,
            "description": "Bind the given list component to the combo box component.",
            "params": [
                {
                    "name": "l",
                    "description": "a list component",
                    "type": "zebra.ui.BaseList"
                }
            ],
            "itemtype": "method",
            "name": "setList",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16894,
            "description": "Set the given combo box selection view",
            "params": [
                {
                    "name": "c",
                    "description": "a view",
                    "type": "zebra.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setSelectionView",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16906,
            "description": "Set the maximal height of the combo box pad element.",
            "params": [
                {
                    "name": "h",
                    "description": "a maximal combo box pad size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setMaxPadHeight",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16929,
            "description": "Reference to combo box list component",
            "itemtype": "attribute",
            "name": "list",
            "readonly": "",
            "type": "{zebra.ui.BaseList}",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16939,
            "description": "Reference to combo box button component",
            "itemtype": "attribute",
            "name": "button",
            "readonly": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16946,
            "description": "Reference to combo box content component",
            "itemtype": "attribute",
            "name": "content",
            "readonly": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16953,
            "description": "Reference to combo box pad component",
            "itemtype": "attribute",
            "name": "winpad",
            "readonly": "",
            "type": "{zebra.ui.Panel}",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16960,
            "description": "Reference to selection view",
            "itemtype": "attribute",
            "name": "selectionView",
            "readonly": "",
            "type": "{zebra.ui.View}",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 16969,
            "description": "Maximal size the combo box height can have",
            "itemtype": "attribute",
            "name": "maxPadHeight",
            "readonly": "",
            "type": "{Integer}",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17020,
            "description": "Combo box button listener method. The method triggers showing \ncombo box pad window when the combo button has been pressed",
            "params": [
                {
                    "name": "src",
                    "description": "a button that has been pressed",
                    "type": "zebra.ui.Button"
                }
            ],
            "itemtype": "method",
            "name": "fired",
            "class": "zebra.ui.Combo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17058,
            "description": "Arrow color",
            "type": "{String}",
            "readonly": "",
            "default": "\"black\"",
            "itemtype": "attribute",
            "name": "color",
            "class": "zebra.ui.ComboArrowView",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17066,
            "description": "Arrow state to be rendered",
            "type": "{Boolean}",
            "readonly": "",
            "default": "false",
            "itemtype": "attribute",
            "name": "state",
            "class": "zebra.ui.ComboArrowView",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17074,
            "description": "Top, left, right and bottom gap value",
            "type": "{Integer}",
            "readonly": "",
            "default": "4",
            "itemtype": "attribute",
            "name": "gap",
            "class": "zebra.ui.ComboArrowView",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17125,
            "class": "zebra.ui.TooltipInfo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17146,
            "description": "Get an UI component to be shown as a tooltip for the given UI\ncomponent at the given location of the target component",
            "params": [
                {
                    "name": "target",
                    "description": "a target UI component",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "x",
                    "description": "a x coordinate relatively to the target UI component",
                    "type": "Integer"
                },
                {
                    "name": "x",
                    "description": "a y coordinate relatively to the target UI component",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an UI component to be shown as tooltip",
                "type": "zebra.ui.Panel"
            },
            "itemtype": "method",
            "name": "getTooltip",
            "class": "zebra.ui.TooltipInfo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17164,
            "description": "Get an UI component to be shown as a popup menu for the given UI\ncomponent at the given location of the target component",
            "params": [
                {
                    "name": "target",
                    "description": "a target UI component",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "x",
                    "description": "a x coordinate relatively to the target UI component",
                    "type": "Integer"
                },
                {
                    "name": "x",
                    "description": "a y coordinate relatively to the target UI component",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an UI component to be shown as popup menu UI component",
                "type": "zebra.ui.Panel"
            },
            "itemtype": "method",
            "name": "getPopup",
            "class": "zebra.ui.PopupInfo",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17181,
            "description": "Fire when an UI component has been opened or closed on the given window layer",
            "params": [
                {
                    "name": "winLayer",
                    "description": "a win layer where the window component is hosted",
                    "type": "zebra.ui.BaseLayer"
                },
                {
                    "name": "win",
                    "description": "an UI component that is used as the window",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "status",
                    "description": "a status of the window component. true means the window component \nhas been opened, false means the window component has been closed",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "winOpened",
            "class": "zebra.ui.WinListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17190,
            "description": "Fire when an UI component has been activated or deactivate on the given window layer",
            "params": [
                {
                    "name": "winLayer",
                    "description": "a win layer where the window component is hosted",
                    "type": "zebra.ui.BaseLayer"
                },
                {
                    "name": "win",
                    "description": "an UI component that is used as the window",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "status",
                    "description": "a status of the window component. true means the window component \nhas been activated, false means the window component has been deactivated",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "winActivated",
            "class": "zebra.ui.WinListener",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17208,
            "description": "Show the given UI component as a window",
            "params": [
                {
                    "name": "context",
                    "description": "an UI component of zebra hierarchy",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "type",
                    "description": "a type of the window: \"modal\", \"mdi\", \"info\"",
                    "type": "String"
                },
                {
                    "name": "win",
                    "description": "a component to be shown as the window",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "listener",
                    "description": "a window listener",
                    "type": "zebra.ui.WinListener",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "showWindow",
            "class": "zebra.ui.showWindow()",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17358,
            "description": "Activate the given win layer children component window.",
            "params": [
                {
                    "name": "c",
                    "description": "a component to be activated as window",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "activate",
            "class": "zebra.ui.WinLayer",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17413,
            "description": "Add the given window with the given type and the listener to the layer.",
            "params": [
                {
                    "name": "type",
                    "description": "a type of the window: \"modal\", \n\"mdi\" or \"info\"",
                    "type": "String"
                },
                {
                    "name": "win",
                    "description": "an UI component to be shown as window",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "listener",
                    "description": "an optional the window listener",
                    "type": "zebra.ui.WinListener",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "addWin",
            "class": "zebra.ui.WinLayer",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17428,
            "description": "Currently activated as a window children component",
            "itemtype": "attribute",
            "name": "activeWin",
            "type": "{zebra.ui.Panel}",
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "class": "zebra.ui.WinLayer",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17556,
            "description": "Minimal possible size of the window",
            "default": "40",
            "itemtype": "attribute",
            "name": "minSize",
            "type": "{Integer}",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17564,
            "description": "Indicate if the window can be resized by dragging its by corner",
            "itemtype": "attribute",
            "name": "isSizeable",
            "type": "{Boolean}",
            "default": "true",
            "readonly": "",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17610,
            "description": "Test if the mouse cursor is inside the window corner component",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "px",
                    "description": "a x coordinate of the mouse cursor",
                    "type": "Integer"
                },
                {
                    "name": "py",
                    "description": "a y coordinate of the mouse cursor",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the mouse cursor is inside window \ncorner component",
                "type": "[type]"
            },
            "itemtype": "method",
            "name": "insideCorner",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17714,
            "description": "Make the window sizeable or not sizeable",
            "params": [
                {
                    "name": "b",
                    "description": "a sizeable state of the window",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setSizeable",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17728,
            "description": "Maximize the window",
            "itemtype": "method",
            "name": "maximize",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17748,
            "description": "Restore the window size",
            "itemtype": "method",
            "name": "restore",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17760,
            "description": "Close the window",
            "itemtype": "method",
            "name": "close",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17768,
            "description": "Set the window buttons set.",
            "params": [
                {
                    "name": "buttons",
                    "description": "dictionary of buttons icons for window buttons. \nThe dictionary key defines a method of the window component to be called \nwhen the given button has been pressed. So the method has to be defined\nin the window component.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setButtons",
            "class": "zebra.ui.Window",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17821,
            "description": "Indicates if a shown tooltip has to disappear by mouse pressed event",
            "itemtype": "attribute",
            "name": "stopByPress",
            "type": "{Boolean}",
            "default": "true",
            "class": "zebra.ui.TooltipManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17882,
            "description": "Hide tooltip if it has been shown",
            "itemtype": "method",
            "name": "hideTooltipInfo",
            "class": "zebra.ui.TooltipManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17893,
            "description": "Bind or unbind the given UI component with the specified tooltip component",
            "params": [
                {
                    "name": "an",
                    "description": "component for that a tooltip has to be shown",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "a",
                    "description": "tooltip to be shown. You can pass string \nor an UI component to be shown as the tooltip. String will be transformed \ninto a tooltip UI label component.  Pass null as the argument to stop\nshowing tooltip for the given component.",
                    "type": "zebra.ui.Panel|String"
                }
            ],
            "itemtype": "method",
            "name": "setTooltip",
            "class": "zebra.ui.TooltipManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17940,
            "description": "Define interval (in milliseconds) between entering a component and showing \na tooltip for the entered component",
            "itemtype": "attribute",
            "name": "tick",
            "type": "{Integer}",
            "class": "zebra.ui.TooltipManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 17972,
            "description": "Test if the given menu item is a decorative (not selectable) menu item",
            "params": [
                {
                    "name": "index",
                    "description": "a menu item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "true if the given menu item is decorative",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isDecorative",
            "class": "zebra.ui.Menu",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18060,
            "description": "Get a sub menu for the given menu item",
            "params": [
                {
                    "name": "index",
                    "description": "a menu item index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a sub menu or null if no sub menu \nis defined for the given menu item",
                "type": "zebra.ui.Menu"
            },
            "itemtype": "method",
            "name": "getSubmenuAt",
            "class": "zebra.ui.Menu",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18071,
            "description": "Set the given menu as a sub-menu for the specified menu item",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a menu item for that a sub menu \nhas to be attached",
                    "type": "Inetger"
                },
                {
                    "name": "m",
                    "description": "a sub menu to be attached",
                    "type": "zebra.ui.Menu"
                }
            ],
            "itemtype": "method",
            "name": "setSubmenuAt",
            "class": "zebra.ui.Menu",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18227,
            "description": "Add the specified component as a decorative item of the menu",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "itemtype": "method",
            "name": "addDecorative",
            "class": "zebra.ui.Menu",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18405,
            "description": "Add a new item to the menu bar component and binds the given menu \nto it.",
            "params": [
                {
                    "name": "c",
                    "description": "an item title that can be passed as \nan UI component or a string.",
                    "type": "zebra.ui.Panel|String"
                },
                {
                    "name": "m",
                    "description": "a menu",
                    "type": "zebra.ui.Menu"
                }
            ],
            "itemtype": "method",
            "name": "addMenu",
            "class": "zebra.ui.Menunbar",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18418,
            "description": "Bind the specified menu to the given item of the menu bar",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a menu bar item",
                    "type": "Integer"
                },
                {
                    "name": "m",
                    "description": "a menu. Pass null as the parameter value\nto unbind the given a menu from the given menu bar item",
                    "type": "zebra.ui.Menu"
                }
            ],
            "itemtype": "method",
            "name": "setMenuAt",
            "class": "zebra.ui.Menunbar",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18443,
            "description": "Get a menu component that is bound to the given menu bar item",
            "params": [
                {
                    "name": "i",
                    "description": "an index of a menu bar item",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an UI menu component",
                "type": "zebra.ui.Menu"
            },
            "itemtype": "method",
            "name": "getMenuAt",
            "class": "zebra.ui.Menunbar",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18453,
            "description": "Get a menu component that is bound to the given menu bar item",
            "params": [
                {
                    "name": "c",
                    "description": "a menu bar item UI component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "an UI menu component",
                "type": "zebra.ui.Menu"
            },
            "itemtype": "method",
            "name": "getMenu",
            "class": "zebra.ui.Menunbar",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18756,
            "description": "Get popup info interface that is bound to the given component",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "an popup info interface implementation",
                "type": "zebra.ui.PopupInfo"
            },
            "itemtype": "method",
            "name": "getPopup",
            "class": "zebra.ui.PopupManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18791,
            "description": "Set the given context menu or an zebra.ui.PopupInfo interface implementation \nto the specified UI component.",
            "params": [
                {
                    "name": "c",
                    "description": "an UI component",
                    "type": "zebra.ui.Panel"
                },
                {
                    "name": "p",
                    "description": "a popup info interface implementation\nthat says when and which context menu has to be shown for the given UI component.\nOr UI context menu directly. Passing null as the argument value delete a context\nmenu definition from the given UI component.",
                    "type": "zebra.ui.Menu|zebra.ui.PopupInfo"
                }
            ],
            "itemtype": "method",
            "name": "setPopup",
            "class": "zebra.ui.PopupManager",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 18854,
            "class": "zebra.ui.designer.ShaperPan",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19132,
            "class": "zebra.ui.HtmlElement",
            "module": "ui.designer"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19164,
            "description": "Set the CSS font of the wrapped HTML element",
            "params": [
                {
                    "name": "f",
                    "description": "a font",
                    "type": "String|zebra.ui.Font"
                }
            ],
            "itemtype": "method",
            "name": "setFont",
            "class": "zebra.ui.HtmlElement",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19174,
            "description": "Set the CSS color of the wrapped HTML element",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setColor",
            "class": "zebra.ui.HtmlElement",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19233,
            "description": "Set the inner content of the wrapped HTML element",
            "params": [
                {
                    "name": "an",
                    "description": "inner content",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setContent",
            "class": "zebra.ui.HtmlElement",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19243,
            "description": "Apply the given set of CSS styles to the wrapped HTML element",
            "params": [
                {
                    "name": "styles",
                    "description": "a dictionary of CSS styles",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setStyles",
            "class": "zebra.ui.HtmlElement",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19254,
            "description": "Apply the given CSS style to the wrapped HTML element",
            "params": [
                {
                    "name": "a",
                    "description": "name of the CSS style",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "value the CSS style has to be set",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setStyle",
            "class": "zebra.ui.HtmlElement",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19272,
            "description": "Set the specified attribute of the wrapped HTML element",
            "params": [
                {
                    "name": "name",
                    "description": "a name of attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "a value of the attribute",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setAttribute",
            "class": "zebra.ui.HtmlElement",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19284,
            "description": "Reference to HTML element the UI component wraps",
            "itemtype": "attribute",
            "name": "element",
            "readonly": "",
            "type": "{HTMLElement}",
            "class": "zebra.ui.HtmlElement",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19505,
            "description": "Get a text of the text input element",
            "return": {
                "description": "a text of the  text input element",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getText",
            "class": "zebra.ui.HtmlTextInput",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19514,
            "description": "Set the text",
            "params": [
                {
                    "name": "t",
                    "description": "a text",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setText",
            "class": "zebra.ui.HtmlTextInput",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19572,
            "class": "zebra.ui.tree.DefEditors",
            "module": "ui"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19617,
            "description": "Internal component that are designed as default editor component",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "attribute",
            "name": "tf",
            "type": "{zebra.ui.TextField}",
            "class": "zebra.ui.tree.DefEditors",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19631,
            "description": "Get an UI component to edit the given tree model element",
            "params": [
                {
                    "name": "src",
                    "description": "a tree component",
                    "type": "zebra.ui.tree.Tree"
                },
                {
                    "name": "item",
                    "description": "an data model item",
                    "type": "zebra.data.Item"
                }
            ],
            "return": {
                "description": "an editor UI component",
                "type": "zebra.ui.Panel"
            },
            "itemtype": "method",
            "name": "getEditor",
            "class": "zebra.ui.tree.DefEditors",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19644,
            "description": "Fetch a model item from the given UI editor component",
            "params": [
                {
                    "name": "src",
                    "description": "a tree UI component",
                    "type": "zebra.ui.tree.Tree"
                },
                {
                    "name": "editor",
                    "description": "an editor that has been used to edit the tree model element",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "an new tree model element value fetched from the given UI editor component",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "fetchEditedValue",
            "class": "zebra.ui.tree.DefEditors",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19655,
            "description": "The method is called to ask if the given input event should trigger an tree component item",
            "params": [
                {
                    "name": "src",
                    "description": "a tree UI component",
                    "type": "zebra.ui.tree.Tree"
                },
                {
                    "name": "e",
                    "description": "an input event: mouse or key event",
                    "type": "zebra.ui.MouseEvent|zebra/ui.KeyEvent"
                }
            ],
            "return": {
                "description": "true if the event should trigger edition of a tree component item",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "@shouldStartEdit",
            "class": "zebra.ui.tree.DefEditors",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19678,
            "description": "Get a view for the given model item of the UI tree component",
            "params": [
                {
                    "name": "d",
                    "description": "a tree component",
                    "type": "zebra.ui.tree.Tree"
                },
                {
                    "name": "obj",
                    "description": "a tree model element",
                    "type": "zebra.data.Item"
                }
            ],
            "return": {
                "description": "a view to visualize the given tree data model element",
                "type": "zebra.ui.View"
            },
            "itemtype": "method",
            "name": "getView",
            "class": "zebra.ui.tree.DefViews",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19730,
            "description": "Fired when a tree item has been toggled\n\n      tree._.add(function toggled(src, item) {\n         ...    \n      });",
            "itemtype": "event",
            "name": "toggled",
            "params": [
                {
                    "name": "src",
                    "description": "an tree component that triggers the event",
                    "type": "zebra.ui.tree.Tree"
                },
                {
                    "name": "item",
                    "description": "an tree item that has been toggled",
                    "type": "zebra.data.Item"
                }
            ],
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19742,
            "description": "Fired when a tree item has been selected\n\n    tree._.add(function selected(src, item) {\n       ...\n    });",
            "itemtype": "event",
            "name": "selected",
            "params": [
                {
                    "name": "src",
                    "description": "an tree component that triggers the event",
                    "type": "zebra.ui.tree.Tree"
                },
                {
                    "name": "item",
                    "description": "an tree item that has been toggled",
                    "type": "zebra.data.Item"
                }
            ],
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19758,
            "description": "Selected tree item",
            "itemtype": "attribute",
            "name": "selected",
            "readonly": "",
            "type": "{zebra.data.Item}",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19765,
            "description": "Tree data model the UI component visualizes",
            "itemtype": "attribute",
            "name": "model",
            "readonly": "",
            "type": "{zebra.data.TreeModel}",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19800,
            "description": "Test if the given tree component item is opened",
            "params": [
                {
                    "name": "i",
                    "description": "a tree model item",
                    "type": "zebra.data.Item"
                }
            ],
            "return": {
                "description": "true if the given tree component item is opened",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isOpen",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19868,
            "description": "Get current toggle element view. The view depends on the state of tree item.",
            "params": [
                {
                    "name": "i",
                    "description": "a tree model item",
                    "type": "zebra.data.Item"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "a toggle element view",
                "type": "zebra.ui.View"
            },
            "itemtype": "method",
            "name": "getToogleView",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 19880,
            "description": "Get a tree item that is located at the given location.",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a tree model item",
                "type": "zebra.data.Item"
            },
            "itemtype": "method",
            "name": "getItemAt",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20246,
            "description": "Select the given item.",
            "params": [
                {
                    "name": "an",
                    "description": "item to be selected. Use null value to clear any selection",
                    "type": "zebra.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20269,
            "description": "Make the given tree item visible. Tree component rendered content can takes more space than \nthe UI component size is. In this case the content can be scrolled to make visible required \ntree item.",
            "params": [
                {
                    "name": "item",
                    "description": "an item to be visible",
                    "type": "zebra.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "makeVisible",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20343,
            "description": "Toggle off or on recursively all items of the given item",
            "params": [
                {
                    "name": "root",
                    "description": "a starting item to toggle",
                    "type": "zebra.data.Item"
                },
                {
                    "name": "b",
                    "description": "true if all items have to be in opened \nstate and false otherwise",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "toggleAll",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20360,
            "description": "Toggle the given tree item",
            "params": [
                {
                    "name": "item",
                    "description": "an item to be toggled",
                    "type": "zebra.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "toggle",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20404,
            "description": "Start editing the given if an editor for the item has been defined.",
            "params": [
                {
                    "name": "item",
                    "description": "an item whose content has to be edited",
                    "type": "zebra.data.Item"
                }
            ],
            "itemtype": "method",
            "name": "startEditing",
            "access": "protected",
            "tagname": "",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20426,
            "description": "Stop editing currently edited tree item and apply or discard the result of the\nediting to tree data model.",
            "params": [
                {
                    "name": "true",
                    "description": "if the editing result has to be applied to tree data model",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "stopEditing",
            "access": "protected",
            "tagname": "",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20461,
            "description": "A tree model items view provider",
            "readonly": "",
            "itemtype": "attribute",
            "name": "provider",
            "type": "{zebra.ui.tree.DefsViews}",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20468,
            "description": "A tree model editor provider",
            "readonly": "",
            "itemtype": "attribute",
            "name": "editors",
            "type": "{zebra.ui.tree.DefEditors}",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20475,
            "description": "Tree component line color",
            "itemtype": "attribute",
            "name": "lnColor",
            "type": "{String}",
            "readonly": "",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20510,
            "description": "Set the given editor provider. The editor provider is a class that is used to decide which UI\ncomponent has to be used as an item editor, how the editing should be triggered and how the \nedited value has to be fetched from an UI editor.",
            "params": [
                {
                    "name": "p",
                    "description": "an editor provider",
                    "type": "zebra.ui.tree.DefEditors"
                }
            ],
            "itemtype": "method",
            "name": "setEditorProvider",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20524,
            "description": "Say if items of the tree component should be selectable",
            "params": [
                {
                    "name": "b",
                    "description": "true is tree component items can be selected",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setSelectable",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20537,
            "description": "Set tree component connector lines color",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setLineColor",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20555,
            "description": "Set tree component items view provider. Provider says how tree model items \nhave to be visualized.",
            "params": [
                {
                    "name": "p",
                    "description": "a view provider",
                    "type": "zebra.ui.tree.DefViews"
                }
            ],
            "itemtype": "method",
            "name": "setViewProvider",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20572,
            "description": "Set the number of views to customize rendering of different visual elements of the tree \nUI component. The following decorative elements can be customized:\n\n   - **\"close\" ** - closed tree item icon view \n   - **\"open\" **  - opened tree item icon view\n   - **\"leaf\" **  - leaf tree item icon view\n   - **\"on\" **    - toggle on view \n   - **\"off\" **   - toggle off view\n   - **\"iselect\" **   - a view to express an item selection when tree component doesn't hold focus\n   - **\"aselect\" **   - a view to express an item selection when tree component holds focus\n\nFor instance:\n    \n       // build tree UI component\n       var tree = new zebra.ui.tree.Tree({\n           value: \"Root\",\n           kids: [\n               \"Item 1\",\n               \"Item 2\"\n           ]\n       });\n\n       // set \" [x] \" text render for toggle on and \n       // \" [o] \" text render for toggle off tree elements\n       tree.setViews({\n           \"on\": new zebra.ui.TextRender(\" [x] \"),\n           \"off\": new zebra.ui.TextRender(\" [o] \")\n       });",
            "params": [
                {
                    "name": "v",
                    "description": "dictionary of tree component decorative elements views",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViews",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20619,
            "description": "Set the given tree model to be visualized with the UI component.",
            "params": [
                {
                    "name": "d",
                    "description": "a tree model",
                    "type": "zebra.data.TreeModel|Object"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "class": "zebra.ui.tree.Tree",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20698,
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.tree"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20743,
            "description": "Get the given column width of a grid component",
            "params": [
                {
                    "name": "col",
                    "description": "a column index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getColWidth",
            "return": {
                "description": "a column width",
                "type": "Integer"
            },
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20750,
            "description": "Get the given row height of a grid component",
            "params": [
                {
                    "name": "row",
                    "description": "a row index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getRowHeight",
            "return": {
                "description": "a row height",
                "type": "Integer"
            },
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20757,
            "description": "Get the given row preferred height of a grid component",
            "params": [
                {
                    "name": "row",
                    "description": "a row index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getPSRowHeight",
            "return": {
                "description": "a row preferred height",
                "type": "Integer"
            },
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20764,
            "description": "Get the given column preferred width of a grid component",
            "params": [
                {
                    "name": "col",
                    "description": "a column index",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "getPSColWidth",
            "return": {
                "description": "a column preferred width",
                "type": "Integer"
            },
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20771,
            "description": "Get a x origin of a grid component. Origin indicates how \nthe grid component content has been scrolled",
            "itemtype": "method",
            "name": "getXOrigin",
            "return": {
                "description": "a x origin",
                "type": "Integer"
            },
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20778,
            "description": "Get a y origin of a grid component. Origin indicates how \nthe grid component content has been scrolled",
            "itemtype": "method",
            "name": "getYOrigin",
            "return": {
                "description": "a y origin",
                "type": "Integer"
            },
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20785,
            "description": "Set the given column width of a grid component",
            "params": [
                {
                    "name": "col",
                    "description": "a column index",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a column width",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setColWidth",
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20792,
            "description": "Set the given row height of a grid component",
            "params": [
                {
                    "name": "row",
                    "description": "a row index",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a row height",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRowHeight",
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20799,
            "description": "Get number of columns in a grid component",
            "return": {
                "description": "a number of columns",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridCols",
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20805,
            "description": "Get number of rows in a grid component",
            "return": {
                "description": "a number of rows",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridRows",
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20811,
            "description": "Get a structure that describes a grid component \ncolumns and rows visibility",
            "return": {
                "description": "a grid cells visibility",
                "type": "zebra.ui.grid.CellsVisibility"
            },
            "itemtype": "method",
            "name": "getCellsVisibility",
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20818,
            "description": "Grid line size",
            "itemtype": "attribute",
            "name": "lineSize",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20825,
            "description": "Indicate if a grid sizes its rows and cols basing on its preferred sizes",
            "itemtype": "attribute",
            "name": "isUsePsMetric",
            "type": "{Boolean}",
            "readonly": "",
            "class": "zebra.ui.grid.Metrics",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20867,
            "description": "Fetch an edited value from the given UI editor component.",
            "params": [
                {
                    "name": "row",
                    "description": "a grid cell row that has been edited",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column that has been edited",
                    "type": "Integer"
                },
                {
                    "name": "data",
                    "description": "an original cell content",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "an editor that has been used to \nedit the given cell",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "a value that has to be applied as a new content of \nthe edited cell content",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "fetchEditedValue",
            "class": "zebra.ui.grid.DefEditors",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20882,
            "description": "Fetch an edited value from the given UI editor component.",
            "params": [
                {
                    "name": "row",
                    "description": "a grid cell row that has been edited",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column that has been edited",
                    "type": "Integer"
                },
                {
                    "name": "data",
                    "description": "an original cell content",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "an editor that has been used to \nedit the given cell",
                    "type": "zebra.ui.Panel"
                }
            ],
            "return": {
                "description": "a value that has to be applied as a new content of \nthe edited cell content",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "fetchEditedValue",
            "class": "zebra.ui.grid.DefEditors",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20936,
            "description": "Minimal possible grid cell size",
            "type": "{Number}",
            "default": "10",
            "itemtype": "attribute",
            "name": "minSize",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20944,
            "description": "Size of the active area where cells size can be changed by mouse dragging event",
            "itemtype": "attribute",
            "name": "activeAreaSize",
            "type": "{Number}",
            "default": "20",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20952,
            "description": "Indicate if the grid cell size has to be adjusted according \nto the cell preferred size by mouse double click event.",
            "itemtype": "attribute",
            "name": "isAutoFit",
            "default": "true",
            "type": "{Boolean}",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 20960,
            "description": "Indicate if the grid cells are resize-able. \nto the cell preferred size by mouse double click event.",
            "itemtype": "attribute",
            "name": "isResizable",
            "default": "true",
            "type": "{Boolean}",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21067,
            "description": "Get a grid caption column or row title view",
            "params": [
                {
                    "name": "i",
                    "description": "a row (if the caption is vertical) or \ncolumn (if the caption is horizontal) index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a view to be used as the given \nrow or column title view",
                "type": "zebra.ui.View"
            },
            "itemtype": "method",
            "name": "getTitleView",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21220,
            "description": "Set grid caption border view. The border view is used to render every cell \nof the grid caption.",
            "params": [
                {
                    "name": "v",
                    "description": "a view",
                    "type": "zebra.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "setBorderView",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21233,
            "description": "Put the given title for the given caption cell.",
            "params": [
                {
                    "name": "rowcol",
                    "description": "a grid caption cell index",
                    "type": "Integer"
                },
                {
                    "name": "title",
                    "description": "a title of the given grid caption cell.\nCan be a string or zbra.ui.View class instance",
                    "type": "String|zebra.ui.View"
                }
            ],
            "itemtype": "method",
            "name": "putTitle",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21265,
            "description": "Set the given grid caption cell title properties such as: vertical and \nhorizontal alignment, background color.",
            "params": [
                {
                    "name": "rowcol",
                    "description": "a grid caption cell index",
                    "type": "Integer"
                },
                {
                    "name": "ax",
                    "description": "a horizontal alignment of the given cell title. Can\nbe: zebra.layout.LEFT, zebra.layout.CENTER, zebra.layout.RIGHT",
                    "type": "Integer"
                },
                {
                    "name": "ay",
                    "description": "a vertical alignment of the given cell title. Can\nbe: zebra.layout.TOP, zebra.layout.CENTER, zebra.layout.BOTTOM",
                    "type": "Integer"
                },
                {
                    "name": "bg",
                    "description": "a background color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setTitleProps",
            "class": "zebra.ui.grid.GridCaption",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21305,
            "description": "Fire when a grid row selection state has been changed\n\n       grid._.add(function(grid, row, count, status) {\n           ... \n       });",
            "itemtype": "event",
            "name": "rowSelected",
            "params": [
                {
                    "name": "grid",
                    "description": "a grid that triggers the event",
                    "type": "zebra.ui.grid.Grid"
                },
                {
                    "name": "row",
                    "description": "a first row whose selection state has been updated. The row is \n-1 if all selected rows have been unselected",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "a number of rows whose selection state has been updated",
                    "type": "Integer"
                },
                {
                    "name": "status",
                    "description": "a status. true means rows have been selected",
                    "type": "Boolean"
                }
            ],
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21330,
            "description": "Grid line size",
            "itemtype": "attribute",
            "name": "lineSize",
            "default": "1",
            "type": "{Integer}",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21337,
            "description": "Grid cell top padding",
            "itemtype": "attribute",
            "name": "cellInsetsTop",
            "default": "1",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21345,
            "description": "Grid cell left padding",
            "itemtype": "attribute",
            "name": "cellInsetsLeft",
            "default": "2",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21353,
            "description": "Grid cell bottom padding",
            "itemtype": "attribute",
            "name": "cellInsetsBottom",
            "default": "1",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21361,
            "description": "Grid cell right padding",
            "itemtype": "attribute",
            "name": "cellInsetsRight",
            "default": "2",
            "type": "{Integer}",
            "readonly": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21371,
            "description": "Indicate if vertical lines have to be rendered",
            "itemtype": "attribute",
            "name": "drawVerLines",
            "type": "{Boolean}",
            "readonly": "",
            "default": "true",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21379,
            "description": "Indicate if horizontal lines have to be rendered",
            "itemtype": "attribute",
            "name": "drawHorLines",
            "type": "{Boolean}",
            "readonly": "",
            "default": "true",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21388,
            "description": "Line color",
            "itemtype": "attribute",
            "name": "lineColor",
            "type": "{String}",
            "default": "gray",
            "readonly": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21397,
            "description": "Indicate if size of grid cells have to be calculated \nautomatically basing on its preferred heights and widths",
            "itemtype": "attribute",
            "name": "isUsePsMetric",
            "type": "{Boolean}",
            "default": "false",
            "readonly": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21582,
            "description": "Get a preferred width the given column wants to have",
            "params": [
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a preferred width of the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColPSWidth",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21592,
            "description": "Get a preferred height the given row wants to have",
            "params": [
                {
                    "name": "col",
                    "description": "a row",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a preferred height of the given row",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getRowPSHeight",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21612,
            "description": "Get number of rows in the given grid",
            "return": {
                "description": "a number of rows",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridRows",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21621,
            "description": "Get number of columns in the given grid",
            "return": {
                "description": "a number of columns",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getGridColumns",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21630,
            "description": "Get the  given grid row height",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a height of the given row",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getRowHeight",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21641,
            "description": "Get the given grid column width",
            "params": [
                {
                    "name": "col",
                    "description": "a grid column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a width of the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColWidth",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21657,
            "description": "Get the given column top-left corner x coordinate",
            "params": [
                {
                    "name": "col",
                    "description": "a column",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a top-left corner x coordinate of the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColX",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21668,
            "description": "Get the given row top-left corner y coordinate",
            "params": [
                {
                    "name": "row",
                    "description": "a row",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a top-left corner y coordinate \nof the given column",
                "type": "Integer"
            },
            "itemtype": "method",
            "name": "getColX",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21714,
            "description": "Get top grid caption height. Return zero if no top caption element has been defined",
            "return": {
                "description": "a top caption height",
                "type": "Integer"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getTopCaptionHeight",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21724,
            "description": "Get left grid caption width. Return zero if no left caption element has been defined",
            "return": {
                "description": "a left caption width",
                "type": "Integer"
            },
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getLeftCaptionWidth",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21777,
            "description": "Stop editing a grid cell.",
            "params": [
                {
                    "name": "applyData",
                    "description": "true if the edited data has to be applied as a new \ngrid cell content",
                    "type": "Boolean"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "stopEditing",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21818,
            "description": "Set if horizontal and vertical lines have to be painted",
            "params": [
                {
                    "name": "hor",
                    "description": "true if horizontal lines have to be painted",
                    "type": "Boolean"
                },
                {
                    "name": "ver",
                    "description": "true if vertical lines have to be painted",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setDrawLines",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21867,
            "description": "Checks if the given grid row is selected",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Inetger"
                }
            ],
            "return": {
                "description": "true if the given row is selected",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isSelected",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21878,
            "description": "Repaint range of grid rows",
            "params": [
                {
                    "name": "r1",
                    "description": "the first row to be repainted",
                    "type": "Integer"
                },
                {
                    "name": "r2",
                    "description": "the last row to be repainted",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "repaintRows",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21900,
            "description": "Detect a cell by the given location",
            "params": [
                {
                    "name": "x",
                    "description": "a x coordinate relatively the grid component",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "a y coordinate relatively the grid component",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "an array that contains detected grid cell row as \nthe first element and a grid column as the second element. The \nrow and column values are set to -1 if no grid cell can be found \nat the given location",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "cellByLocation",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21984,
            "description": "Clear grid row or rows selection",
            "itemtype": "method",
            "name": "clearSelect",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 21997,
            "description": "Mark as selected or unselected the given grid row.",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a selection status",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "select",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22053,
            "description": "Paint vertical and horizontal grid component lines",
            "params": [
                {
                    "name": "g",
                    "description": "a HTML5 canvas 2d context",
                    "type": "2DContext"
                }
            ],
            "itemtype": "method",
            "name": "paintNet",
            "access": "protected",
            "tagname": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22093,
            "description": "Paint grid data",
            "params": [
                {
                    "name": "g",
                    "description": "a HTML5 canvas 2d context",
                    "type": "2DContext"
                }
            ],
            "itemtype": "method",
            "name": "paintData",
            "access": "protected",
            "tagname": "",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22297,
            "description": "Set the given height for the specified grid row. The method has no effect\nif the grid component is forced to use preferred size metric.",
            "params": [
                {
                    "name": "row",
                    "description": "a grid row",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "a height of the grid row",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setRowHeight",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22323,
            "description": "Set the given width for the specified grid column. The method has no effect\nif the grid component is forced to use preferred size metric.",
            "params": [
                {
                    "name": "column",
                    "description": "a grid column",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "a width of the grid column",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setColWidth",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22378,
            "description": "Set the given titles for top or left grid header. If grid header \nhas not been added it will be created.",
            "params": [
                {
                    "name": "constr",
                    "description": "a header constraints. Can be:\n        \n       zebra.layout.TOP to express top grid caption \n       zebra.layout.LEFT to express left grid caption",
                    "type": "Integer"
                },
                {
                    "name": "header",
                    "description": "captions titles",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "setHeader",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22403,
            "description": "Set the given editor provider. Editor provider is a way to customize \ncell editing.",
            "params": [
                {
                    "name": "p",
                    "description": "an editor provider",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setEditorProvider",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22427,
            "description": "Virtual cursor position controller",
            "readonly": "",
            "itemtype": "attribute",
            "name": "position",
            "type": "{zebra.util.Position}",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22442,
            "description": "Set the given cell view provider. Provider is a special class that says \nhow grid cells content has to be rendered, aligned, colored",
            "params": [
                {
                    "name": "p",
                    "description": "a view provider",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "setViewProvider",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22455,
            "description": "Set the given matrix model to be visualized and controlled \nwith the grid component",
            "params": [
                {
                    "name": "d",
                    "description": "a model passed as an \ninstance of zebra matrix model or an array that contains \nmodel rows as embedded arrays.",
                    "type": "zebra.data.Matrix|Array"
                }
            ],
            "itemtype": "method",
            "name": "setModel",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22476,
            "description": "Set the given top, left, right, bottom cell paddings",
            "params": [
                {
                    "name": "p",
                    "description": "a top, left, right and bottom cell paddings",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setCellPadding",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22485,
            "description": "Set the given top, left, right, bottom cell paddings",
            "params": [
                {
                    "name": "t",
                    "description": "a top cell padding",
                    "type": "Integer"
                },
                {
                    "name": "l",
                    "description": "a left cell padding",
                    "type": "Integer"
                },
                {
                    "name": "b",
                    "description": "a bottom cell padding",
                    "type": "Integer"
                },
                {
                    "name": "r",
                    "description": "a rightcell padding",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setCellPaddings",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22522,
            "description": "Set the given color to render the grid vertical and horizontal lines",
            "params": [
                {
                    "name": "c",
                    "description": "a color",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setLineColor",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22570,
            "description": "Set the given grid lines size",
            "params": [
                {
                    "name": "s",
                    "description": "a size",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "setLineSize",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22582,
            "description": "Start editing the given grid cell. Editing is initiated only if an editor \nprovider has been set and the editor provider defines not-null UI component\nas an editor for the given cell.",
            "params": [
                {
                    "name": "row",
                    "description": "a grid cell row",
                    "type": "Integer"
                },
                {
                    "name": "col",
                    "description": "a grid cell column",
                    "type": "Integer"
                }
            ],
            "itemtype": "method",
            "name": "startEditing",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22615,
            "description": "Get currently editing grid cell",
            "return": {
                "description": "am editing grid cell row and column as the first \nand the second array elements correspondingly. null if there is no \nany editing grid cell",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getEditingCell",
            "class": "zebra.ui.grid.Grid",
            "module": "ui.grid"
        },
        {
            "file": "/var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js",
            "line": 22850,
            "class": "",
            "module": "ui.grid"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:990"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:2159"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:3016"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:3980"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:5560"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:10096"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:11975"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:14874"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:15607"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:16143"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:16727"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:17125"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:18854"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:19132"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:19572"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:20698"
        },
        {
            "message": "Missing item type",
            "line": " /var/folders/zt/mfkpsc7d39qg858tf933jr1h0000gp/T/d20130929-45996-ie57z7/zebra.js:22850"
        }
    ]
}